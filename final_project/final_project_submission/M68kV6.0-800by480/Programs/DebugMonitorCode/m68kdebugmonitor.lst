680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 16 Apr 2023      Time: 20:55:34          Source: C:\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400 
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  4570 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2CDE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1FA8      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; #include <stdio.h>
                     472   ; #include <stdlib.h>
                     473   ; #include <limits.h>
                     474   ; #include "snake.h"
                     475   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     476   ; //#define StartOfExceptionVectorTable 0x08030000
                     477   ; #define StartOfExceptionVectorTable 0x0B000000
                     478   ; // use 0C000000 for dram or hex 08040000 for sram
                     479   ; //#define TopOfStack 0x08040000
                     480   ; #define TopOfStack 0x0C000000
                     481   ; // the start address of the sdram
                     482   ; #define start_of_dram 0x08000000
                     483   ; #define vga_ram_start         (*(volatile unsigned char *)(0x00600000))
                     484   ; #define vga_x_cursor_reg          (*(volatile unsigned char *)(0x00601000))
                     485   ; #define vga_y_cursor_reg            (*(volatile unsigned char *)(0x00601002))
                     486   ; #define vga_ctrl_reg             (*(volatile unsigned char *)(0x00601004))
                     487   ; #define StartOfExceptionVectorTable 0x0B000000
                     488   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                     489   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                     490   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                     491   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     492   ; unsigned int i, x, y, z, PortA_Count;
                     493   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     494   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     495   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     496   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     497   ; unsigned int PC, SSP, USP ;
                     498   ; unsigned short int SR;
                     499   ; // Breakpoint variables
                     500   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     501   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     502   ; unsigned int BreakPointSetOrCleared[8] ;
                     503   ; unsigned int InstructionSize ;
                     504   ; // watchpoint variables
                     505   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     506   ; unsigned int WatchPointSetOrCleared[8] ;
                     507   ; char WatchPointString[8][100] ;
                     508   ; char    TempString[100] ; 
                     509   ; int score;
                     510   ; int timer;
                     511   ; unsigned int clock_counter;
                     512   ; unsigned int vga_color;
                     513   ; struct
                     514   ; {
                     515   ; coord_t xy[SNAKE_LENGTH_LIMIT];
                     516   ; int length;
                     517   ; dir_t direction;
                     518   ; int speed;
                     519   ; int speed_increase;
                     520   ; coord_t food;
                     521   ; } Snake;
                     522   ; const coord_t screensize = {NUM_VGA_COLUMNS,NUM_VGA_ROWS};
                     523   ; int waiting_for_direction_to_be_implemented;
                     524   ; /************************************************************************************
                     525   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     526   ; ************************************************************************************/
                     527   ; void Wait1ms(void)
                     528   ; {
                     529   _Wait1ms:
00000932  2F02       530          move.l    D2,-(A7)
                     531   ; long int  i ;
                     532   ; for(i = 0; i < 1000; i ++)
00000934  4282       533          clr.l     D2
                     534   Wait1ms_1:
00000936  0C82 0000  535          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       536          bge.s     Wait1ms_3
0000093E  5282       537          addq.l    #1,D2
00000940  60F4       538          bra       Wait1ms_1
                     539   Wait1ms_3:
00000942  241F       540          move.l    (A7)+,D2
00000944  4E75       541          rts
                     542   ; ;
                     543   ; }
                     544   ; /************************************************************************************
                     545   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     546   ; **************************************************************************************/
                     547   ; void Wait3ms(void)
                     548   ; {
                     549   _Wait3ms:
00000946  2F02       550          move.l    D2,-(A7)
                     551   ; int i ;
                     552   ; for(i = 0; i < 3; i++)
00000948  4282       553          clr.l     D2
                     554   Wait3ms_1:
0000094A  0C82 0000  555          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       556          bge.s     Wait3ms_3
                     557   ; Wait1ms() ;
00000952  4EB8 0932  558          jsr       _Wait1ms
00000956  5282       559          addq.l    #1,D2
00000958  60F0       560          bra       Wait3ms_1
                     561   Wait3ms_3:
0000095A  241F       562          move.l    (A7)+,D2
0000095C  4E75       563          rts
                     564   ; }
                     565   ; /*********************************************************************************************
                     566   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     567   ; *********************************************************************************************/
                     568   ; void Init_LCD(void)
                     569   ; {
                     570   _Init_LCD:
                     571   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  572          move.b    #12,4194336
00000962  0040 0020 
                     573   ; Wait3ms() ;
00000966  4EB8 0946  574          jsr       _Wait3ms
                     575   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  576          move.b    #56,4194336
0000096E  0040 0020 
                     577   ; Wait3ms() ;
00000972  4EB8 0946  578          jsr       _Wait3ms
00000976  4E75       579          rts
                     580   ; }
                     581   ; /******************************************************************************
                     582   ; *subroutine to output a single character held in d1 to the LCD display
                     583   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     584   ; *current cursor position
                     585   ; *******************************************************************************/
                     586   ; void Outchar(int c)
                     587   ; {
                     588   _Outchar:
00000978  4E56 0000  589          link      A6,#0
                     590   ; LCDdata = (char)(c);
0000097C  202E 0008  591          move.l    8(A6),D0
00000980  13C0 0040  592          move.b    D0,4194338
00000984  0022      
                     593   ; Wait1ms() ;
00000986  4EB8 0932  594          jsr       _Wait1ms
0000098A  4E5E       595          unlk      A6
0000098C  4E75       596          rts
                     597   ; }
                     598   ; /**********************************************************************************
                     599   ; *subroutine to output a message at the current cursor position of the LCD display
                     600   ; ************************************************************************************/
                     601   ; void OutMess(char *theMessage)
                     602   ; {
                     603   _OutMess:
0000098E  4E56 FFFC  604          link      A6,#-4
                     605   ; char c ;
                     606   ; while((c = *theMessage++) != (char)(0))
                     607   OutMess_1:
00000992  206E 0008  608          move.l    8(A6),A0
00000996  52AE 0008  609          addq.l    #1,8(A6)
0000099A  1D50 FFFF  610          move.b    (A0),-1(A6)
0000099E  1010       611          move.b    (A0),D0
000009A0  6712       612          beq.s     OutMess_3
                     613   ; Outchar(c) ;
000009A2  122E FFFF  614          move.b    -1(A6),D1
000009A6  4881       615          ext.w     D1
000009A8  48C1       616          ext.l     D1
000009AA  2F01       617          move.l    D1,-(A7)
000009AC  4EB8 0978  618          jsr       _Outchar
000009B0  584F       619          addq.w    #4,A7
000009B2  60DE       620          bra       OutMess_1
                     621   OutMess_3:
000009B4  4E5E       622          unlk      A6
000009B6  4E75       623          rts
                     624   ; }
                     625   ; /******************************************************************************
                     626   ; *subroutine to clear the line by issuing 24 space characters
                     627   ; *******************************************************************************/
                     628   ; void Clearln(void)
                     629   ; {
                     630   _Clearln:
000009B8  2F02       631          move.l    D2,-(A7)
                     632   ; unsigned char i ;
                     633   ; for(i = 0; i < 24; i ++)
000009BA  4202       634          clr.b     D2
                     635   Clearln_1:
000009BC  0C02 0018  636          cmp.b     #24,D2
000009C0  640E       637          bhs.s     Clearln_3
                     638   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  639          pea       32
000009C6  4EB8 0978  640          jsr       _Outchar
000009CA  584F       641          addq.w    #4,A7
000009CC  5202       642          addq.b    #1,D2
000009CE  60EC       643          bra       Clearln_1
                     644   Clearln_3:
000009D0  241F       645          move.l    (A7)+,D2
000009D2  4E75       646          rts
                     647   ; }
                     648   ; /******************************************************************************
                     649   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     650   ; *******************************************************************************/
                     651   ; void Oline0(char *theMessage)
                     652   ; {
                     653   _Oline0:
000009D4  4E56 0000  654          link      A6,#0
                     655   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  656          move.b    #128,4194336
000009DC  0040 0020 
                     657   ; Wait3ms();
000009E0  4EB8 0946  658          jsr       _Wait3ms
                     659   ; Clearln() ;
000009E4  4EB8 09B8  660          jsr       _Clearln
                     661   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  662          move.b    #128,4194336
000009EC  0040 0020 
                     663   ; Wait3ms() ;
000009F0  4EB8 0946  664          jsr       _Wait3ms
                     665   ; OutMess(theMessage) ;
000009F4  2F2E 0008  666          move.l    8(A6),-(A7)
000009F8  4EB8 098E  667          jsr       _OutMess
000009FC  584F       668          addq.w    #4,A7
000009FE  4E5E       669          unlk      A6
00000A00  4E75       670          rts
                     671   ; }
                     672   ; /******************************************************************************
                     673   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     674   ; *******************************************************************************/
                     675   ; void Oline1(char *theMessage)
                     676   ; {
                     677   _Oline1:
00000A02  4E56 0000  678          link      A6,#0
                     679   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  680          move.b    #192,4194336
00000A0A  0040 0020 
                     681   ; Wait3ms();
00000A0E  4EB8 0946  682          jsr       _Wait3ms
                     683   ; Clearln() ;
00000A12  4EB8 09B8  684          jsr       _Clearln
                     685   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  686          move.b    #192,4194336
00000A1A  0040 0020 
                     687   ; Wait3ms() ;
00000A1E  4EB8 0946  688          jsr       _Wait3ms
                     689   ; OutMess(theMessage) ;
00000A22  2F2E 0008  690          move.l    8(A6),-(A7)
00000A26  4EB8 098E  691          jsr       _OutMess
00000A2A  584F       692          addq.w    #4,A7
00000A2C  4E5E       693          unlk      A6
00000A2E  4E75       694          rts
                     695   ; }
                     696   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     697   ; {
                     698   _InstallExceptionHandler:
00000A30  4E56 FFFC  699          link      A6,#-4
                     700   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  701          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     702   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  703          move.l    -4(A6),A0
00000A40  202E 000C  704          move.l    12(A6),D0
00000A44  E588       705          lsl.l     #2,D0
00000A46  21AE 0008  706          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       707          unlk      A6
00000A4E  4E75       708          rts
                     709   ; }
                     710   ; void TestLEDS(void)
                     711   ; {
                     712   _TestLEDS:
00000A50  48E7 3000  713          movem.l   D2/D3,-(A7)
                     714   ; int delay ;
                     715   ; unsigned char count = 0 ;
00000A54  4202       716          clr.b     D2
                     717   ; while(1)    {
                     718   TestLEDS_1:
                     719   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       720          move.b    D2,D0
00000A58  E908       721          lsl.b     #4,D0
00000A5A  1202       722          move.b    D2,D1
00000A5C  C23C 000F  723          and.b     #15,D1
00000A60  D001       724          add.b     D1,D0
00000A62  13C0 0040  725          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  726          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  727          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  728          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  729          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  730          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  731          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  732          move.b    D0,4194304
00000A90  0000      
                     733   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       734          clr.l     D3
                     735   TestLEDS_4:
00000A94  0C83 0003  736          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       737          bge.s     TestLEDS_6
00000A9C  5283       738          addq.l    #1,D3
00000A9E  60F4       739          bra       TestLEDS_4
                     740   TestLEDS_6:
                     741   ; ;
                     742   ; count ++;
00000AA0  5202       743          addq.b    #1,D2
00000AA2  60B2       744          bra       TestLEDS_1
                     745   ; }
                     746   ; }
                     747   ; void SwitchTest(void)
                     748   ; {
                     749   _SwitchTest:
00000AA4  48E7 3020  750          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  751          lea       _printf.L,A2
00000AAC  322C      
                     752   ; int i, switches = 0 ;
00000AAE  4283       753          clr.l     D3
                     754   ; printf("\r\n") ;
00000AB0  4879 0000  755          pea       @m68kde~1_1.L
00000AB4  3ADC      
00000AB6  4E92       756          jsr       (A2)
00000AB8  584F       757          addq.w    #4,A7
                     758   ; while(1)    {
                     759   SwitchTest_1:
                     760   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  761          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  762          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       763          lsl.l     #8,D0
00000AC8  1239 0040  764          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  765          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       766          or.l      D1,D0
00000AD6  2600       767          move.l    D0,D3
                     768   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  769          pea       @m68kde~1_2.L
00000ADC  3AE0      
00000ADE  4E92       770          jsr       (A2)
00000AE0  584F       771          addq.w    #4,A7
                     772   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  773          move.l    #128,D2
00000AE6  0080      
                     774   SwitchTest_4:
00000AE8  0C82 0000  775          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       776          ble.s     SwitchTest_6
                     777   ; if((switches & i) == 0)
00000AF0  2003       778          move.l    D3,D0
00000AF2  C082       779          and.l     D2,D0
00000AF4  660C       780          bne.s     SwitchTest_7
                     781   ; printf("0") ;
00000AF6  4879 0000  782          pea       @m68kde~1_3.L
00000AFA  3AF6      
00000AFC  4E92       783          jsr       (A2)
00000AFE  584F       784          addq.w    #4,A7
00000B00  600A       785          bra.s     SwitchTest_8
                     786   SwitchTest_7:
                     787   ; else
                     788   ; printf("1") ;
00000B02  4879 0000  789          pea       @m68kde~1_4.L
00000B06  3AF8      
00000B08  4E92       790          jsr       (A2)
00000B0A  584F       791          addq.w    #4,A7
                     792   SwitchTest_8:
00000B0C  E282       793          asr.l     #1,D2
00000B0E  60D8       794          bra       SwitchTest_4
                     795   SwitchTest_6:
00000B10  60A8       796          bra       SwitchTest_1
                     797   ; }
                     798   ; }
                     799   ; }
                     800   ; /*********************************************************************************************
                     801   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     802   ; *********************************************************************************************/
                     803   ; void Init_RS232(void)
                     804   ; {
                     805   _Init_RS232:
                     806   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  807          move.b    #21,4194368
00000B16  0040 0040 
                     808   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  809          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       810          rts
                     811   ; }
                     812   ; int kbhit(void)
                     813   ; {
                     814   _kbhit:
                     815   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  816          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  817          and.b     #1,D0
00000B2E  0C00 0001  818          cmp.b     #1,D0
00000B32  6604       819          bne.s     kbhit_1
                     820   ; return 1 ;
00000B34  7001       821          moveq     #1,D0
00000B36  6002       822          bra.s     kbhit_3
                     823   kbhit_1:
                     824   ; else
                     825   ; return 0 ;
00000B38  4280       826          clr.l     D0
                     827   kbhit_3:
00000B3A  4E75       828          rts
                     829   ; }
                     830   ; /*********************************************************************************************************
                     831   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     832   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     833   ; **  to allow the board to communicate with HyperTerminal Program
                     834   ; **
                     835   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     836   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     837   ; **  call _putch() also
                     838   ; *********************************************************************************************************/
                     839   ; int _putch( int c)
                     840   ; {
                     841   __putch:
00000B3C  4E56 0000  842          link      A6,#0
                     843   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     844   _putch_1:
00000B40  1039 0040  845          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  846          and.b     #2,D0
00000B4A  0C00 0002  847          cmp.b     #2,D0
00000B4E  6702       848          beq.s     _putch_3
00000B50  60EE       849          bra       _putch_1
                     850   _putch_3:
                     851   ; ;
                     852   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  853          move.l    8(A6),D0
00000B56  C03C 007F  854          and.b     #127,D0
00000B5A  13C0 0040  855          move.b    D0,4194370
00000B5E  0042      
                     856   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  857          move.l    8(A6),D0
00000B64  4E5E       858          unlk      A6
00000B66  4E75       859          rts
                     860   ; }
                     861   ; /*********************************************************************************************************
                     862   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     863   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     864   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     865   ; **
                     866   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     867   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     868   ; **  call _getch() also
                     869   ; *********************************************************************************************************/
                     870   ; int _getch( void )
                     871   ; {
                     872   __getch:
00000B68  2F02       873          move.l    D2,-(A7)
                     874   ; int c ;
                     875   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     876   _getch_1:
00000B6A  1039 0040  877          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  878          and.b     #1,D0
00000B74  0C00 0001  879          cmp.b     #1,D0
00000B78  6702       880          beq.s     _getch_3
00000B7A  60EE       881          bra       _getch_1
                     882   _getch_3:
                     883   ; ;
                     884   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  885          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  886          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  887          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       888          move.l    D0,D2
                     889   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     890   ; if(Echo)
00000B90  4AB9 0B00  891          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       892          beq.s     _getch_4
                     893   ; _putch(c);
00000B98  2F02       894          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  895          jsr       __putch
00000B9E  584F       896          addq.w    #4,A7
                     897   _getch_4:
                     898   ; return c ;
00000BA0  2002       899          move.l    D2,D0
00000BA2  241F       900          move.l    (A7)+,D2
00000BA4  4E75       901          rts
                     902   ; }
                     903   ; // flush the input stream for any unread characters
                     904   ; void FlushKeyboard(void)
                     905   ; {
                     906   _FlushKeyboard:
00000BA6  4E56 FFFC  907          link      A6,#-4
                     908   ; char c ;
                     909   ; while(1)    {
                     910   FlushKeyboard_1:
                     911   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  912          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  913          and.b     #1,D0
00000BB4  0C00 0001  914          cmp.b     #1,D0
00000BB8  6610       915          bne.s     FlushKeyboard_4
                     916   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  917          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  918          and.b     #127,D0
00000BC4  1D40 FFFF  919          move.b    D0,-1(A6)
00000BC8  6002       920          bra.s     FlushKeyboard_5
                     921   FlushKeyboard_4:
                     922   ; else
                     923   ; return ;
00000BCA  6002       924          bra.s     FlushKeyboard_6
                     925   FlushKeyboard_5:
00000BCC  60DC       926          bra       FlushKeyboard_1
                     927   FlushKeyboard_6:
00000BCE  4E5E       928          unlk      A6
00000BD0  4E75       929          rts
                     930   ; }
                     931   ; }
                     932   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     933   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     934   ; char xtod(int c)
                     935   ; {
                     936   _xtod:
00000BD2  4E56 0000  937          link      A6,#0
00000BD6  2F02       938          move.l    D2,-(A7)
00000BD8  242E 0008  939          move.l    8(A6),D2
                     940   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  941          cmp.b     #57,D2
00000BE0  6E08       942          bgt.s     xtod_1
                     943   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       944          move.b    D2,D0
00000BE4  0400 0030  945          sub.b     #48,D0
00000BE8  6014       946          bra.s     xtod_3
                     947   xtod_1:
                     948   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  949          cmp.b     #70,D2
00000BEE  6F08       950          ble.s     xtod_4
                     951   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       952          move.b    D2,D0
00000BF2  0400 0057  953          sub.b     #87,D0
00000BF6  6006       954          bra.s     xtod_3
                     955   xtod_4:
                     956   ; else
                     957   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       958          move.b    D2,D0
00000BFA  0400 0037  959          sub.b     #55,D0
                     960   xtod_3:
00000BFE  241F       961          move.l    (A7)+,D2
00000C00  4E5E       962          unlk      A6
00000C02  4E75       963          rts
                     964   ; }
                     965   ; int Get1HexDigits(char *CheckSumPtr)
                     966   ; {
                     967   _Get1HexDigits:
00000C04  4E56 0000  968          link      A6,#0
00000C08  2F02       969          move.l    D2,-(A7)
                     970   ; register int i = xtod(_getch());
00000C0A  2F00       971          move.l    D0,-(A7)
00000C0C  4EB8 0B68  972          jsr       __getch
00000C10  2200       973          move.l    D0,D1
00000C12  201F       974          move.l    (A7)+,D0
00000C14  2F01       975          move.l    D1,-(A7)
00000C16  4EB8 0BD2  976          jsr       _xtod
00000C1A  584F       977          addq.w    #4,A7
00000C1C  C0BC 0000  978          and.l     #255,D0
00000C20  00FF      
00000C22  2400       979          move.l    D0,D2
                     980   ; if(CheckSumPtr)
00000C24  4AAE 0008  981          tst.l     8(A6)
00000C28  6706       982          beq.s     Get1HexDigits_1
                     983   ; *CheckSumPtr += i ;
00000C2A  206E 0008  984          move.l    8(A6),A0
00000C2E  D510       985          add.b     D2,(A0)
                     986   Get1HexDigits_1:
                     987   ; return i; 
00000C30  2002       988          move.l    D2,D0
00000C32  241F       989          move.l    (A7)+,D2
00000C34  4E5E       990          unlk      A6
00000C36  4E75       991          rts
                     992   ; }
                     993   ; int Get2HexDigits(char *CheckSumPtr)
                     994   ; {
                     995   _Get2HexDigits:
00000C38  4E56 0000  996          link      A6,#0
00000C3C  2F02       997          move.l    D2,-(A7)
                     998   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C3E  2F00       999          move.l    D0,-(A7)
00000C40  4EB8 0B68 1000          jsr       __getch
00000C44  2200      1001          move.l    D0,D1
00000C46  201F      1002          move.l    (A7)+,D0
00000C48  2F01      1003          move.l    D1,-(A7)
00000C4A  4EB8 0BD2 1004          jsr       _xtod
00000C4E  584F      1005          addq.w    #4,A7
00000C50  C0BC 0000 1006          and.l     #255,D0
00000C54  00FF      
00000C56  E980      1007          asl.l     #4,D0
00000C58  2F00      1008          move.l    D0,-(A7)
00000C5A  2F01      1009          move.l    D1,-(A7)
00000C5C  4EB8 0B68 1010          jsr       __getch
00000C60  221F      1011          move.l    (A7)+,D1
00000C62  2F00      1012          move.l    D0,-(A7)
00000C64  4EB8 0BD2 1013          jsr       _xtod
00000C68  584F      1014          addq.w    #4,A7
00000C6A  2200      1015          move.l    D0,D1
00000C6C  201F      1016          move.l    (A7)+,D0
00000C6E  C2BC 0000 1017          and.l     #255,D1
00000C72  00FF      
00000C74  8081      1018          or.l      D1,D0
00000C76  2400      1019          move.l    D0,D2
                    1020   ; if(CheckSumPtr)
00000C78  4AAE 0008 1021          tst.l     8(A6)
00000C7C  6706      1022          beq.s     Get2HexDigits_1
                    1023   ; *CheckSumPtr += i ;
00000C7E  206E 0008 1024          move.l    8(A6),A0
00000C82  D510      1025          add.b     D2,(A0)
                    1026   Get2HexDigits_1:
                    1027   ; return i ;
00000C84  2002      1028          move.l    D2,D0
00000C86  241F      1029          move.l    (A7)+,D2
00000C88  4E5E      1030          unlk      A6
00000C8A  4E75      1031          rts
                    1032   ; }
                    1033   ; int Get4HexDigits(char *CheckSumPtr)
                    1034   ; {
                    1035   _Get4HexDigits:
00000C8C  4E56 0000 1036          link      A6,#0
                    1037   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C90  2F2E 0008 1038          move.l    8(A6),-(A7)
00000C94  4EB8 0C38 1039          jsr       _Get2HexDigits
00000C98  584F      1040          addq.w    #4,A7
00000C9A  E180      1041          asl.l     #8,D0
00000C9C  2F00      1042          move.l    D0,-(A7)
00000C9E  2F2E 0008 1043          move.l    8(A6),-(A7)
00000CA2  4EB8 0C38 1044          jsr       _Get2HexDigits
00000CA6  584F      1045          addq.w    #4,A7
00000CA8  2200      1046          move.l    D0,D1
00000CAA  201F      1047          move.l    (A7)+,D0
00000CAC  8081      1048          or.l      D1,D0
00000CAE  4E5E      1049          unlk      A6
00000CB0  4E75      1050          rts
                    1051   ; }
                    1052   ; int Get6HexDigits(char *CheckSumPtr)
                    1053   ; {
                    1054   _Get6HexDigits:
00000CB2  4E56 0000 1055          link      A6,#0
                    1056   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CB6  2F2E 0008 1057          move.l    8(A6),-(A7)
00000CBA  4EB8 0C8C 1058          jsr       _Get4HexDigits
00000CBE  584F      1059          addq.w    #4,A7
00000CC0  E180      1060          asl.l     #8,D0
00000CC2  2F00      1061          move.l    D0,-(A7)
00000CC4  2F2E 0008 1062          move.l    8(A6),-(A7)
00000CC8  4EB8 0C38 1063          jsr       _Get2HexDigits
00000CCC  584F      1064          addq.w    #4,A7
00000CCE  2200      1065          move.l    D0,D1
00000CD0  201F      1066          move.l    (A7)+,D0
00000CD2  8081      1067          or.l      D1,D0
00000CD4  4E5E      1068          unlk      A6
00000CD6  4E75      1069          rts
                    1070   ; }
                    1071   ; int Get8HexDigits(char *CheckSumPtr)
                    1072   ; {
                    1073   _Get8HexDigits:
00000CD8  4E56 0000 1074          link      A6,#0
                    1075   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CDC  2F2E 0008 1076          move.l    8(A6),-(A7)
00000CE0  4EB8 0C8C 1077          jsr       _Get4HexDigits
00000CE4  584F      1078          addq.w    #4,A7
00000CE6  E180      1079          asl.l     #8,D0
00000CE8  E180      1080          asl.l     #8,D0
00000CEA  2F00      1081          move.l    D0,-(A7)
00000CEC  2F2E 0008 1082          move.l    8(A6),-(A7)
00000CF0  4EB8 0C8C 1083          jsr       _Get4HexDigits
00000CF4  584F      1084          addq.w    #4,A7
00000CF6  2200      1085          move.l    D0,D1
00000CF8  201F      1086          move.l    (A7)+,D0
00000CFA  8081      1087          or.l      D1,D0
00000CFC  4E5E      1088          unlk      A6
00000CFE  4E75      1089          rts
                    1090   ; }
                    1091   ; void DumpMemory(void)   // simple dump memory fn
                    1092   ; {
                    1093   _DumpMemory:
00000D00  48E7 3C30 1094          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000D04  45F9 0000 1095          lea       _printf.L,A2
00000D08  322C      
00000D0A  47F9 0000 1096          lea       _putch.L,A3
00000D0E  311E      
                    1097   ; int i, j ;
                    1098   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1099   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000D10  4879 0000 1100          pea       @m68kde~1_5.L
00000D14  3AFA      
00000D16  4E92      1101          jsr       (A2)
00000D18  584F      1102          addq.w    #4,A7
                    1103   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1104          pea       @m68kde~1_6.L
00000D1E  3B34      
00000D20  4E92      1105          jsr       (A2)
00000D22  584F      1106          addq.w    #4,A7
                    1107   ; RamPtr = Get8HexDigits(0) ;
00000D24  42A7      1108          clr.l     -(A7)
00000D26  4EB8 0CD8 1109          jsr       _Get8HexDigits
00000D2A  584F      1110          addq.w    #4,A7
00000D2C  2600      1111          move.l    D0,D3
                    1112   ; while(1)    {
                    1113   DumpMemory_1:
                    1114   ; for(i = 0; i < 16; i ++)    {
00000D2E  4285      1115          clr.l     D5
                    1116   DumpMemory_4:
00000D30  0C85 0000 1117          cmp.l     #16,D5
00000D34  0010      
00000D36  6C00 0096 1118          bge       DumpMemory_6
                    1119   ; printf("\r\n%08x ", RamPtr) ;
00000D3A  2F03      1120          move.l    D3,-(A7)
00000D3C  4879 0000 1121          pea       @m68kde~1_7.L
00000D40  3B4C      
00000D42  4E92      1122          jsr       (A2)
00000D44  504F      1123          addq.w    #8,A7
                    1124   ; for(j=0; j < 16; j ++)  {
00000D46  4282      1125          clr.l     D2
                    1126   DumpMemory_7:
00000D48  0C82 0000 1127          cmp.l     #16,D2
00000D4C  0010      
00000D4E  6C24      1128          bge.s     DumpMemory_9
                    1129   ; printf("%02X",RamPtr[j]) ;
00000D50  2043      1130          move.l    D3,A0
00000D52  1230 2800 1131          move.b    0(A0,D2.L),D1
00000D56  C2BC 0000 1132          and.l     #255,D1
00000D5A  00FF      
00000D5C  2F01      1133          move.l    D1,-(A7)
00000D5E  4879 0000 1134          pea       @m68kde~1_8.L
00000D62  3B54      
00000D64  4E92      1135          jsr       (A2)
00000D66  504F      1136          addq.w    #8,A7
                    1137   ; putchar(' ') ;
00000D68  4878 0020 1138          pea       32
00000D6C  4E93      1139          jsr       (A3)
00000D6E  584F      1140          addq.w    #4,A7
00000D70  5282      1141          addq.l    #1,D2
00000D72  60D4      1142          bra       DumpMemory_7
                    1143   DumpMemory_9:
                    1144   ; }
                    1145   ; // now display the data as ASCII at the end
                    1146   ; printf("  ") ;
00000D74  4879 0000 1147          pea       @m68kde~1_9.L
00000D78  3B5A      
00000D7A  4E92      1148          jsr       (A2)
00000D7C  584F      1149          addq.w    #4,A7
                    1150   ; for(j = 0; j < 16; j++) {
00000D7E  4282      1151          clr.l     D2
                    1152   DumpMemory_10:
00000D80  0C82 0000 1153          cmp.l     #16,D2
00000D84  0010      
00000D86  6C00 003A 1154          bge       DumpMemory_12
                    1155   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D8A  2043      1156          move.l    D3,A0
00000D8C  1030 2800 1157          move.b    0(A0,D2.L),D0
00000D90  C03C 007F 1158          and.b     #127,D0
00000D94  1800      1159          move.b    D0,D4
                    1160   ; if((c > (char)(0x7f)) || (c < ' '))
00000D96  0C04 007F 1161          cmp.b     #127,D4
00000D9A  6206      1162          bhi.s     DumpMemory_15
00000D9C  0C04 0020 1163          cmp.b     #32,D4
00000DA0  640A      1164          bhs.s     DumpMemory_13
                    1165   DumpMemory_15:
                    1166   ; putchar('.') ;
00000DA2  4878 002E 1167          pea       46
00000DA6  4E93      1168          jsr       (A3)
00000DA8  584F      1169          addq.w    #4,A7
00000DAA  6012      1170          bra.s     DumpMemory_14
                    1171   DumpMemory_13:
                    1172   ; else
                    1173   ; putchar(RamPtr[j]) ;
00000DAC  2043      1174          move.l    D3,A0
00000DAE  1230 2800 1175          move.b    0(A0,D2.L),D1
00000DB2  C2BC 0000 1176          and.l     #255,D1
00000DB6  00FF      
00000DB8  2F01      1177          move.l    D1,-(A7)
00000DBA  4E93      1178          jsr       (A3)
00000DBC  584F      1179          addq.w    #4,A7
                    1180   DumpMemory_14:
00000DBE  5282      1181          addq.l    #1,D2
00000DC0  60BE      1182          bra       DumpMemory_10
                    1183   DumpMemory_12:
                    1184   ; }
                    1185   ; RamPtr = RamPtr + 16 ;
00000DC2  0683 0000 1186          add.l     #16,D3
00000DC6  0010      
00000DC8  5285      1187          addq.l    #1,D5
00000DCA  6000 FF64 1188          bra       DumpMemory_4
                    1189   DumpMemory_6:
                    1190   ; }
                    1191   ; printf("\r\n") ;
00000DCE  4879 0000 1192          pea       @m68kde~1_1.L
00000DD2  3ADC      
00000DD4  4E92      1193          jsr       (A2)
00000DD6  584F      1194          addq.w    #4,A7
                    1195   ; c = _getch() ;
00000DD8  4EB8 0B68 1196          jsr       __getch
00000DDC  1800      1197          move.b    D0,D4
                    1198   ; if(c == 0x1b)          // break on ESC
00000DDE  0C04 001B 1199          cmp.b     #27,D4
00000DE2  6602      1200          bne.s     DumpMemory_16
                    1201   ; break ;
00000DE4  6004      1202          bra.s     DumpMemory_3
                    1203   DumpMemory_16:
00000DE6  6000 FF46 1204          bra       DumpMemory_1
                    1205   DumpMemory_3:
00000DEA  4CDF 0C3C 1206          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DEE  4E75      1207          rts
                    1208   ; }
                    1209   ; }
                    1210   ; void FillMemory()
                    1211   ; {
                    1212   _FillMemory:
00000DF0  48E7 3820 1213          movem.l   D2/D3/D4/A2,-(A7)
00000DF4  45F9 0000 1214          lea       _printf.L,A2
00000DF8  322C      
                    1215   ; char *StartRamPtr, *EndRamPtr ;
                    1216   ; unsigned char FillData ;
                    1217   ; printf("\r\nFill Memory Block") ;
00000DFA  4879 0000 1218          pea       @m68kde~1_10.L
00000DFE  3B5E      
00000E00  4E92      1219          jsr       (A2)
00000E02  584F      1220          addq.w    #4,A7
                    1221   ; printf("\r\nEnter Start Address: ") ;
00000E04  4879 0000 1222          pea       @m68kde~1_6.L
00000E08  3B34      
00000E0A  4E92      1223          jsr       (A2)
00000E0C  584F      1224          addq.w    #4,A7
                    1225   ; StartRamPtr = Get8HexDigits(0) ;
00000E0E  42A7      1226          clr.l     -(A7)
00000E10  4EB8 0CD8 1227          jsr       _Get8HexDigits
00000E14  584F      1228          addq.w    #4,A7
00000E16  2400      1229          move.l    D0,D2
                    1230   ; printf("\r\nEnter End Address: ") ;
00000E18  4879 0000 1231          pea       @m68kde~1_11.L
00000E1C  3B72      
00000E1E  4E92      1232          jsr       (A2)
00000E20  584F      1233          addq.w    #4,A7
                    1234   ; EndRamPtr = Get8HexDigits(0) ;
00000E22  42A7      1235          clr.l     -(A7)
00000E24  4EB8 0CD8 1236          jsr       _Get8HexDigits
00000E28  584F      1237          addq.w    #4,A7
00000E2A  2800      1238          move.l    D0,D4
                    1239   ; printf("\r\nEnter Fill Data: ") ;
00000E2C  4879 0000 1240          pea       @m68kde~1_12.L
00000E30  3B88      
00000E32  4E92      1241          jsr       (A2)
00000E34  584F      1242          addq.w    #4,A7
                    1243   ; FillData = Get2HexDigits(0) ;
00000E36  42A7      1244          clr.l     -(A7)
00000E38  4EB8 0C38 1245          jsr       _Get2HexDigits
00000E3C  584F      1246          addq.w    #4,A7
00000E3E  1600      1247          move.b    D0,D3
                    1248   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E40  C6BC 0000 1249          and.l     #255,D3
00000E44  00FF      
00000E46  2F03      1250          move.l    D3,-(A7)
00000E48  2F04      1251          move.l    D4,-(A7)
00000E4A  2F02      1252          move.l    D2,-(A7)
00000E4C  4879 0000 1253          pea       @m68kde~1_13.L
00000E50  3B9C      
00000E52  4E92      1254          jsr       (A2)
00000E54  DEFC 0010 1255          add.w     #16,A7
                    1256   ; while(StartRamPtr < EndRamPtr)
                    1257   FillMemory_1:
00000E58  B484      1258          cmp.l     D4,D2
00000E5A  6408      1259          bhs.s     FillMemory_3
                    1260   ; *StartRamPtr++ = FillData ;
00000E5C  2042      1261          move.l    D2,A0
00000E5E  5282      1262          addq.l    #1,D2
00000E60  1083      1263          move.b    D3,(A0)
00000E62  60F4      1264          bra       FillMemory_1
                    1265   FillMemory_3:
00000E64  4CDF 041C 1266          movem.l   (A7)+,D2/D3/D4/A2
00000E68  4E75      1267          rts
                    1268   ; }
                    1269   ; void Load_SRecordFile()
                    1270   ; {
                    1271   _Load_SRecordFile:
00000E6A  4E56 FFDC 1272          link      A6,#-36
00000E6E  48E7 3F3C 1273          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E72  45EE FFFA 1274          lea       -6(A6),A2
00000E76  47F8 0C38 1275          lea       _Get2HexDigits.L,A3
00000E7A  49F9 0000 1276          lea       _printf.L,A4
00000E7E  322C      
                    1277   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E80  42AE FFEE 1278          clr.l     -18(A6)
00000E84  3A7C 0000 1279          move.w    #0,A5
                    1280   ; int result, ByteCount ;
                    1281   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1282   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1283   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E88  7E00      1284          moveq     #0,D7
                    1285   ; AddressFail = 0 ;
00000E8A  42AE FFEA 1286          clr.l     -22(A6)
                    1287   ; Echo = 0 ;                              // don't echo S records during download
00000E8E  42B9 0B00 1288          clr.l     _Echo.L
00000E92  00E0      
                    1289   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E94  4879 0000 1290          pea       @m68kde~1_14.L
00000E98  3BCC      
00000E9A  4E94      1291          jsr       (A4)
00000E9C  584F      1292          addq.w    #4,A7
                    1293   ; while(1)    {
                    1294   Load_SRecordFile_1:
                    1295   ; CheckSum = 0 ;
00000E9E  4212      1296          clr.b     (A2)
                    1297   ; do {
                    1298   Load_SRecordFile_4:
                    1299   ; c = toupper(_getch()) ;
00000EA0  2F00      1300          move.l    D0,-(A7)
00000EA2  4EB8 0B68 1301          jsr       __getch
00000EA6  2200      1302          move.l    D0,D1
00000EA8  201F      1303          move.l    (A7)+,D0
00000EAA  2F01      1304          move.l    D1,-(A7)
00000EAC  4EB9 0000 1305          jsr       _toupper
00000EB0  3200      
00000EB2  584F      1306          addq.w    #4,A7
00000EB4  1C00      1307          move.b    D0,D6
                    1308   ; if(c == 0x1b )      // if break
00000EB6  0C06 001B 1309          cmp.b     #27,D6
00000EBA  6604      1310          bne.s     Load_SRecordFile_6
                    1311   ; return;
00000EBC  6000 0132 1312          bra       Load_SRecordFile_8
                    1313   Load_SRecordFile_6:
00000EC0  0C06 0053 1314          cmp.b     #83,D6
00000EC4  66DA      1315          bne       Load_SRecordFile_4
                    1316   ; }while(c != (char)('S'));   // wait for S start of header
                    1317   ; HeaderType = _getch() ;
00000EC6  4EB8 0B68 1318          jsr       __getch
00000ECA  1600      1319          move.b    D0,D3
                    1320   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000ECC  0C03 0030 1321          cmp.b     #48,D3
00000ED0  6706      1322          beq.s     Load_SRecordFile_11
00000ED2  0C03 0035 1323          cmp.b     #53,D3
00000ED6  6604      1324          bne.s     Load_SRecordFile_9
                    1325   Load_SRecordFile_11:
                    1326   ; continue ;
00000ED8  6000 00D2 1327          bra       Load_SRecordFile_23
                    1328   Load_SRecordFile_9:
                    1329   ; if(HeaderType >= (char)('7'))
00000EDC  0C03 0037 1330          cmp.b     #55,D3
00000EE0  6D04      1331          blt.s     Load_SRecordFile_12
                    1332   ; break ;                 // end load on s7,s8,s9 records
00000EE2  6000 00CC 1333          bra       Load_SRecordFile_3
                    1334   Load_SRecordFile_12:
                    1335   ; // get the bytecount
                    1336   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EE6  2F0A      1337          move.l    A2,-(A7)
00000EE8  4E93      1338          jsr       (A3)
00000EEA  584F      1339          addq.w    #4,A7
00000EEC  2D40 FFF6 1340          move.l    D0,-10(A6)
                    1341   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1342   ; if(HeaderType == (char)('1')) {
00000EF0  0C03 0031 1343          cmp.b     #49,D3
00000EF4  660E      1344          bne.s     Load_SRecordFile_14
                    1345   ; AddressSize = 2 ;       // 2 byte address
00000EF6  7A02      1346          moveq     #2,D5
                    1347   ; Address = Get4HexDigits(&CheckSum);
00000EF8  2F0A      1348          move.l    A2,-(A7)
00000EFA  4EB8 0C8C 1349          jsr       _Get4HexDigits
00000EFE  584F      1350          addq.w    #4,A7
00000F00  2800      1351          move.l    D0,D4
00000F02  6020      1352          bra.s     Load_SRecordFile_17
                    1353   Load_SRecordFile_14:
                    1354   ; }
                    1355   ; else if (HeaderType == (char)('2')) {
00000F04  0C03 0032 1356          cmp.b     #50,D3
00000F08  660E      1357          bne.s     Load_SRecordFile_16
                    1358   ; AddressSize = 3 ;       // 3 byte address
00000F0A  7A03      1359          moveq     #3,D5
                    1360   ; Address = Get6HexDigits(&CheckSum) ;
00000F0C  2F0A      1361          move.l    A2,-(A7)
00000F0E  4EB8 0CB2 1362          jsr       _Get6HexDigits
00000F12  584F      1363          addq.w    #4,A7
00000F14  2800      1364          move.l    D0,D4
00000F16  600C      1365          bra.s     Load_SRecordFile_17
                    1366   Load_SRecordFile_16:
                    1367   ; }
                    1368   ; else    {
                    1369   ; AddressSize = 4 ;       // 4 byte address
00000F18  7A04      1370          moveq     #4,D5
                    1371   ; Address = Get8HexDigits(&CheckSum) ;
00000F1A  2F0A      1372          move.l    A2,-(A7)
00000F1C  4EB8 0CD8 1373          jsr       _Get8HexDigits
00000F20  584F      1374          addq.w    #4,A7
00000F22  2800      1375          move.l    D0,D4
                    1376   Load_SRecordFile_17:
                    1377   ; }
                    1378   ; RamPtr = (char *)(Address) ;                            // point to download area
00000F24  2D44 FFFC 1379          move.l    D4,-4(A6)
                    1380   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000F28  202E FFF6 1381          move.l    -10(A6),D0
00000F2C  9085      1382          sub.l     D5,D0
00000F2E  5380      1383          subq.l    #1,D0
00000F30  2D40 FFE2 1384          move.l    D0,-30(A6)
                    1385   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F34  4282      1386          clr.l     D2
                    1387   Load_SRecordFile_18:
00000F36  B4AE FFE2 1388          cmp.l     -30(A6),D2
00000F3A  6C1E      1389          bge.s     Load_SRecordFile_20
                    1390   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F3C  2F0A      1391          move.l    A2,-(A7)
00000F3E  4E93      1392          jsr       (A3)
00000F40  584F      1393          addq.w    #4,A7
00000F42  2D40 FFDE 1394          move.l    D0,-34(A6)
                    1395   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F46  202E FFDE 1396          move.l    -34(A6),D0
00000F4A  206E FFFC 1397          move.l    -4(A6),A0
00000F4E  52AE FFFC 1398          addq.l    #1,-4(A6)
00000F52  1080      1399          move.b    D0,(A0)
                    1400   ; ByteTotal++;
00000F54  524D      1401          addq.w    #1,A5
00000F56  5282      1402          addq.l    #1,D2
00000F58  60DC      1403          bra       Load_SRecordFile_18
                    1404   Load_SRecordFile_20:
                    1405   ; }
                    1406   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1407   ; ReadCheckSum = Get2HexDigits(0) ;
00000F5A  42A7      1408          clr.l     -(A7)
00000F5C  4E93      1409          jsr       (A3)
00000F5E  584F      1410          addq.w    #4,A7
00000F60  1D40 FFFB 1411          move.b    D0,-5(A6)
                    1412   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F64  1012      1413          move.b    (A2),D0
00000F66  4600      1414          not.b     D0
00000F68  4880      1415          ext.w     D0
00000F6A  C07C 00FF 1416          and.w     #255,D0
00000F6E  122E FFFB 1417          move.b    -5(A6),D1
00000F72  4881      1418          ext.w     D1
00000F74  C27C 00FF 1419          and.w     #255,D1
00000F78  B041      1420          cmp.w     D1,D0
00000F7A  6708      1421          beq.s     Load_SRecordFile_21
                    1422   ; LoadFailed = 1 ;
00000F7C  7E01      1423          moveq     #1,D7
                    1424   ; FailedAddress = Address ;
00000F7E  2D44 FFE6 1425          move.l    D4,-26(A6)
                    1426   ; break;
00000F82  602C      1427          bra.s     Load_SRecordFile_3
                    1428   Load_SRecordFile_21:
                    1429   ; }
                    1430   ; SRecordCount++ ;
00000F84  52AE FFEE 1431          addq.l    #1,-18(A6)
                    1432   ; // display feedback on progress
                    1433   ; if(SRecordCount % 25 == 0)
00000F88  2F2E FFEE 1434          move.l    -18(A6),-(A7)
00000F8C  4878 0019 1435          pea       25
00000F90  4EB9 0000 1436          jsr       LDIV
00000F94  2FB2      
00000F96  202F 0004 1437          move.l    4(A7),D0
00000F9A  504F      1438          addq.w    #8,A7
00000F9C  4A80      1439          tst.l     D0
00000F9E  660C      1440          bne.s     Load_SRecordFile_23
                    1441   ; putchar('.') ;
00000FA0  4878 002E 1442          pea       46
00000FA4  4EB9 0000 1443          jsr       _putch
00000FA8  311E      
00000FAA  584F      1444          addq.w    #4,A7
                    1445   Load_SRecordFile_23:
00000FAC  6000 FEF0 1446          bra       Load_SRecordFile_1
                    1447   Load_SRecordFile_3:
                    1448   ; }
                    1449   ; if(LoadFailed == 1) {
00000FB0  0C87 0000 1450          cmp.l     #1,D7
00000FB4  0001      
00000FB6  6610      1451          bne.s     Load_SRecordFile_25
                    1452   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000FB8  2F2E FFE6 1453          move.l    -26(A6),-(A7)
00000FBC  4879 0000 1454          pea       @m68kde~1_15.L
00000FC0  3BFC      
00000FC2  4E94      1455          jsr       (A4)
00000FC4  504F      1456          addq.w    #8,A7
00000FC6  600C      1457          bra.s     Load_SRecordFile_26
                    1458   Load_SRecordFile_25:
                    1459   ; }
                    1460   ; else
                    1461   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000FC8  2F0D      1462          move.l    A5,-(A7)
00000FCA  4879 0000 1463          pea       @m68kde~1_16.L
00000FCE  3C22      
00000FD0  4E94      1464          jsr       (A4)
00000FD2  504F      1465          addq.w    #8,A7
                    1466   Load_SRecordFile_26:
                    1467   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1468   ; for(i = 0; i < 400000; i ++)
00000FD4  4282      1469          clr.l     D2
                    1470   Load_SRecordFile_27:
00000FD6  0C82 0006 1471          cmp.l     #400000,D2
00000FDA  1A80      
00000FDC  6C04      1472          bge.s     Load_SRecordFile_29
00000FDE  5282      1473          addq.l    #1,D2
00000FE0  60F4      1474          bra       Load_SRecordFile_27
                    1475   Load_SRecordFile_29:
                    1476   ; ;
                    1477   ; FlushKeyboard() ;
00000FE2  4EB8 0BA6 1478          jsr       _FlushKeyboard
                    1479   ; Echo = 1;
00000FE6  23FC 0000 1480          move.l    #1,_Echo.L
00000FEA  0001 0B00 
00000FEE  00E0      
                    1481   Load_SRecordFile_8:
00000FF0  4CDF 3CFC 1482          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FF4  4E5E      1483          unlk      A6
00000FF6  4E75      1484          rts
                    1485   ; }
                    1486   ; void MemoryChange(void)
                    1487   ; {
                    1488   _MemoryChange:
00000FF8  48E7 3820 1489          movem.l   D2/D3/D4/A2,-(A7)
00000FFC  45F9 0000 1490          lea       _printf.L,A2
00001000  322C      
                    1491   ; unsigned char *RamPtr,c ; // pointer to memory
                    1492   ; int Data ;
                    1493   ; printf("\r\nExamine and Change Memory") ;
00001002  4879 0000 1494          pea       @m68kde~1_17.L
00001006  3C44      
00001008  4E92      1495          jsr       (A2)
0000100A  584F      1496          addq.w    #4,A7
                    1497   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
0000100C  4879 0000 1498          pea       @m68kde~1_18.L
00001010  3C60      
00001012  4E92      1499          jsr       (A2)
00001014  584F      1500          addq.w    #4,A7
                    1501   ; printf("\r\nEnter Address: ") ;
00001016  4879 0000 1502          pea       @m68kde~1_19.L
0000101A  3CA6      
0000101C  4E92      1503          jsr       (A2)
0000101E  584F      1504          addq.w    #4,A7
                    1505   ; RamPtr = Get8HexDigits(0) ;
00001020  42A7      1506          clr.l     -(A7)
00001022  4EB8 0CD8 1507          jsr       _Get8HexDigits
00001026  584F      1508          addq.w    #4,A7
00001028  2600      1509          move.l    D0,D3
                    1510   ; while(1)    {
                    1511   MemoryChange_1:
                    1512   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000102A  2043      1513          move.l    D3,A0
0000102C  1210      1514          move.b    (A0),D1
0000102E  C2BC 0000 1515          and.l     #255,D1
00001032  00FF      
00001034  2F01      1516          move.l    D1,-(A7)
00001036  2F03      1517          move.l    D3,-(A7)
00001038  4879 0000 1518          pea       @m68kde~1_20.L
0000103C  3CB8      
0000103E  4E92      1519          jsr       (A2)
00001040  DEFC 000C 1520          add.w     #12,A7
                    1521   ; c = tolower(_getch()) ;
00001044  2F00      1522          move.l    D0,-(A7)
00001046  4EB8 0B68 1523          jsr       __getch
0000104A  2200      1524          move.l    D0,D1
0000104C  201F      1525          move.l    (A7)+,D0
0000104E  2F01      1526          move.l    D1,-(A7)
00001050  4EB9 0000 1527          jsr       _tolower
00001054  318A      
00001056  584F      1528          addq.w    #4,A7
00001058  1400      1529          move.b    D0,D2
                    1530   ; if(c == (char)(0x1b))
0000105A  0C02 001B 1531          cmp.b     #27,D2
0000105E  6604      1532          bne.s     MemoryChange_4
                    1533   ; return ;                                // abort on escape
00001060  6000 0090 1534          bra       MemoryChange_6
                    1535   MemoryChange_4:
                    1536   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001064  0C02 0030 1537          cmp.b     #48,D2
00001068  6506      1538          blo.s     MemoryChange_10
0000106A  0C02 0039 1539          cmp.b     #57,D2
0000106E  6310      1540          bls.s     MemoryChange_9
                    1541   MemoryChange_10:
00001070  0C02 0061 1542          cmp.b     #97,D2
00001074  6500 006E 1543          blo       MemoryChange_7
00001078  0C02 0066 1544          cmp.b     #102,D2
0000107C  6200 0066 1545          bhi       MemoryChange_7
                    1546   MemoryChange_9:
                    1547   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001080  C4BC 0000 1548          and.l     #255,D2
00001084  00FF      
00001086  2F02      1549          move.l    D2,-(A7)
00001088  4EB8 0BD2 1550          jsr       _xtod
0000108C  584F      1551          addq.w    #4,A7
0000108E  C0BC 0000 1552          and.l     #255,D0
00001092  00FF      
00001094  E980      1553          asl.l     #4,D0
00001096  2F00      1554          move.l    D0,-(A7)
00001098  2F01      1555          move.l    D1,-(A7)
0000109A  4EB8 0B68 1556          jsr       __getch
0000109E  221F      1557          move.l    (A7)+,D1
000010A0  2F00      1558          move.l    D0,-(A7)
000010A2  4EB8 0BD2 1559          jsr       _xtod
000010A6  584F      1560          addq.w    #4,A7
000010A8  2200      1561          move.l    D0,D1
000010AA  201F      1562          move.l    (A7)+,D0
000010AC  C2BC 0000 1563          and.l     #255,D1
000010B0  00FF      
000010B2  8081      1564          or.l      D1,D0
000010B4  2800      1565          move.l    D0,D4
                    1566   ; *RamPtr = (char)(Data) ;
000010B6  2043      1567          move.l    D3,A0
000010B8  1084      1568          move.b    D4,(A0)
                    1569   ; if(*RamPtr != Data) {
000010BA  2043      1570          move.l    D3,A0
000010BC  1010      1571          move.b    (A0),D0
000010BE  C0BC 0000 1572          and.l     #255,D0
000010C2  00FF      
000010C4  B084      1573          cmp.l     D4,D0
000010C6  671A      1574          beq.s     MemoryChange_11
                    1575   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000010C8  2043      1576          move.l    D3,A0
000010CA  1210      1577          move.b    (A0),D1
000010CC  C2BC 0000 1578          and.l     #255,D1
000010D0  00FF      
000010D2  2F01      1579          move.l    D1,-(A7)
000010D4  2F04      1580          move.l    D4,-(A7)
000010D6  4879 0000 1581          pea       @m68kde~1_21.L
000010DA  3CCA      
000010DC  4E92      1582          jsr       (A2)
000010DE  DEFC 000C 1583          add.w     #12,A7
                    1584   MemoryChange_11:
000010E2  6008      1585          bra.s     MemoryChange_13
                    1586   MemoryChange_7:
                    1587   ; }
                    1588   ; }
                    1589   ; else if(c == (char)('-'))
000010E4  0C02 002D 1590          cmp.b     #45,D2
000010E8  6602      1591          bne.s     MemoryChange_13
                    1592   ; RamPtr -= 2 ; ;
000010EA  5583      1593          subq.l    #2,D3
                    1594   MemoryChange_13:
                    1595   ; RamPtr ++ ;
000010EC  5283      1596          addq.l    #1,D3
000010EE  6000 FF3A 1597          bra       MemoryChange_1
                    1598   MemoryChange_6:
000010F2  4CDF 041C 1599          movem.l   (A7)+,D2/D3/D4/A2
000010F6  4E75      1600          rts
                    1601   ; }
                    1602   ; }
                    1603   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1604   ; // IMPORTANT
                    1605   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1606   ; // has to be done with an interrupt (IRQ Level 6)
                    1607   ; //
                    1608   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1609   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1610   ; //
                    1611   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1612   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1613   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1614   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1615   ; // program area
                    1616   ; //
                    1617   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1618   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1619   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1620   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1621   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1622   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1623   ; void DumpRegisters()
                    1624   ; {
                    1625   _DumpRegisters:
000010F8  48E7 3F3C 1626          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010FC  45F9 0000 1627          lea       _putch.L,A2
00001100  311E      
00001102  47F9 0000 1628          lea       _printf.L,A3
00001106  322C      
00001108  49F9 0B00 1629          lea       _SR.L,A4
0000110C  012C      
0000110E  4BF9 0B00 1630          lea       _WatchPointString.L,A5
00001112  01C2      
                    1631   ; short i, x, j, k ;
                    1632   ; unsigned char c, *BytePointer;
                    1633   ; // buld up strings for displaying watchpoints
                    1634   ; for(x = 0; x < (short)(8); x++)
00001114  4242      1635          clr.w     D2
                    1636   DumpRegisters_1:
00001116  0C42 0008 1637          cmp.w     #8,D2
0000111A  6C00 01C6 1638          bge       DumpRegisters_3
                    1639   ; {
                    1640   ; if(WatchPointSetOrCleared[x] == 1)
0000111E  48C2      1641          ext.l     D2
00001120  2002      1642          move.l    D2,D0
00001122  E588      1643          lsl.l     #2,D0
00001124  41F9 0B00 1644          lea       _WatchPointSetOrCleared.L,A0
00001128  01A2      
0000112A  2030 0800 1645          move.l    0(A0,D0.L),D0
0000112E  0C80 0000 1646          cmp.l     #1,D0
00001132  0001      
00001134  6600 0186 1647          bne       DumpRegisters_4
                    1648   ; {
                    1649   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001138  48C2      1650          ext.l     D2
0000113A  2202      1651          move.l    D2,D1
0000113C  E589      1652          lsl.l     #2,D1
0000113E  41F9 0B00 1653          lea       _WatchPointAddress.L,A0
00001142  0182      
00001144  2F30 1800 1654          move.l    0(A0,D1.L),-(A7)
00001148  4879 0000 1655          pea       @m68kde~1_22.L
0000114C  3CFE      
0000114E  220D      1656          move.l    A5,D1
00001150  48C2      1657          ext.l     D2
00001152  2F00      1658          move.l    D0,-(A7)
00001154  2002      1659          move.l    D2,D0
00001156  C1FC 0064 1660          muls      #100,D0
0000115A  D280      1661          add.l     D0,D1
0000115C  201F      1662          move.l    (A7)+,D0
0000115E  2F01      1663          move.l    D1,-(A7)
00001160  4EB9 0000 1664          jsr       _sprintf
00001164  31B6      
00001166  DEFC 000C 1665          add.w     #12,A7
                    1666   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000116A  48C2      1667          ext.l     D2
0000116C  2002      1668          move.l    D2,D0
0000116E  E588      1669          lsl.l     #2,D0
00001170  41F9 0B00 1670          lea       _WatchPointAddress.L,A0
00001174  0182      
00001176  2A30 0800 1671          move.l    0(A0,D0.L),D5
                    1672   ; for(j = 0; j < (short)(16); j+=2)
0000117A  4243      1673          clr.w     D3
                    1674   DumpRegisters_6:
0000117C  0C43 0010 1675          cmp.w     #16,D3
00001180  6C00 0082 1676          bge       DumpRegisters_8
                    1677   ; {
                    1678   ; for(k = 0; k < (short)(2); k++)
00001184  4246      1679          clr.w     D6
                    1680   DumpRegisters_9:
00001186  0C46 0002 1681          cmp.w     #2,D6
0000118A  6C00 0052 1682          bge       DumpRegisters_11
                    1683   ; {
                    1684   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000118E  2045      1685          move.l    D5,A0
00001190  48C3      1686          ext.l     D3
00001192  2203      1687          move.l    D3,D1
00001194  48C6      1688          ext.l     D6
00001196  D286      1689          add.l     D6,D1
00001198  1230 1800 1690          move.b    0(A0,D1.L),D1
0000119C  C2BC 0000 1691          and.l     #255,D1
000011A0  00FF      
000011A2  2F01      1692          move.l    D1,-(A7)
000011A4  4879 0000 1693          pea       @m68kde~1_8.L
000011A8  3B54      
000011AA  4879 0B00 1694          pea       _TempString.L
000011AE  04E2      
000011B0  4EB9 0000 1695          jsr       _sprintf
000011B4  31B6      
000011B6  DEFC 000C 1696          add.w     #12,A7
                    1697   ; strcat(WatchPointString[x], TempString) ;
000011BA  4879 0B00 1698          pea       _TempString.L
000011BE  04E2      
000011C0  220D      1699          move.l    A5,D1
000011C2  48C2      1700          ext.l     D2
000011C4  2F00      1701          move.l    D0,-(A7)
000011C6  2002      1702          move.l    D2,D0
000011C8  C1FC 0064 1703          muls      #100,D0
000011CC  D280      1704          add.l     D0,D1
000011CE  201F      1705          move.l    (A7)+,D0
000011D0  2F01      1706          move.l    D1,-(A7)
000011D2  4EB9 0000 1707          jsr       _strcat
000011D6  31EA      
000011D8  504F      1708          addq.w    #8,A7
000011DA  5246      1709          addq.w    #1,D6
000011DC  60A8      1710          bra       DumpRegisters_9
                    1711   DumpRegisters_11:
                    1712   ; }
                    1713   ; strcat(WatchPointString[x]," ") ;
000011DE  4879 0000 1714          pea       @m68kde~1_23.L
000011E2  3D06      
000011E4  220D      1715          move.l    A5,D1
000011E6  48C2      1716          ext.l     D2
000011E8  2F00      1717          move.l    D0,-(A7)
000011EA  2002      1718          move.l    D2,D0
000011EC  C1FC 0064 1719          muls      #100,D0
000011F0  D280      1720          add.l     D0,D1
000011F2  201F      1721          move.l    (A7)+,D0
000011F4  2F01      1722          move.l    D1,-(A7)
000011F6  4EB9 0000 1723          jsr       _strcat
000011FA  31EA      
000011FC  504F      1724          addq.w    #8,A7
000011FE  5443      1725          addq.w    #2,D3
00001200  6000 FF7A 1726          bra       DumpRegisters_6
                    1727   DumpRegisters_8:
                    1728   ; }
                    1729   ; strcat(WatchPointString[x], "  ") ;
00001204  4879 0000 1730          pea       @m68kde~1_9.L
00001208  3B5A      
0000120A  220D      1731          move.l    A5,D1
0000120C  48C2      1732          ext.l     D2
0000120E  2F00      1733          move.l    D0,-(A7)
00001210  2002      1734          move.l    D2,D0
00001212  C1FC 0064 1735          muls      #100,D0
00001216  D280      1736          add.l     D0,D1
00001218  201F      1737          move.l    (A7)+,D0
0000121A  2F01      1738          move.l    D1,-(A7)
0000121C  4EB9 0000 1739          jsr       _strcat
00001220  31EA      
00001222  504F      1740          addq.w    #8,A7
                    1741   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001224  48C2      1742          ext.l     D2
00001226  2002      1743          move.l    D2,D0
00001228  E588      1744          lsl.l     #2,D0
0000122A  41F9 0B00 1745          lea       _WatchPointAddress.L,A0
0000122E  0182      
00001230  2A30 0800 1746          move.l    0(A0,D0.L),D5
                    1747   ; for(j = 0; j < (short)(16); j++)
00001234  4243      1748          clr.w     D3
                    1749   DumpRegisters_12:
00001236  0C43 0010 1750          cmp.w     #16,D3
0000123A  6C00 007E 1751          bge       DumpRegisters_14
                    1752   ; {
                    1753   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000123E  2045      1754          move.l    D5,A0
00001240  48C3      1755          ext.l     D3
00001242  1030 3800 1756          move.b    0(A0,D3.L),D0
00001246  C03C 007F 1757          and.b     #127,D0
0000124A  1E00      1758          move.b    D0,D7
                    1759   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000124C  0C07 007F 1760          cmp.b     #127,D7
00001250  6206      1761          bhi.s     DumpRegisters_17
00001252  0C07 0020 1762          cmp.b     #32,D7
00001256  6416      1763          bhs.s     DumpRegisters_15
                    1764   DumpRegisters_17:
                    1765   ; sprintf(TempString, ".") ;
00001258  4879 0000 1766          pea       @m68kde~1_24.L
0000125C  3D08      
0000125E  4879 0B00 1767          pea       _TempString.L
00001262  04E2      
00001264  4EB9 0000 1768          jsr       _sprintf
00001268  31B6      
0000126A  504F      1769          addq.w    #8,A7
0000126C  6026      1770          bra.s     DumpRegisters_16
                    1771   DumpRegisters_15:
                    1772   ; else
                    1773   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000126E  2045      1774          move.l    D5,A0
00001270  48C3      1775          ext.l     D3
00001272  1230 3800 1776          move.b    0(A0,D3.L),D1
00001276  C2BC 0000 1777          and.l     #255,D1
0000127A  00FF      
0000127C  2F01      1778          move.l    D1,-(A7)
0000127E  4879 0000 1779          pea       @m68kde~1_25.L
00001282  3D0A      
00001284  4879 0B00 1780          pea       _TempString.L
00001288  04E2      
0000128A  4EB9 0000 1781          jsr       _sprintf
0000128E  31B6      
00001290  DEFC 000C 1782          add.w     #12,A7
                    1783   DumpRegisters_16:
                    1784   ; strcat(WatchPointString[x], TempString) ;
00001294  4879 0B00 1785          pea       _TempString.L
00001298  04E2      
0000129A  220D      1786          move.l    A5,D1
0000129C  48C2      1787          ext.l     D2
0000129E  2F00      1788          move.l    D0,-(A7)
000012A0  2002      1789          move.l    D2,D0
000012A2  C1FC 0064 1790          muls      #100,D0
000012A6  D280      1791          add.l     D0,D1
000012A8  201F      1792          move.l    (A7)+,D0
000012AA  2F01      1793          move.l    D1,-(A7)
000012AC  4EB9 0000 1794          jsr       _strcat
000012B0  31EA      
000012B2  504F      1795          addq.w    #8,A7
000012B4  5243      1796          addq.w    #1,D3
000012B6  6000 FF7E 1797          bra       DumpRegisters_12
                    1798   DumpRegisters_14:
000012BA  6020      1799          bra.s     DumpRegisters_5
                    1800   DumpRegisters_4:
                    1801   ; }
                    1802   ; }
                    1803   ; else
                    1804   ; strcpy(WatchPointString[x], "") ;
000012BC  4879 0000 1805          pea       @m68kde~1_26.L
000012C0  3D0E      
000012C2  220D      1806          move.l    A5,D1
000012C4  48C2      1807          ext.l     D2
000012C6  2F00      1808          move.l    D0,-(A7)
000012C8  2002      1809          move.l    D2,D0
000012CA  C1FC 0064 1810          muls      #100,D0
000012CE  D280      1811          add.l     D0,D1
000012D0  201F      1812          move.l    (A7)+,D0
000012D2  2F01      1813          move.l    D1,-(A7)
000012D4  4EB9 0000 1814          jsr       _strcpy
000012D8  2F90      
000012DA  504F      1815          addq.w    #8,A7
                    1816   DumpRegisters_5:
000012DC  5242      1817          addq.w    #1,D2
000012DE  6000 FE36 1818          bra       DumpRegisters_1
                    1819   DumpRegisters_3:
                    1820   ; }
                    1821   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012E2  2F39 0B00 1822          move.l    _a0.L,-(A7)
000012E6  0104      
000012E8  2F39 0B00 1823          move.l    _d0.L,-(A7)
000012EC  00E4      
000012EE  4879 0000 1824          pea       @m68kde~1_27.L
000012F2  3D10      
000012F4  4E93      1825          jsr       (A3)
000012F6  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012FA  2F39 0B00 1828          move.l    _a1.L,-(A7)
000012FE  0108      
00001300  2F39 0B00 1829          move.l    _d1.L,-(A7)
00001304  00E8      
00001306  4879 0000 1830          pea       @m68kde~1_28.L
0000130A  3D2C      
0000130C  4E93      1831          jsr       (A3)
0000130E  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001312  2F39 0B00 1834          move.l    _a2.L,-(A7)
00001316  010C      
00001318  2F39 0B00 1835          move.l    _d2.L,-(A7)
0000131C  00EC      
0000131E  4879 0000 1836          pea       @m68kde~1_29.L
00001322  3D46      
00001324  4E93      1837          jsr       (A3)
00001326  DEFC 000C 1838          add.w     #12,A7
                    1839   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000132A  2F39 0B00 1840          move.l    _a3.L,-(A7)
0000132E  0110      
00001330  2F39 0B00 1841          move.l    _d3.L,-(A7)
00001334  00F0      
00001336  4879 0000 1842          pea       @m68kde~1_30.L
0000133A  3D60      
0000133C  4E93      1843          jsr       (A3)
0000133E  DEFC 000C 1844          add.w     #12,A7
                    1845   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001342  2F39 0B00 1846          move.l    _a4.L,-(A7)
00001346  0114      
00001348  2F39 0B00 1847          move.l    _d4.L,-(A7)
0000134C  00F4      
0000134E  4879 0000 1848          pea       @m68kde~1_31.L
00001352  3D7A      
00001354  4E93      1849          jsr       (A3)
00001356  DEFC 000C 1850          add.w     #12,A7
                    1851   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000135A  2F39 0B00 1852          move.l    _a5.L,-(A7)
0000135E  0118      
00001360  2F39 0B00 1853          move.l    _d5.L,-(A7)
00001364  00F8      
00001366  4879 0000 1854          pea       @m68kde~1_32.L
0000136A  3D94      
0000136C  4E93      1855          jsr       (A3)
0000136E  DEFC 000C 1856          add.w     #12,A7
                    1857   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001372  2F39 0B00 1858          move.l    _a6.L,-(A7)
00001376  011C      
00001378  2F39 0B00 1859          move.l    _d6.L,-(A7)
0000137C  00FC      
0000137E  4879 0000 1860          pea       @m68kde~1_33.L
00001382  3DAE      
00001384  4E93      1861          jsr       (A3)
00001386  DEFC 000C 1862          add.w     #12,A7
                    1863   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000138A  3214      1864          move.w    (A4),D1
0000138C  C27C 2000 1865          and.w     #8192,D1
00001390  0C41 2000 1866          cmp.w     #8192,D1
00001394  6608      1867          bne.s     DumpRegisters_18
00001396  2239 0B00 1868          move.l    _SSP.L,D1
0000139A  0124      
0000139C  6006      1869          bra.s     DumpRegisters_19
                    1870   DumpRegisters_18:
0000139E  2239 0B00 1871          move.l    _USP.L,D1
000013A2  0128      
                    1872   DumpRegisters_19:
000013A4  2F01      1873          move.l    D1,-(A7)
000013A6  2F39 0B00 1874          move.l    _d7.L,-(A7)
000013AA  0100      
000013AC  4879 0000 1875          pea       @m68kde~1_34.L
000013B0  3DC8      
000013B2  4E93      1876          jsr       (A3)
000013B4  DEFC 000C 1877          add.w     #12,A7
                    1878   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000013B8  2F39 0B00 1879          move.l    _USP.L,-(A7)
000013BC  0128      
000013BE  4879 0000 1880          pea       @m68kde~1_35.L
000013C2  3DE2      
000013C4  4E93      1881          jsr       (A3)
000013C6  504F      1882          addq.w    #8,A7
                    1883   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013C8  2F39 0B00 1884          move.l    _SSP.L,-(A7)
000013CC  0124      
000013CE  4879 0000 1885          pea       @m68kde~1_36.L
000013D2  3E00      
000013D4  4E93      1886          jsr       (A3)
000013D6  504F      1887          addq.w    #8,A7
                    1888   ; printf("\r\n SR = $%04X   ",SR) ;
000013D8  3214      1889          move.w    (A4),D1
000013DA  C2BC 0000 1890          and.l     #65535,D1
000013DE  FFFF      
000013E0  2F01      1891          move.l    D1,-(A7)
000013E2  4879 0000 1892          pea       @m68kde~1_37.L
000013E6  3E22      
000013E8  4E93      1893          jsr       (A3)
000013EA  504F      1894          addq.w    #8,A7
                    1895   ; // display the status word in characters etc.
                    1896   ; printf("   [") ;
000013EC  4879 0000 1897          pea       @m68kde~1_38.L
000013F0  3E34      
000013F2  4E93      1898          jsr       (A3)
000013F4  584F      1899          addq.w    #4,A7
                    1900   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013F6  3014      1901          move.w    (A4),D0
000013F8  C07C 8000 1902          and.w     #32768,D0
000013FC  0C40 8000 1903          cmp.w     #32768,D0
00001400  660A      1904          bne.s     DumpRegisters_20
00001402  4878 0054 1905          pea       84
00001406  4E92      1906          jsr       (A2)
00001408  584F      1907          addq.w    #4,A7
0000140A  6008      1908          bra.s     DumpRegisters_21
                    1909   DumpRegisters_20:
0000140C  4878 002D 1910          pea       45
00001410  4E92      1911          jsr       (A2)
00001412  584F      1912          addq.w    #4,A7
                    1913   DumpRegisters_21:
                    1914   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001414  3014      1915          move.w    (A4),D0
00001416  C07C 2000 1916          and.w     #8192,D0
0000141A  0C40 2000 1917          cmp.w     #8192,D0
0000141E  660A      1918          bne.s     DumpRegisters_22
00001420  4878 0053 1919          pea       83
00001424  4E92      1920          jsr       (A2)
00001426  584F      1921          addq.w    #4,A7
00001428  6008      1922          bra.s     DumpRegisters_23
                    1923   DumpRegisters_22:
0000142A  4878 0055 1924          pea       85
0000142E  4E92      1925          jsr       (A2)
00001430  584F      1926          addq.w    #4,A7
                    1927   DumpRegisters_23:
                    1928   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001432  3014      1929          move.w    (A4),D0
00001434  C07C 0400 1930          and.w     #1024,D0
00001438  0C40 0400 1931          cmp.w     #1024,D0
0000143C  660A      1932          bne.s     DumpRegisters_24
0000143E  4878 0031 1933          pea       49
00001442  4E92      1934          jsr       (A2)
00001444  584F      1935          addq.w    #4,A7
00001446  6008      1936          bra.s     DumpRegisters_25
                    1937   DumpRegisters_24:
00001448  4878 0030 1938          pea       48
0000144C  4E92      1939          jsr       (A2)
0000144E  584F      1940          addq.w    #4,A7
                    1941   DumpRegisters_25:
                    1942   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001450  3014      1943          move.w    (A4),D0
00001452  C07C 0200 1944          and.w     #512,D0
00001456  0C40 0200 1945          cmp.w     #512,D0
0000145A  660A      1946          bne.s     DumpRegisters_26
0000145C  4878 0031 1947          pea       49
00001460  4E92      1948          jsr       (A2)
00001462  584F      1949          addq.w    #4,A7
00001464  6008      1950          bra.s     DumpRegisters_27
                    1951   DumpRegisters_26:
00001466  4878 0030 1952          pea       48
0000146A  4E92      1953          jsr       (A2)
0000146C  584F      1954          addq.w    #4,A7
                    1955   DumpRegisters_27:
                    1956   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000146E  3014      1957          move.w    (A4),D0
00001470  C07C 0100 1958          and.w     #256,D0
00001474  0C40 0100 1959          cmp.w     #256,D0
00001478  660A      1960          bne.s     DumpRegisters_28
0000147A  4878 0031 1961          pea       49
0000147E  4E92      1962          jsr       (A2)
00001480  584F      1963          addq.w    #4,A7
00001482  6008      1964          bra.s     DumpRegisters_29
                    1965   DumpRegisters_28:
00001484  4878 0030 1966          pea       48
00001488  4E92      1967          jsr       (A2)
0000148A  584F      1968          addq.w    #4,A7
                    1969   DumpRegisters_29:
                    1970   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000148C  3014      1971          move.w    (A4),D0
0000148E  C07C 0010 1972          and.w     #16,D0
00001492  0C40 0010 1973          cmp.w     #16,D0
00001496  660A      1974          bne.s     DumpRegisters_30
00001498  4878 0058 1975          pea       88
0000149C  4E92      1976          jsr       (A2)
0000149E  584F      1977          addq.w    #4,A7
000014A0  6008      1978          bra.s     DumpRegisters_31
                    1979   DumpRegisters_30:
000014A2  4878 002D 1980          pea       45
000014A6  4E92      1981          jsr       (A2)
000014A8  584F      1982          addq.w    #4,A7
                    1983   DumpRegisters_31:
                    1984   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000014AA  3014      1985          move.w    (A4),D0
000014AC  C07C 0008 1986          and.w     #8,D0
000014B0  0C40 0008 1987          cmp.w     #8,D0
000014B4  660A      1988          bne.s     DumpRegisters_32
000014B6  4878 004E 1989          pea       78
000014BA  4E92      1990          jsr       (A2)
000014BC  584F      1991          addq.w    #4,A7
000014BE  6008      1992          bra.s     DumpRegisters_33
                    1993   DumpRegisters_32:
000014C0  4878 002D 1994          pea       45
000014C4  4E92      1995          jsr       (A2)
000014C6  584F      1996          addq.w    #4,A7
                    1997   DumpRegisters_33:
                    1998   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014C8  3014      1999          move.w    (A4),D0
000014CA  C07C 0004 2000          and.w     #4,D0
000014CE  0C40 0004 2001          cmp.w     #4,D0
000014D2  660A      2002          bne.s     DumpRegisters_34
000014D4  4878 005A 2003          pea       90
000014D8  4E92      2004          jsr       (A2)
000014DA  584F      2005          addq.w    #4,A7
000014DC  6008      2006          bra.s     DumpRegisters_35
                    2007   DumpRegisters_34:
000014DE  4878 002D 2008          pea       45
000014E2  4E92      2009          jsr       (A2)
000014E4  584F      2010          addq.w    #4,A7
                    2011   DumpRegisters_35:
                    2012   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014E6  3014      2013          move.w    (A4),D0
000014E8  C07C 0002 2014          and.w     #2,D0
000014EC  0C40 0002 2015          cmp.w     #2,D0
000014F0  660A      2016          bne.s     DumpRegisters_36
000014F2  4878 0056 2017          pea       86
000014F6  4E92      2018          jsr       (A2)
000014F8  584F      2019          addq.w    #4,A7
000014FA  6008      2020          bra.s     DumpRegisters_37
                    2021   DumpRegisters_36:
000014FC  4878 002D 2022          pea       45
00001500  4E92      2023          jsr       (A2)
00001502  584F      2024          addq.w    #4,A7
                    2025   DumpRegisters_37:
                    2026   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001504  3014      2027          move.w    (A4),D0
00001506  C07C 0001 2028          and.w     #1,D0
0000150A  0C40 0001 2029          cmp.w     #1,D0
0000150E  660A      2030          bne.s     DumpRegisters_38
00001510  4878 0043 2031          pea       67
00001514  4E92      2032          jsr       (A2)
00001516  584F      2033          addq.w    #4,A7
00001518  6008      2034          bra.s     DumpRegisters_39
                    2035   DumpRegisters_38:
0000151A  4878 002D 2036          pea       45
0000151E  4E92      2037          jsr       (A2)
00001520  584F      2038          addq.w    #4,A7
                    2039   DumpRegisters_39:
                    2040   ; putchar(']') ;
00001522  4878 005D 2041          pea       93
00001526  4E92      2042          jsr       (A2)
00001528  584F      2043          addq.w    #4,A7
                    2044   ; printf("\r\n PC = $%08X  ", PC) ;
0000152A  2F39 0B00 2045          move.l    _PC.L,-(A7)
0000152E  0120      
00001530  4879 0000 2046          pea       @m68kde~1_39.L
00001534  3E3A      
00001536  4E93      2047          jsr       (A3)
00001538  504F      2048          addq.w    #8,A7
                    2049   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000153A  2039 0B00 2050          move.l    _PC.L,D0
0000153E  0120      
00001540  2040      2051          move.l    D0,A0
00001542  3010      2052          move.w    (A0),D0
00001544  0C40 4E4E 2053          cmp.w     #20046,D0
00001548  660A      2054          bne.s     DumpRegisters_40
                    2055   ; printf("[@ BREAKPOINT]") ;
0000154A  4879 0000 2056          pea       @m68kde~1_40.L
0000154E  3E4A      
00001550  4E93      2057          jsr       (A3)
00001552  584F      2058          addq.w    #4,A7
                    2059   DumpRegisters_40:
                    2060   ; printf("\r\n") ;
00001554  4879 0000 2061          pea       @m68kde~1_1.L
00001558  3ADC      
0000155A  4E93      2062          jsr       (A3)
0000155C  584F      2063          addq.w    #4,A7
                    2064   ; for(i=0; i < 8; i++)    {
0000155E  4244      2065          clr.w     D4
                    2066   DumpRegisters_42:
00001560  0C44 0008 2067          cmp.w     #8,D4
00001564  6C00 0040 2068          bge       DumpRegisters_44
                    2069   ; if(WatchPointSetOrCleared[i] == 1)
00001568  48C4      2070          ext.l     D4
0000156A  2004      2071          move.l    D4,D0
0000156C  E588      2072          lsl.l     #2,D0
0000156E  41F9 0B00 2073          lea       _WatchPointSetOrCleared.L,A0
00001572  01A2      
00001574  2030 0800 2074          move.l    0(A0,D0.L),D0
00001578  0C80 0000 2075          cmp.l     #1,D0
0000157C  0001      
0000157E  6622      2076          bne.s     DumpRegisters_45
                    2077   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001580  220D      2078          move.l    A5,D1
00001582  48C4      2079          ext.l     D4
00001584  2F00      2080          move.l    D0,-(A7)
00001586  2004      2081          move.l    D4,D0
00001588  C1FC 0064 2082          muls      #100,D0
0000158C  D280      2083          add.l     D0,D1
0000158E  201F      2084          move.l    (A7)+,D0
00001590  2F01      2085          move.l    D1,-(A7)
00001592  48C4      2086          ext.l     D4
00001594  2F04      2087          move.l    D4,-(A7)
00001596  4879 0000 2088          pea       @m68kde~1_41.L
0000159A  3E5A      
0000159C  4E93      2089          jsr       (A3)
0000159E  DEFC 000C 2090          add.w     #12,A7
                    2091   DumpRegisters_45:
000015A2  5244      2092          addq.w    #1,D4
000015A4  60BA      2093          bra       DumpRegisters_42
                    2094   DumpRegisters_44:
000015A6  4CDF 3CFC 2095          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000015AA  4E75      2096          rts
                    2097   ; }
                    2098   ; }
                    2099   ; // Trace Exception Handler
                    2100   ; void DumpRegistersandPause(void)
                    2101   ; {
                    2102   _DumpRegistersandPause:
000015AC  2F0A      2103          move.l    A2,-(A7)
000015AE  45F9 0000 2104          lea       _printf.L,A2
000015B2  322C      
                    2105   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000015B4  4879 0000 2106          pea       @m68kde~1_42.L
000015B8  3E66      
000015BA  4E92      2107          jsr       (A2)
000015BC  584F      2108          addq.w    #4,A7
                    2109   ; printf("\r\nBreak Points :[Disabled]") ;
000015BE  4879 0000 2110          pea       @m68kde~1_43.L
000015C2  3E86      
000015C4  4E92      2111          jsr       (A2)
000015C6  584F      2112          addq.w    #4,A7
                    2113   ; DumpRegisters() ;
000015C8  4EB8 10F8 2114          jsr       _DumpRegisters
                    2115   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015CC  4879 0000 2116          pea       @m68kde~1_44.L
000015D0  3EA2      
000015D2  4E92      2117          jsr       (A2)
000015D4  584F      2118          addq.w    #4,A7
                    2119   ; printf("\r\nPress <ESC> to Resume Program") ;
000015D6  4879 0000 2120          pea       @m68kde~1_45.L
000015DA  3ECE      
000015DC  4E92      2121          jsr       (A2)
000015DE  584F      2122          addq.w    #4,A7
                    2123   ; menu() ;
000015E0  4EB9 0000 2124          jsr       _menu
000015E4  20F4      
000015E6  245F      2125          move.l    (A7)+,A2
000015E8  4E75      2126          rts
                    2127   ; }
                    2128   ; void ChangeRegisters(void)
                    2129   ; {
                    2130   _ChangeRegisters:
000015EA  4E56 FFFC 2131          link      A6,#-4
000015EE  48E7 303C 2132          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015F2  45F9 0000 2133          lea       _printf.L,A2
000015F6  322C      
000015F8  47EE FFFC 2134          lea       -4(A6),A3
000015FC  49F8 0CD8 2135          lea       _Get8HexDigits.L,A4
00001600  4BF8 0B68 2136          lea       __getch.L,A5
                    2137   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2138   ; int reg_val ;
                    2139   ; char c, reg[3] ;
                    2140   ; reg[0] = tolower(_getch()) ;
00001604  2F00      2141          move.l    D0,-(A7)
00001606  4E95      2142          jsr       (A5)
00001608  2200      2143          move.l    D0,D1
0000160A  201F      2144          move.l    (A7)+,D0
0000160C  2F01      2145          move.l    D1,-(A7)
0000160E  4EB9 0000 2146          jsr       _tolower
00001612  318A      
00001614  584F      2147          addq.w    #4,A7
00001616  1680      2148          move.b    D0,(A3)
                    2149   ; reg[1] = c = tolower(_getch()) ;
00001618  2F00      2150          move.l    D0,-(A7)
0000161A  4E95      2151          jsr       (A5)
0000161C  2200      2152          move.l    D0,D1
0000161E  201F      2153          move.l    (A7)+,D0
00001620  2F01      2154          move.l    D1,-(A7)
00001622  4EB9 0000 2155          jsr       _tolower
00001626  318A      
00001628  584F      2156          addq.w    #4,A7
0000162A  1400      2157          move.b    D0,D2
0000162C  1740 0001 2158          move.b    D0,1(A3)
                    2159   ; if(reg[0] == (char)('d'))  {    // change data register
00001630  1013      2160          move.b    (A3),D0
00001632  0C00 0064 2161          cmp.b     #100,D0
00001636  6600 00AE 2162          bne       ChangeRegisters_1
                    2163   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000163A  102B 0001 2164          move.b    1(A3),D0
0000163E  0C00 0037 2165          cmp.b     #55,D0
00001642  6E0A      2166          bgt.s     ChangeRegisters_5
00001644  102B 0001 2167          move.b    1(A3),D0
00001648  0C00 0030 2168          cmp.b     #48,D0
0000164C  6C0E      2169          bge.s     ChangeRegisters_3
                    2170   ChangeRegisters_5:
                    2171   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000164E  4879 0000 2172          pea       @m68kde~1_46.L
00001652  3EEE      
00001654  4E92      2173          jsr       (A2)
00001656  584F      2174          addq.w    #4,A7
                    2175   ; return ;
00001658  6000 0244 2176          bra       ChangeRegisters_6
                    2177   ChangeRegisters_3:
                    2178   ; }
                    2179   ; else {
                    2180   ; printf("\r\nD%c = ", c) ;
0000165C  4882      2181          ext.w     D2
0000165E  48C2      2182          ext.l     D2
00001660  2F02      2183          move.l    D2,-(A7)
00001662  4879 0000 2184          pea       @m68kde~1_47.L
00001666  3F1A      
00001668  4E92      2185          jsr       (A2)
0000166A  504F      2186          addq.w    #8,A7
                    2187   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000166C  42A7      2188          clr.l     -(A7)
0000166E  4E94      2189          jsr       (A4)
00001670  584F      2190          addq.w    #4,A7
00001672  2600      2191          move.l    D0,D3
                    2192   ; }
                    2193   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2194   ; if(c == (char)('0'))
00001674  0C02 0030 2195          cmp.b     #48,D2
00001678  660A      2196          bne.s     ChangeRegisters_7
                    2197   ; d0 = reg_val ;
0000167A  23C3 0B00 2198          move.l    D3,_d0.L
0000167E  00E4      
00001680  6000 0060 2199          bra       ChangeRegisters_20
                    2200   ChangeRegisters_7:
                    2201   ; else if(c == (char)('1'))
00001684  0C02 0031 2202          cmp.b     #49,D2
00001688  660A      2203          bne.s     ChangeRegisters_9
                    2204   ; d1 = reg_val ;
0000168A  23C3 0B00 2205          move.l    D3,_d1.L
0000168E  00E8      
00001690  6000 0050 2206          bra       ChangeRegisters_20
                    2207   ChangeRegisters_9:
                    2208   ; else if(c == (char)('2'))
00001694  0C02 0032 2209          cmp.b     #50,D2
00001698  660A      2210          bne.s     ChangeRegisters_11
                    2211   ; d2 = reg_val ;
0000169A  23C3 0B00 2212          move.l    D3,_d2.L
0000169E  00EC      
000016A0  6000 0040 2213          bra       ChangeRegisters_20
                    2214   ChangeRegisters_11:
                    2215   ; else if(c == (char)('3'))
000016A4  0C02 0033 2216          cmp.b     #51,D2
000016A8  6608      2217          bne.s     ChangeRegisters_13
                    2218   ; d3 = reg_val ;
000016AA  23C3 0B00 2219          move.l    D3,_d3.L
000016AE  00F0      
000016B0  6030      2220          bra.s     ChangeRegisters_20
                    2221   ChangeRegisters_13:
                    2222   ; else if(c == (char)('4'))
000016B2  0C02 0034 2223          cmp.b     #52,D2
000016B6  6608      2224          bne.s     ChangeRegisters_15
                    2225   ; d4 = reg_val ;
000016B8  23C3 0B00 2226          move.l    D3,_d4.L
000016BC  00F4      
000016BE  6022      2227          bra.s     ChangeRegisters_20
                    2228   ChangeRegisters_15:
                    2229   ; else if(c == (char)('5'))
000016C0  0C02 0035 2230          cmp.b     #53,D2
000016C4  6608      2231          bne.s     ChangeRegisters_17
                    2232   ; d5 = reg_val ;
000016C6  23C3 0B00 2233          move.l    D3,_d5.L
000016CA  00F8      
000016CC  6014      2234          bra.s     ChangeRegisters_20
                    2235   ChangeRegisters_17:
                    2236   ; else if(c == (char)('6'))
000016CE  0C02 0036 2237          cmp.b     #54,D2
000016D2  6608      2238          bne.s     ChangeRegisters_19
                    2239   ; d6 = reg_val ;
000016D4  23C3 0B00 2240          move.l    D3,_d6.L
000016D8  00FC      
000016DA  6006      2241          bra.s     ChangeRegisters_20
                    2242   ChangeRegisters_19:
                    2243   ; else
                    2244   ; d7 = reg_val ;
000016DC  23C3 0B00 2245          move.l    D3,_d7.L
000016E0  0100      
                    2246   ChangeRegisters_20:
000016E2  6000 01B6 2247          bra       ChangeRegisters_51
                    2248   ChangeRegisters_1:
                    2249   ; }
                    2250   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016E6  1013      2251          move.b    (A3),D0
000016E8  0C00 0061 2252          cmp.b     #97,D0
000016EC  6600 00A6 2253          bne       ChangeRegisters_21
                    2254   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016F0  0C02 0037 2255          cmp.b     #55,D2
000016F4  6E06      2256          bgt.s     ChangeRegisters_25
000016F6  0C02 0030 2257          cmp.b     #48,D2
000016FA  6C0E      2258          bge.s     ChangeRegisters_23
                    2259   ChangeRegisters_25:
                    2260   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016FC  4879 0000 2261          pea       @m68kde~1_48.L
00001700  3F24      
00001702  4E92      2262          jsr       (A2)
00001704  584F      2263          addq.w    #4,A7
                    2264   ; return ;
00001706  6000 0196 2265          bra       ChangeRegisters_6
                    2266   ChangeRegisters_23:
                    2267   ; }
                    2268   ; else {
                    2269   ; printf("\r\nA%c = ", c) ;
0000170A  4882      2270          ext.w     D2
0000170C  48C2      2271          ext.l     D2
0000170E  2F02      2272          move.l    D2,-(A7)
00001710  4879 0000 2273          pea       @m68kde~1_49.L
00001714  3F52      
00001716  4E92      2274          jsr       (A2)
00001718  504F      2275          addq.w    #8,A7
                    2276   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000171A  42A7      2277          clr.l     -(A7)
0000171C  4E94      2278          jsr       (A4)
0000171E  584F      2279          addq.w    #4,A7
00001720  2600      2280          move.l    D0,D3
                    2281   ; }
                    2282   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2283   ; if(c == (char)('0'))
00001722  0C02 0030 2284          cmp.b     #48,D2
00001726  660A      2285          bne.s     ChangeRegisters_26
                    2286   ; a0 = reg_val ;
00001728  23C3 0B00 2287          move.l    D3,_a0.L
0000172C  0104      
0000172E  6000 0060 2288          bra       ChangeRegisters_39
                    2289   ChangeRegisters_26:
                    2290   ; else if(c == (char)('1'))
00001732  0C02 0031 2291          cmp.b     #49,D2
00001736  660A      2292          bne.s     ChangeRegisters_28
                    2293   ; a1 = reg_val ;
00001738  23C3 0B00 2294          move.l    D3,_a1.L
0000173C  0108      
0000173E  6000 0050 2295          bra       ChangeRegisters_39
                    2296   ChangeRegisters_28:
                    2297   ; else if(c == (char)('2'))
00001742  0C02 0032 2298          cmp.b     #50,D2
00001746  660A      2299          bne.s     ChangeRegisters_30
                    2300   ; a2 = reg_val ;
00001748  23C3 0B00 2301          move.l    D3,_a2.L
0000174C  010C      
0000174E  6000 0040 2302          bra       ChangeRegisters_39
                    2303   ChangeRegisters_30:
                    2304   ; else if(c == (char)('3'))
00001752  0C02 0033 2305          cmp.b     #51,D2
00001756  6608      2306          bne.s     ChangeRegisters_32
                    2307   ; a3 = reg_val ;
00001758  23C3 0B00 2308          move.l    D3,_a3.L
0000175C  0110      
0000175E  6030      2309          bra.s     ChangeRegisters_39
                    2310   ChangeRegisters_32:
                    2311   ; else if(c == (char)('4'))
00001760  0C02 0034 2312          cmp.b     #52,D2
00001764  6608      2313          bne.s     ChangeRegisters_34
                    2314   ; a4 = reg_val ;
00001766  23C3 0B00 2315          move.l    D3,_a4.L
0000176A  0114      
0000176C  6022      2316          bra.s     ChangeRegisters_39
                    2317   ChangeRegisters_34:
                    2318   ; else if(c == (char)('5'))
0000176E  0C02 0035 2319          cmp.b     #53,D2
00001772  6608      2320          bne.s     ChangeRegisters_36
                    2321   ; a5 = reg_val ;
00001774  23C3 0B00 2322          move.l    D3,_a5.L
00001778  0118      
0000177A  6014      2323          bra.s     ChangeRegisters_39
                    2324   ChangeRegisters_36:
                    2325   ; else if(c == (char)('6'))
0000177C  0C02 0036 2326          cmp.b     #54,D2
00001780  6608      2327          bne.s     ChangeRegisters_38
                    2328   ; a6 = reg_val ;
00001782  23C3 0B00 2329          move.l    D3,_a6.L
00001786  011C      
00001788  6006      2330          bra.s     ChangeRegisters_39
                    2331   ChangeRegisters_38:
                    2332   ; else
                    2333   ; USP = reg_val ;
0000178A  23C3 0B00 2334          move.l    D3,_USP.L
0000178E  0128      
                    2335   ChangeRegisters_39:
00001790  6000 0108 2336          bra       ChangeRegisters_51
                    2337   ChangeRegisters_21:
                    2338   ; }
                    2339   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001794  1013      2340          move.b    (A3),D0
00001796  0C00 0075 2341          cmp.b     #117,D0
0000179A  6600 004E 2342          bne       ChangeRegisters_40
0000179E  0C02 0073 2343          cmp.b     #115,D2
000017A2  6600 0046 2344          bne       ChangeRegisters_40
                    2345   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000017A6  2F00      2346          move.l    D0,-(A7)
000017A8  4E95      2347          jsr       (A5)
000017AA  2200      2348          move.l    D0,D1
000017AC  201F      2349          move.l    (A7)+,D0
000017AE  2F01      2350          move.l    D1,-(A7)
000017B0  4EB9 0000 2351          jsr       _tolower
000017B4  318A      
000017B6  584F      2352          addq.w    #4,A7
000017B8  0C80 0000 2353          cmp.l     #112,D0
000017BC  0070      
000017BE  6618      2354          bne.s     ChangeRegisters_42
                    2355   ; printf("\r\nUser SP = ") ;
000017C0  4879 0000 2356          pea       @m68kde~1_50.L
000017C4  3F5C      
000017C6  4E92      2357          jsr       (A2)
000017C8  584F      2358          addq.w    #4,A7
                    2359   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017CA  42A7      2360          clr.l     -(A7)
000017CC  4E94      2361          jsr       (A4)
000017CE  584F      2362          addq.w    #4,A7
000017D0  23C0 0B00 2363          move.l    D0,_USP.L
000017D4  0128      
000017D6  600E      2364          bra.s     ChangeRegisters_43
                    2365   ChangeRegisters_42:
                    2366   ; }
                    2367   ; else {
                    2368   ; printf("\r\nIllegal Register....") ;
000017D8  4879 0000 2369          pea       @m68kde~1_51.L
000017DC  3F6A      
000017DE  4E92      2370          jsr       (A2)
000017E0  584F      2371          addq.w    #4,A7
                    2372   ; return ;
000017E2  6000 00BA 2373          bra       ChangeRegisters_6
                    2374   ChangeRegisters_43:
000017E6  6000 00B2 2375          bra       ChangeRegisters_51
                    2376   ChangeRegisters_40:
                    2377   ; }
                    2378   ; }
                    2379   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017EA  1013      2380          move.b    (A3),D0
000017EC  0C00 0073 2381          cmp.b     #115,D0
000017F0  6600 004E 2382          bne       ChangeRegisters_44
000017F4  0C02 0073 2383          cmp.b     #115,D2
000017F8  6600 0046 2384          bne       ChangeRegisters_44
                    2385   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017FC  2F00      2386          move.l    D0,-(A7)
000017FE  4E95      2387          jsr       (A5)
00001800  2200      2388          move.l    D0,D1
00001802  201F      2389          move.l    (A7)+,D0
00001804  2F01      2390          move.l    D1,-(A7)
00001806  4EB9 0000 2391          jsr       _tolower
0000180A  318A      
0000180C  584F      2392          addq.w    #4,A7
0000180E  0C80 0000 2393          cmp.l     #112,D0
00001812  0070      
00001814  6618      2394          bne.s     ChangeRegisters_46
                    2395   ; printf("\r\nSystem SP = ") ;
00001816  4879 0000 2396          pea       @m68kde~1_52.L
0000181A  3F82      
0000181C  4E92      2397          jsr       (A2)
0000181E  584F      2398          addq.w    #4,A7
                    2399   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001820  42A7      2400          clr.l     -(A7)
00001822  4E94      2401          jsr       (A4)
00001824  584F      2402          addq.w    #4,A7
00001826  23C0 0B00 2403          move.l    D0,_SSP.L
0000182A  0124      
0000182C  600E      2404          bra.s     ChangeRegisters_47
                    2405   ChangeRegisters_46:
                    2406   ; }
                    2407   ; else {
                    2408   ; printf("\r\nIllegal Register....") ;
0000182E  4879 0000 2409          pea       @m68kde~1_51.L
00001832  3F6A      
00001834  4E92      2410          jsr       (A2)
00001836  584F      2411          addq.w    #4,A7
                    2412   ; return ;
00001838  6000 0064 2413          bra       ChangeRegisters_6
                    2414   ChangeRegisters_47:
0000183C  6000 005C 2415          bra       ChangeRegisters_51
                    2416   ChangeRegisters_44:
                    2417   ; }
                    2418   ; }
                    2419   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001840  1013      2420          move.b    (A3),D0
00001842  0C00 0070 2421          cmp.b     #112,D0
00001846  6620      2422          bne.s     ChangeRegisters_48
00001848  0C02 0063 2423          cmp.b     #99,D2
0000184C  661A      2424          bne.s     ChangeRegisters_48
                    2425   ; printf("\r\nPC = ") ;
0000184E  4879 0000 2426          pea       @m68kde~1_53.L
00001852  3F92      
00001854  4E92      2427          jsr       (A2)
00001856  584F      2428          addq.w    #4,A7
                    2429   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001858  42A7      2430          clr.l     -(A7)
0000185A  4E94      2431          jsr       (A4)
0000185C  584F      2432          addq.w    #4,A7
0000185E  23C0 0B00 2433          move.l    D0,_PC.L
00001862  0120      
00001864  6000 0034 2434          bra       ChangeRegisters_51
                    2435   ChangeRegisters_48:
                    2436   ; }
                    2437   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001868  1013      2438          move.b    (A3),D0
0000186A  0C00 0073 2439          cmp.b     #115,D0
0000186E  6620      2440          bne.s     ChangeRegisters_50
00001870  0C02 0072 2441          cmp.b     #114,D2
00001874  661A      2442          bne.s     ChangeRegisters_50
                    2443   ; printf("\r\nSR = ") ;
00001876  4879 0000 2444          pea       @m68kde~1_54.L
0000187A  3F9A      
0000187C  4E92      2445          jsr       (A2)
0000187E  584F      2446          addq.w    #4,A7
                    2447   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001880  42A7      2448          clr.l     -(A7)
00001882  4EB8 0C8C 2449          jsr       _Get4HexDigits
00001886  584F      2450          addq.w    #4,A7
00001888  33C0 0B00 2451          move.w    D0,_SR.L
0000188C  012C      
0000188E  600A      2452          bra.s     ChangeRegisters_51
                    2453   ChangeRegisters_50:
                    2454   ; }
                    2455   ; else
                    2456   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001890  4879 0000 2457          pea       @m68kde~1_55.L
00001894  3FA2      
00001896  4E92      2458          jsr       (A2)
00001898  584F      2459          addq.w    #4,A7
                    2460   ChangeRegisters_51:
                    2461   ; DumpRegisters() ;
0000189A  4EB8 10F8 2462          jsr       _DumpRegisters
                    2463   ChangeRegisters_6:
0000189E  4CDF 3C0C 2464          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000018A2  4E5E      2465          unlk      A6
000018A4  4E75      2466          rts
                    2467   ; }
                    2468   ; void BreakPointDisplay(void)
                    2469   ; {
                    2470   _BreakPointDisplay:
000018A6  48E7 3030 2471          movem.l   D2/D3/A2/A3,-(A7)
000018AA  45F9 0000 2472          lea       _printf.L,A2
000018AE  322C      
000018B0  47F9 0B00 2473          lea       _BreakPointAddress.L,A3
000018B4  012E      
                    2474   ; int i, BreakPointsSet = 0 ;
000018B6  4283      2475          clr.l     D3
                    2476   ; // any break points  set
                    2477   ; for(i = 0; i < 8; i++)  {
000018B8  4282      2478          clr.l     D2
                    2479   BreakPointDisplay_1:
000018BA  0C82 0000 2480          cmp.l     #8,D2
000018BE  0008      
000018C0  6C1C      2481          bge.s     BreakPointDisplay_3
                    2482   ; if(BreakPointSetOrCleared[i] == 1)
000018C2  2002      2483          move.l    D2,D0
000018C4  E588      2484          lsl.l     #2,D0
000018C6  41F9 0B00 2485          lea       _BreakPointSetOrCleared.L,A0
000018CA  015E      
000018CC  2030 0800 2486          move.l    0(A0,D0.L),D0
000018D0  0C80 0000 2487          cmp.l     #1,D0
000018D4  0001      
000018D6  6602      2488          bne.s     BreakPointDisplay_4
                    2489   ; BreakPointsSet = 1;
000018D8  7601      2490          moveq     #1,D3
                    2491   BreakPointDisplay_4:
000018DA  5282      2492          addq.l    #1,D2
000018DC  60DC      2493          bra       BreakPointDisplay_1
                    2494   BreakPointDisplay_3:
                    2495   ; }
                    2496   ; if(BreakPointsSet == 1) {
000018DE  0C83 0000 2497          cmp.l     #1,D3
000018E2  0001      
000018E4  6616      2498          bne.s     BreakPointDisplay_6
                    2499   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018E6  4879 0000 2500          pea       @m68kde~1_56.L
000018EA  3FDE      
000018EC  4E92      2501          jsr       (A2)
000018EE  584F      2502          addq.w    #4,A7
                    2503   ; printf("\r\n---     ---------    -----------") ;
000018F0  4879 0000 2504          pea       @m68kde~1_57.L
000018F4  4004      
000018F6  4E92      2505          jsr       (A2)
000018F8  584F      2506          addq.w    #4,A7
000018FA  600A      2507          bra.s     BreakPointDisplay_7
                    2508   BreakPointDisplay_6:
                    2509   ; }
                    2510   ; else
                    2511   ; printf("\r\nNo BreakPoints Set") ;
000018FC  4879 0000 2512          pea       @m68kde~1_58.L
00001900  4028      
00001902  4E92      2513          jsr       (A2)
00001904  584F      2514          addq.w    #4,A7
                    2515   BreakPointDisplay_7:
                    2516   ; for(i = 0; i < 8; i++)  {
00001906  4282      2517          clr.l     D2
                    2518   BreakPointDisplay_8:
00001908  0C82 0000 2519          cmp.l     #8,D2
0000190C  0008      
0000190E  6C00 005A 2520          bge       BreakPointDisplay_10
                    2521   ; // put opcode back, then put break point back
                    2522   ; if(BreakPointSetOrCleared[i] == 1)  {
00001912  2002      2523          move.l    D2,D0
00001914  E588      2524          lsl.l     #2,D0
00001916  41F9 0B00 2525          lea       _BreakPointSetOrCleared.L,A0
0000191A  015E      
0000191C  2030 0800 2526          move.l    0(A0,D0.L),D0
00001920  0C80 0000 2527          cmp.l     #1,D0
00001924  0001      
00001926  6600 003E 2528          bne       BreakPointDisplay_11
                    2529   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000192A  2002      2530          move.l    D2,D0
0000192C  E388      2531          lsl.l     #1,D0
0000192E  41F9 0B00 2532          lea       _BreakPointInstruction.L,A0
00001932  014E      
00001934  2202      2533          move.l    D2,D1
00001936  E589      2534          lsl.l     #2,D1
00001938  2233 1800 2535          move.l    0(A3,D1.L),D1
0000193C  2241      2536          move.l    D1,A1
0000193E  32B0 0800 2537          move.w    0(A0,D0.L),(A1)
                    2538   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001942  2002      2539          move.l    D2,D0
00001944  E588      2540          lsl.l     #2,D0
00001946  2033 0800 2541          move.l    0(A3,D0.L),D0
0000194A  2040      2542          move.l    D0,A0
0000194C  30BC 4E4E 2543          move.w    #20046,(A0)
                    2544   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001950  2202      2545          move.l    D2,D1
00001952  E589      2546          lsl.l     #2,D1
00001954  2F33 1800 2547          move.l    0(A3,D1.L),-(A7)
00001958  2F02      2548          move.l    D2,-(A7)
0000195A  4879 0000 2549          pea       @m68kde~1_59.L
0000195E  403E      
00001960  4E92      2550          jsr       (A2)
00001962  DEFC 000C 2551          add.w     #12,A7
                    2552   BreakPointDisplay_11:
00001966  5282      2553          addq.l    #1,D2
00001968  609E      2554          bra       BreakPointDisplay_8
                    2555   BreakPointDisplay_10:
                    2556   ; }
                    2557   ; }
                    2558   ; printf("\r\n") ;
0000196A  4879 0000 2559          pea       @m68kde~1_1.L
0000196E  3ADC      
00001970  4E92      2560          jsr       (A2)
00001972  584F      2561          addq.w    #4,A7
00001974  4CDF 0C0C 2562          movem.l   (A7)+,D2/D3/A2/A3
00001978  4E75      2563          rts
                    2564   ; }
                    2565   ; void WatchPointDisplay(void)
                    2566   ; {
                    2567   _WatchPointDisplay:
0000197A  48E7 3020 2568          movem.l   D2/D3/A2,-(A7)
0000197E  45F9 0000 2569          lea       _printf.L,A2
00001982  322C      
                    2570   ; int i ;
                    2571   ; int WatchPointsSet = 0 ;
00001984  4283      2572          clr.l     D3
                    2573   ; // any watchpoints set
                    2574   ; for(i = 0; i < 8; i++)  {
00001986  4282      2575          clr.l     D2
                    2576   WatchPointDisplay_1:
00001988  0C82 0000 2577          cmp.l     #8,D2
0000198C  0008      
0000198E  6C1C      2578          bge.s     WatchPointDisplay_3
                    2579   ; if(WatchPointSetOrCleared[i] == 1)
00001990  2002      2580          move.l    D2,D0
00001992  E588      2581          lsl.l     #2,D0
00001994  41F9 0B00 2582          lea       _WatchPointSetOrCleared.L,A0
00001998  01A2      
0000199A  2030 0800 2583          move.l    0(A0,D0.L),D0
0000199E  0C80 0000 2584          cmp.l     #1,D0
000019A2  0001      
000019A4  6602      2585          bne.s     WatchPointDisplay_4
                    2586   ; WatchPointsSet = 1;
000019A6  7601      2587          moveq     #1,D3
                    2588   WatchPointDisplay_4:
000019A8  5282      2589          addq.l    #1,D2
000019AA  60DC      2590          bra       WatchPointDisplay_1
                    2591   WatchPointDisplay_3:
                    2592   ; }
                    2593   ; if(WatchPointsSet == 1) {
000019AC  0C83 0000 2594          cmp.l     #1,D3
000019B0  0001      
000019B2  6616      2595          bne.s     WatchPointDisplay_6
                    2596   ; printf("\r\nNum     Address") ;
000019B4  4879 0000 2597          pea       @m68kde~1_60.L
000019B8  404E      
000019BA  4E92      2598          jsr       (A2)
000019BC  584F      2599          addq.w    #4,A7
                    2600   ; printf("\r\n---     ---------") ;
000019BE  4879 0000 2601          pea       @m68kde~1_61.L
000019C2  4060      
000019C4  4E92      2602          jsr       (A2)
000019C6  584F      2603          addq.w    #4,A7
000019C8  600A      2604          bra.s     WatchPointDisplay_7
                    2605   WatchPointDisplay_6:
                    2606   ; }
                    2607   ; else
                    2608   ; printf("\r\nNo WatchPoints Set") ;
000019CA  4879 0000 2609          pea       @m68kde~1_62.L
000019CE  4074      
000019D0  4E92      2610          jsr       (A2)
000019D2  584F      2611          addq.w    #4,A7
                    2612   WatchPointDisplay_7:
                    2613   ; for(i = 0; i < 8; i++)  {
000019D4  4282      2614          clr.l     D2
                    2615   WatchPointDisplay_8:
000019D6  0C82 0000 2616          cmp.l     #8,D2
000019DA  0008      
000019DC  6C00 0038 2617          bge       WatchPointDisplay_10
                    2618   ; if(WatchPointSetOrCleared[i] == 1)
000019E0  2002      2619          move.l    D2,D0
000019E2  E588      2620          lsl.l     #2,D0
000019E4  41F9 0B00 2621          lea       _WatchPointSetOrCleared.L,A0
000019E8  01A2      
000019EA  2030 0800 2622          move.l    0(A0,D0.L),D0
000019EE  0C80 0000 2623          cmp.l     #1,D0
000019F2  0001      
000019F4  661C      2624          bne.s     WatchPointDisplay_11
                    2625   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019F6  2202      2626          move.l    D2,D1
000019F8  E589      2627          lsl.l     #2,D1
000019FA  41F9 0B00 2628          lea       _WatchPointAddress.L,A0
000019FE  0182      
00001A00  2F30 1800 2629          move.l    0(A0,D1.L),-(A7)
00001A04  2F02      2630          move.l    D2,-(A7)
00001A06  4879 0000 2631          pea       @m68kde~1_59.L
00001A0A  403E      
00001A0C  4E92      2632          jsr       (A2)
00001A0E  DEFC 000C 2633          add.w     #12,A7
                    2634   WatchPointDisplay_11:
00001A12  5282      2635          addq.l    #1,D2
00001A14  60C0      2636          bra       WatchPointDisplay_8
                    2637   WatchPointDisplay_10:
                    2638   ; }
                    2639   ; printf("\r\n") ;
00001A16  4879 0000 2640          pea       @m68kde~1_1.L
00001A1A  3ADC      
00001A1C  4E92      2641          jsr       (A2)
00001A1E  584F      2642          addq.w    #4,A7
00001A20  4CDF 040C 2643          movem.l   (A7)+,D2/D3/A2
00001A24  4E75      2644          rts
                    2645   ; }
                    2646   ; void BreakPointClear(void)
                    2647   ; {
                    2648   _BreakPointClear:
00001A26  4E56 FFFC 2649          link      A6,#-4
00001A2A  48E7 2020 2650          movem.l   D2/A2,-(A7)
00001A2E  45F9 0000 2651          lea       _printf.L,A2
00001A32  322C      
                    2652   ; unsigned int i ;
                    2653   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2654   ; BreakPointDisplay() ;
00001A34  4EB8 18A6 2655          jsr       _BreakPointDisplay
                    2656   ; printf("\r\nEnter Break Point Number: ") ;
00001A38  4879 0000 2657          pea       @m68kde~1_63.L
00001A3C  408A      
00001A3E  4E92      2658          jsr       (A2)
00001A40  584F      2659          addq.w    #4,A7
                    2660   ; i = xtod(_getch()) ;           // get break pointer number
00001A42  2F00      2661          move.l    D0,-(A7)
00001A44  4EB8 0B68 2662          jsr       __getch
00001A48  2200      2663          move.l    D0,D1
00001A4A  201F      2664          move.l    (A7)+,D0
00001A4C  2F01      2665          move.l    D1,-(A7)
00001A4E  4EB8 0BD2 2666          jsr       _xtod
00001A52  584F      2667          addq.w    #4,A7
00001A54  C0BC 0000 2668          and.l     #255,D0
00001A58  00FF      
00001A5A  2400      2669          move.l    D0,D2
                    2670   ; if((i < 0) || (i > 7))   {
00001A5C  0C82 0000 2671          cmp.l     #0,D2
00001A60  0000      
00001A62  6508      2672          blo.s     BreakPointClear_3
00001A64  0C82 0000 2673          cmp.l     #7,D2
00001A68  0007      
00001A6A  630E      2674          bls.s     BreakPointClear_1
                    2675   BreakPointClear_3:
                    2676   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A6C  4879 0000 2677          pea       @m68kde~1_64.L
00001A70  40A8      
00001A72  4E92      2678          jsr       (A2)
00001A74  584F      2679          addq.w    #4,A7
                    2680   ; return ;
00001A76  6000 0080 2681          bra       BreakPointClear_4
                    2682   BreakPointClear_1:
                    2683   ; }
                    2684   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A7A  2002      2685          move.l    D2,D0
00001A7C  E588      2686          lsl.l     #2,D0
00001A7E  41F9 0B00 2687          lea       _BreakPointSetOrCleared.L,A0
00001A82  015E      
00001A84  2030 0800 2688          move.l    0(A0,D0.L),D0
00001A88  0C80 0000 2689          cmp.l     #1,D0
00001A8C  0001      
00001A8E  6600 005A 2690          bne       BreakPointClear_5
                    2691   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A92  2002      2692          move.l    D2,D0
00001A94  E588      2693          lsl.l     #2,D0
00001A96  41F9 0B00 2694          lea       _BreakPointAddress.L,A0
00001A9A  012E      
00001A9C  2D70 0800 2695          move.l    0(A0,D0.L),-4(A6)
00001AA0  FFFC      
                    2696   ; BreakPointAddress[i] = 0 ;
00001AA2  2002      2697          move.l    D2,D0
00001AA4  E588      2698          lsl.l     #2,D0
00001AA6  41F9 0B00 2699          lea       _BreakPointAddress.L,A0
00001AAA  012E      
00001AAC  42B0 0800 2700          clr.l     0(A0,D0.L)
                    2701   ; BreakPointSetOrCleared[i] = 0 ;
00001AB0  2002      2702          move.l    D2,D0
00001AB2  E588      2703          lsl.l     #2,D0
00001AB4  41F9 0B00 2704          lea       _BreakPointSetOrCleared.L,A0
00001AB8  015E      
00001ABA  42B0 0800 2705          clr.l     0(A0,D0.L)
                    2706   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001ABE  2002      2707          move.l    D2,D0
00001AC0  E388      2708          lsl.l     #1,D0
00001AC2  41F9 0B00 2709          lea       _BreakPointInstruction.L,A0
00001AC6  014E      
00001AC8  226E FFFC 2710          move.l    -4(A6),A1
00001ACC  32B0 0800 2711          move.w    0(A0,D0.L),(A1)
                    2712   ; BreakPointInstruction[i] = 0 ;
00001AD0  2002      2713          move.l    D2,D0
00001AD2  E388      2714          lsl.l     #1,D0
00001AD4  41F9 0B00 2715          lea       _BreakPointInstruction.L,A0
00001AD8  014E      
00001ADA  4270 0800 2716          clr.w     0(A0,D0.L)
                    2717   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ADE  4879 0000 2718          pea       @m68kde~1_65.L
00001AE2  40C4      
00001AE4  4E92      2719          jsr       (A2)
00001AE6  584F      2720          addq.w    #4,A7
00001AE8  600A      2721          bra.s     BreakPointClear_6
                    2722   BreakPointClear_5:
                    2723   ; }
                    2724   ; else
                    2725   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AEA  4879 0000 2726          pea       @m68kde~1_66.L
00001AEE  40E2      
00001AF0  4E92      2727          jsr       (A2)
00001AF2  584F      2728          addq.w    #4,A7
                    2729   BreakPointClear_6:
                    2730   ; BreakPointDisplay() ;
00001AF4  4EB8 18A6 2731          jsr       _BreakPointDisplay
                    2732   ; return ;
                    2733   BreakPointClear_4:
00001AF8  4CDF 0404 2734          movem.l   (A7)+,D2/A2
00001AFC  4E5E      2735          unlk      A6
00001AFE  4E75      2736          rts
                    2737   ; }
                    2738   ; void WatchPointClear(void)
                    2739   ; {
                    2740   _WatchPointClear:
00001B00  48E7 2020 2741          movem.l   D2/A2,-(A7)
00001B04  45F9 0000 2742          lea       _printf.L,A2
00001B08  322C      
                    2743   ; unsigned int i ;
                    2744   ; WatchPointDisplay() ;
00001B0A  4EB8 197A 2745          jsr       _WatchPointDisplay
                    2746   ; printf("\r\nEnter Watch Point Number: ") ;
00001B0E  4879 0000 2747          pea       @m68kde~1_67.L
00001B12  4100      
00001B14  4E92      2748          jsr       (A2)
00001B16  584F      2749          addq.w    #4,A7
                    2750   ; i = xtod(_getch()) ;           // get watch pointer number
00001B18  2F00      2751          move.l    D0,-(A7)
00001B1A  4EB8 0B68 2752          jsr       __getch
00001B1E  2200      2753          move.l    D0,D1
00001B20  201F      2754          move.l    (A7)+,D0
00001B22  2F01      2755          move.l    D1,-(A7)
00001B24  4EB8 0BD2 2756          jsr       _xtod
00001B28  584F      2757          addq.w    #4,A7
00001B2A  C0BC 0000 2758          and.l     #255,D0
00001B2E  00FF      
00001B30  2400      2759          move.l    D0,D2
                    2760   ; if((i < 0) || (i > 7))   {
00001B32  0C82 0000 2761          cmp.l     #0,D2
00001B36  0000      
00001B38  6508      2762          blo.s     WatchPointClear_3
00001B3A  0C82 0000 2763          cmp.l     #7,D2
00001B3E  0007      
00001B40  630E      2764          bls.s     WatchPointClear_1
                    2765   WatchPointClear_3:
                    2766   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B42  4879 0000 2767          pea       @m68kde~1_64.L
00001B46  40A8      
00001B48  4E92      2768          jsr       (A2)
00001B4A  584F      2769          addq.w    #4,A7
                    2770   ; return ;
00001B4C  6000 004E 2771          bra       WatchPointClear_4
                    2772   WatchPointClear_1:
                    2773   ; }
                    2774   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B50  2002      2775          move.l    D2,D0
00001B52  E588      2776          lsl.l     #2,D0
00001B54  41F9 0B00 2777          lea       _WatchPointSetOrCleared.L,A0
00001B58  01A2      
00001B5A  2030 0800 2778          move.l    0(A0,D0.L),D0
00001B5E  0C80 0000 2779          cmp.l     #1,D0
00001B62  0001      
00001B64  6628      2780          bne.s     WatchPointClear_5
                    2781   ; WatchPointAddress[i] = 0 ;
00001B66  2002      2782          move.l    D2,D0
00001B68  E588      2783          lsl.l     #2,D0
00001B6A  41F9 0B00 2784          lea       _WatchPointAddress.L,A0
00001B6E  0182      
00001B70  42B0 0800 2785          clr.l     0(A0,D0.L)
                    2786   ; WatchPointSetOrCleared[i] = 0 ;
00001B74  2002      2787          move.l    D2,D0
00001B76  E588      2788          lsl.l     #2,D0
00001B78  41F9 0B00 2789          lea       _WatchPointSetOrCleared.L,A0
00001B7C  01A2      
00001B7E  42B0 0800 2790          clr.l     0(A0,D0.L)
                    2791   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B82  4879 0000 2792          pea       @m68kde~1_68.L
00001B86  411E      
00001B88  4E92      2793          jsr       (A2)
00001B8A  584F      2794          addq.w    #4,A7
00001B8C  600A      2795          bra.s     WatchPointClear_6
                    2796   WatchPointClear_5:
                    2797   ; }
                    2798   ; else
                    2799   ; printf("\r\nWatch Point Was not Set.....") ;
00001B8E  4879 0000 2800          pea       @m68kde~1_69.L
00001B92  413C      
00001B94  4E92      2801          jsr       (A2)
00001B96  584F      2802          addq.w    #4,A7
                    2803   WatchPointClear_6:
                    2804   ; WatchPointDisplay() ;
00001B98  4EB8 197A 2805          jsr       _WatchPointDisplay
                    2806   ; return ;
                    2807   WatchPointClear_4:
00001B9C  4CDF 0404 2808          movem.l   (A7)+,D2/A2
00001BA0  4E75      2809          rts
                    2810   ; }
                    2811   ; void DisableBreakPoints(void)
                    2812   ; {
                    2813   _DisableBreakPoints:
00001BA2  4E56 FFFC 2814          link      A6,#-4
00001BA6  2F02      2815          move.l    D2,-(A7)
                    2816   ; int i ;
                    2817   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2818   ; for(i = 0; i < 8; i++)  {
00001BA8  4282      2819          clr.l     D2
                    2820   DisableBreakPoints_1:
00001BAA  0C82 0000 2821          cmp.l     #8,D2
00001BAE  0008      
00001BB0  6C00 003E 2822          bge       DisableBreakPoints_3
                    2823   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001BB4  2002      2824          move.l    D2,D0
00001BB6  E588      2825          lsl.l     #2,D0
00001BB8  41F9 0B00 2826          lea       _BreakPointSetOrCleared.L,A0
00001BBC  015E      
00001BBE  2030 0800 2827          move.l    0(A0,D0.L),D0
00001BC2  0C80 0000 2828          cmp.l     #1,D0
00001BC6  0001      
00001BC8  6622      2829          bne.s     DisableBreakPoints_4
                    2830   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BCA  2002      2831          move.l    D2,D0
00001BCC  E588      2832          lsl.l     #2,D0
00001BCE  41F9 0B00 2833          lea       _BreakPointAddress.L,A0
00001BD2  012E      
00001BD4  2D70 0800 2834          move.l    0(A0,D0.L),-4(A6)
00001BD8  FFFC      
                    2835   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BDA  2002      2836          move.l    D2,D0
00001BDC  E388      2837          lsl.l     #1,D0
00001BDE  41F9 0B00 2838          lea       _BreakPointInstruction.L,A0
00001BE2  014E      
00001BE4  226E FFFC 2839          move.l    -4(A6),A1
00001BE8  32B0 0800 2840          move.w    0(A0,D0.L),(A1)
                    2841   DisableBreakPoints_4:
00001BEC  5282      2842          addq.l    #1,D2
00001BEE  60BA      2843          bra       DisableBreakPoints_1
                    2844   DisableBreakPoints_3:
00001BF0  241F      2845          move.l    (A7)+,D2
00001BF2  4E5E      2846          unlk      A6
00001BF4  4E75      2847          rts
                    2848   ; }
                    2849   ; }
                    2850   ; }
                    2851   ; void EnableBreakPoints(void)
                    2852   ; {
                    2853   _EnableBreakPoints:
00001BF6  4E56 FFFC 2854          link      A6,#-4
00001BFA  2F02      2855          move.l    D2,-(A7)
                    2856   ; int i ;
                    2857   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2858   ; for(i = 0; i < 8; i++)  {
00001BFC  4282      2859          clr.l     D2
                    2860   EnableBreakPoints_1:
00001BFE  0C82 0000 2861          cmp.l     #8,D2
00001C02  0008      
00001C04  6C32      2862          bge.s     EnableBreakPoints_3
                    2863   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001C06  2002      2864          move.l    D2,D0
00001C08  E588      2865          lsl.l     #2,D0
00001C0A  41F9 0B00 2866          lea       _BreakPointSetOrCleared.L,A0
00001C0E  015E      
00001C10  2030 0800 2867          move.l    0(A0,D0.L),D0
00001C14  0C80 0000 2868          cmp.l     #1,D0
00001C18  0001      
00001C1A  6618      2869          bne.s     EnableBreakPoints_4
                    2870   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C1C  2002      2871          move.l    D2,D0
00001C1E  E588      2872          lsl.l     #2,D0
00001C20  41F9 0B00 2873          lea       _BreakPointAddress.L,A0
00001C24  012E      
00001C26  2D70 0800 2874          move.l    0(A0,D0.L),-4(A6)
00001C2A  FFFC      
                    2875   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C2C  206E FFFC 2876          move.l    -4(A6),A0
00001C30  30BC 4E4E 2877          move.w    #20046,(A0)
                    2878   EnableBreakPoints_4:
00001C34  5282      2879          addq.l    #1,D2
00001C36  60C6      2880          bra       EnableBreakPoints_1
                    2881   EnableBreakPoints_3:
00001C38  241F      2882          move.l    (A7)+,D2
00001C3A  4E5E      2883          unlk      A6
00001C3C  4E75      2884          rts
                    2885   ; }
                    2886   ; }
                    2887   ; }
                    2888   ; void KillAllBreakPoints(void)
                    2889   ; {
                    2890   _KillAllBreakPoints:
00001C3E  4E56 FFFC 2891          link      A6,#-4
00001C42  2F02      2892          move.l    D2,-(A7)
                    2893   ; int i ;
                    2894   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2895   ; for(i = 0; i < 8; i++)  {
00001C44  4282      2896          clr.l     D2
                    2897   KillAllBreakPoints_1:
00001C46  0C82 0000 2898          cmp.l     #8,D2
00001C4A  0008      
00001C4C  6C00 0052 2899          bge       KillAllBreakPoints_3
                    2900   ; // clear BP
                    2901   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C50  2002      2902          move.l    D2,D0
00001C52  E588      2903          lsl.l     #2,D0
00001C54  41F9 0B00 2904          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  2D70 0800 2905          move.l    0(A0,D0.L),-4(A6)
00001C5E  FFFC      
                    2906   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C60  2002      2907          move.l    D2,D0
00001C62  E388      2908          lsl.l     #1,D0
00001C64  41F9 0B00 2909          lea       _BreakPointInstruction.L,A0
00001C68  014E      
00001C6A  226E FFFC 2910          move.l    -4(A6),A1
00001C6E  32B0 0800 2911          move.w    0(A0,D0.L),(A1)
                    2912   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C72  2002      2913          move.l    D2,D0
00001C74  E588      2914          lsl.l     #2,D0
00001C76  41F9 0B00 2915          lea       _BreakPointAddress.L,A0
00001C7A  012E      
00001C7C  42B0 0800 2916          clr.l     0(A0,D0.L)
                    2917   ; BreakPointInstruction[i] = 0 ;
00001C80  2002      2918          move.l    D2,D0
00001C82  E388      2919          lsl.l     #1,D0
00001C84  41F9 0B00 2920          lea       _BreakPointInstruction.L,A0
00001C88  014E      
00001C8A  4270 0800 2921          clr.w     0(A0,D0.L)
                    2922   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C8E  2002      2923          move.l    D2,D0
00001C90  E588      2924          lsl.l     #2,D0
00001C92  41F9 0B00 2925          lea       _BreakPointSetOrCleared.L,A0
00001C96  015E      
00001C98  42B0 0800 2926          clr.l     0(A0,D0.L)
00001C9C  5282      2927          addq.l    #1,D2
00001C9E  60A6      2928          bra       KillAllBreakPoints_1
                    2929   KillAllBreakPoints_3:
00001CA0  241F      2930          move.l    (A7)+,D2
00001CA2  4E5E      2931          unlk      A6
00001CA4  4E75      2932          rts
                    2933   ; }
                    2934   ; //BreakPointDisplay() ;       // display the break points
                    2935   ; }
                    2936   ; void KillAllWatchPoints(void)
                    2937   ; {
                    2938   _KillAllWatchPoints:
00001CA6  2F02      2939          move.l    D2,-(A7)
                    2940   ; int i ;
                    2941   ; for(i = 0; i < 8; i++)  {
00001CA8  4282      2942          clr.l     D2
                    2943   KillAllWatchPoints_1:
00001CAA  0C82 0000 2944          cmp.l     #8,D2
00001CAE  0008      
00001CB0  6C20      2945          bge.s     KillAllWatchPoints_3
                    2946   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001CB2  2002      2947          move.l    D2,D0
00001CB4  E588      2948          lsl.l     #2,D0
00001CB6  41F9 0B00 2949          lea       _WatchPointAddress.L,A0
00001CBA  0182      
00001CBC  42B0 0800 2950          clr.l     0(A0,D0.L)
                    2951   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001CC0  2002      2952          move.l    D2,D0
00001CC2  E588      2953          lsl.l     #2,D0
00001CC4  41F9 0B00 2954          lea       _WatchPointSetOrCleared.L,A0
00001CC8  01A2      
00001CCA  42B0 0800 2955          clr.l     0(A0,D0.L)
00001CCE  5282      2956          addq.l    #1,D2
00001CD0  60D8      2957          bra       KillAllWatchPoints_1
                    2958   KillAllWatchPoints_3:
00001CD2  241F      2959          move.l    (A7)+,D2
00001CD4  4E75      2960          rts
                    2961   ; }
                    2962   ; //WatchPointDisplay() ;       // display the break points
                    2963   ; }
                    2964   ; void SetBreakPoint(void)
                    2965   ; {
                    2966   _SetBreakPoint:
00001CD6  4E56 FFFC 2967          link      A6,#-4
00001CDA  48E7 3830 2968          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CDE  45F9 0000 2969          lea       _printf.L,A2
00001CE2  322C      
00001CE4  47F9 0B00 2970          lea       _BreakPointSetOrCleared.L,A3
00001CE8  015E      
                    2971   ; int i ;
                    2972   ; int BPNumber;
                    2973   ; int BPAddress;
                    2974   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2975   ; // see if any free break points
                    2976   ; for(i = 0; i < 8; i ++) {
00001CEA  4282      2977          clr.l     D2
                    2978   SetBreakPoint_1:
00001CEC  0C82 0000 2979          cmp.l     #8,D2
00001CF0  0008      
00001CF2  6C10      2980          bge.s     SetBreakPoint_3
                    2981   ; if( BreakPointSetOrCleared[i] == 0)
00001CF4  2002      2982          move.l    D2,D0
00001CF6  E588      2983          lsl.l     #2,D0
00001CF8  2033 0800 2984          move.l    0(A3,D0.L),D0
00001CFC  6602      2985          bne.s     SetBreakPoint_4
                    2986   ; break ;         // if spare BP found allow user to set it
00001CFE  6004      2987          bra.s     SetBreakPoint_3
                    2988   SetBreakPoint_4:
00001D00  5282      2989          addq.l    #1,D2
00001D02  60E8      2990          bra       SetBreakPoint_1
                    2991   SetBreakPoint_3:
                    2992   ; }
                    2993   ; if(i == 8) {
00001D04  0C82 0000 2994          cmp.l     #8,D2
00001D08  0008      
00001D0A  660E      2995          bne.s     SetBreakPoint_6
                    2996   ; printf("\r\nNo FREE Break Points.....") ;
00001D0C  4879 0000 2997          pea       @m68kde~1_70.L
00001D10  415C      
00001D12  4E92      2998          jsr       (A2)
00001D14  584F      2999          addq.w    #4,A7
                    3000   ; return ;
00001D16  6000 00D6 3001          bra       SetBreakPoint_15
                    3002   SetBreakPoint_6:
                    3003   ; }
                    3004   ; printf("\r\nBreak Point Address: ") ;
00001D1A  4879 0000 3005          pea       @m68kde~1_71.L
00001D1E  4178      
00001D20  4E92      3006          jsr       (A2)
00001D22  584F      3007          addq.w    #4,A7
                    3008   ; BPAddress = Get8HexDigits(0) ;
00001D24  42A7      3009          clr.l     -(A7)
00001D26  4EB8 0CD8 3010          jsr       _Get8HexDigits
00001D2A  584F      3011          addq.w    #4,A7
00001D2C  2600      3012          move.l    D0,D3
                    3013   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D2E  2803      3014          move.l    D3,D4
                    3015   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D30  2003      3016          move.l    D3,D0
00001D32  C0BC 0000 3017          and.l     #1,D0
00001D36  0001      
00001D38  0C80 0000 3018          cmp.l     #1,D0
00001D3C  0001      
00001D3E  660E      3019          bne.s     SetBreakPoint_9
                    3020   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D40  4879 0000 3021          pea       @m68kde~1_72.L
00001D44  4190      
00001D46  4E92      3022          jsr       (A2)
00001D48  584F      3023          addq.w    #4,A7
                    3024   ; return ;
00001D4A  6000 00A2 3025          bra       SetBreakPoint_15
                    3026   SetBreakPoint_9:
                    3027   ; }
                    3028   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D4E  0C83 0000 3029          cmp.l     #32768,D3
00001D52  8000      
00001D54  640E      3030          bhs.s     SetBreakPoint_11
                    3031   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D56  4879 0000 3032          pea       @m68kde~1_73.L
00001D5A  41C6      
00001D5C  4E92      3033          jsr       (A2)
00001D5E  584F      3034          addq.w    #4,A7
                    3035   ; return ;
00001D60  6000 008C 3036          bra       SetBreakPoint_15
                    3037   SetBreakPoint_11:
                    3038   ; }
                    3039   ; // search for first free bp or existing same BP
                    3040   ; for(i = 0; i < 8; i++)  {
00001D64  4282      3041          clr.l     D2
                    3042   SetBreakPoint_13:
00001D66  0C82 0000 3043          cmp.l     #8,D2
00001D6A  0008      
00001D6C  6C00 0080 3044          bge       SetBreakPoint_15
                    3045   ; if(BreakPointAddress[i] == BPAddress)   {
00001D70  2002      3046          move.l    D2,D0
00001D72  E588      3047          lsl.l     #2,D0
00001D74  41F9 0B00 3048          lea       _BreakPointAddress.L,A0
00001D78  012E      
00001D7A  B6B0 0800 3049          cmp.l     0(A0,D0.L),D3
00001D7E  6610      3050          bne.s     SetBreakPoint_16
                    3051   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D80  2F03      3052          move.l    D3,-(A7)
00001D82  4879 0000 3053          pea       @m68kde~1_74.L
00001D86  420E      
00001D88  4E92      3054          jsr       (A2)
00001D8A  504F      3055          addq.w    #8,A7
                    3056   ; return ;
00001D8C  6000 0060 3057          bra       SetBreakPoint_15
                    3058   SetBreakPoint_16:
                    3059   ; }
                    3060   ; if(BreakPointSetOrCleared[i] == 0) {
00001D90  2002      3061          move.l    D2,D0
00001D92  E588      3062          lsl.l     #2,D0
00001D94  2033 0800 3063          move.l    0(A3,D0.L),D0
00001D98  6600 004E 3064          bne       SetBreakPoint_18
                    3065   ; // set BP here
                    3066   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D9C  2002      3067          move.l    D2,D0
00001D9E  E588      3068          lsl.l     #2,D0
00001DA0  27BC 0000 3069          move.l    #1,0(A3,D0.L)
00001DA4  0001 0800 
                    3070   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001DA8  2044      3071          move.l    D4,A0
00001DAA  2002      3072          move.l    D2,D0
00001DAC  E388      3073          lsl.l     #1,D0
00001DAE  43F9 0B00 3074          lea       _BreakPointInstruction.L,A1
00001DB2  014E      
00001DB4  3390 0800 3075          move.w    (A0),0(A1,D0.L)
                    3076   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001DB8  2F04      3077          move.l    D4,-(A7)
00001DBA  4879 0000 3078          pea       @m68kde~1_75.L
00001DBE  4246      
00001DC0  4E92      3079          jsr       (A2)
00001DC2  504F      3080          addq.w    #8,A7
                    3081   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DC4  2044      3082          move.l    D4,A0
00001DC6  30BC 4E4E 3083          move.w    #20046,(A0)
                    3084   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DCA  2002      3085          move.l    D2,D0
00001DCC  E588      3086          lsl.l     #2,D0
00001DCE  41F9 0B00 3087          lea       _BreakPointAddress.L,A0
00001DD2  012E      
00001DD4  2183 0800 3088          move.l    D3,0(A0,D0.L)
                    3089   ; printf("\r\n") ;
00001DD8  4879 0000 3090          pea       @m68kde~1_1.L
00001DDC  3ADC      
00001DDE  4E92      3091          jsr       (A2)
00001DE0  584F      3092          addq.w    #4,A7
                    3093   ; BreakPointDisplay() ;       // display the break points
00001DE2  4EB8 18A6 3094          jsr       _BreakPointDisplay
                    3095   ; return ;
00001DE6  6006      3096          bra.s     SetBreakPoint_15
                    3097   SetBreakPoint_18:
00001DE8  5282      3098          addq.l    #1,D2
00001DEA  6000 FF7A 3099          bra       SetBreakPoint_13
                    3100   SetBreakPoint_15:
00001DEE  4CDF 0C1C 3101          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DF2  4E5E      3102          unlk      A6
00001DF4  4E75      3103          rts
                    3104   ; }
                    3105   ; }
                    3106   ; }
                    3107   ; void SetWatchPoint(void)
                    3108   ; {
                    3109   _SetWatchPoint:
00001DF6  4E56 FFF8 3110          link      A6,#-8
00001DFA  48E7 3030 3111          movem.l   D2/D3/A2/A3,-(A7)
00001DFE  45F9 0000 3112          lea       _printf.L,A2
00001E02  322C      
00001E04  47F9 0B00 3113          lea       _WatchPointSetOrCleared.L,A3
00001E08  01A2      
                    3114   ; int i ;
                    3115   ; int WPNumber;
                    3116   ; int WPAddress;
                    3117   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3118   ; // see if any free break points
                    3119   ; for(i = 0; i < 8; i ++) {
00001E0A  4282      3120          clr.l     D2
                    3121   SetWatchPoint_1:
00001E0C  0C82 0000 3122          cmp.l     #8,D2
00001E10  0008      
00001E12  6C10      3123          bge.s     SetWatchPoint_3
                    3124   ; if( WatchPointSetOrCleared[i] == 0)
00001E14  2002      3125          move.l    D2,D0
00001E16  E588      3126          lsl.l     #2,D0
00001E18  2033 0800 3127          move.l    0(A3,D0.L),D0
00001E1C  6602      3128          bne.s     SetWatchPoint_4
                    3129   ; break ;         // if spare WP found allow user to set it
00001E1E  6004      3130          bra.s     SetWatchPoint_3
                    3131   SetWatchPoint_4:
00001E20  5282      3132          addq.l    #1,D2
00001E22  60E8      3133          bra       SetWatchPoint_1
                    3134   SetWatchPoint_3:
                    3135   ; }
                    3136   ; if(i == 8) {
00001E24  0C82 0000 3137          cmp.l     #8,D2
00001E28  0008      
00001E2A  660E      3138          bne.s     SetWatchPoint_6
                    3139   ; printf("\r\nNo FREE Watch Points.....") ;
00001E2C  4879 0000 3140          pea       @m68kde~1_76.L
00001E30  426C      
00001E32  4E92      3141          jsr       (A2)
00001E34  584F      3142          addq.w    #4,A7
                    3143   ; return ;
00001E36  6000 008C 3144          bra       SetWatchPoint_11
                    3145   SetWatchPoint_6:
                    3146   ; }
                    3147   ; printf("\r\nWatch Point Address: ") ;
00001E3A  4879 0000 3148          pea       @m68kde~1_77.L
00001E3E  4288      
00001E40  4E92      3149          jsr       (A2)
00001E42  584F      3150          addq.w    #4,A7
                    3151   ; WPAddress = Get8HexDigits(0) ;
00001E44  42A7      3152          clr.l     -(A7)
00001E46  4EB8 0CD8 3153          jsr       _Get8HexDigits
00001E4A  584F      3154          addq.w    #4,A7
00001E4C  2600      3155          move.l    D0,D3
                    3156   ; // search for first free wp or existing same wp
                    3157   ; for(i = 0; i < 8; i++)  {
00001E4E  4282      3158          clr.l     D2
                    3159   SetWatchPoint_9:
00001E50  0C82 0000 3160          cmp.l     #8,D2
00001E54  0008      
00001E56  6C00 006C 3161          bge       SetWatchPoint_11
                    3162   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E5A  2002      3163          move.l    D2,D0
00001E5C  E588      3164          lsl.l     #2,D0
00001E5E  41F9 0B00 3165          lea       _WatchPointAddress.L,A0
00001E62  0182      
00001E64  B6B0 0800 3166          cmp.l     0(A0,D0.L),D3
00001E68  6614      3167          bne.s     SetWatchPoint_12
00001E6A  4A83      3168          tst.l     D3
00001E6C  6710      3169          beq.s     SetWatchPoint_12
                    3170   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E6E  2F03      3171          move.l    D3,-(A7)
00001E70  4879 0000 3172          pea       @m68kde~1_78.L
00001E74  42A0      
00001E76  4E92      3173          jsr       (A2)
00001E78  504F      3174          addq.w    #8,A7
                    3175   ; return ;
00001E7A  6000 0048 3176          bra       SetWatchPoint_11
                    3177   SetWatchPoint_12:
                    3178   ; }
                    3179   ; if(WatchPointSetOrCleared[i] == 0) {
00001E7E  2002      3180          move.l    D2,D0
00001E80  E588      3181          lsl.l     #2,D0
00001E82  2033 0800 3182          move.l    0(A3,D0.L),D0
00001E86  6600 0038 3183          bne       SetWatchPoint_14
                    3184   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E8A  2002      3185          move.l    D2,D0
00001E8C  E588      3186          lsl.l     #2,D0
00001E8E  27BC 0000 3187          move.l    #1,0(A3,D0.L)
00001E92  0001 0800 
                    3188   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E96  2F03      3189          move.l    D3,-(A7)
00001E98  4879 0000 3190          pea       @m68kde~1_79.L
00001E9C  42D6      
00001E9E  4E92      3191          jsr       (A2)
00001EA0  504F      3192          addq.w    #8,A7
                    3193   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001EA2  2002      3194          move.l    D2,D0
00001EA4  E588      3195          lsl.l     #2,D0
00001EA6  41F9 0B00 3196          lea       _WatchPointAddress.L,A0
00001EAA  0182      
00001EAC  2183 0800 3197          move.l    D3,0(A0,D0.L)
                    3198   ; printf("\r\n") ;
00001EB0  4879 0000 3199          pea       @m68kde~1_1.L
00001EB4  3ADC      
00001EB6  4E92      3200          jsr       (A2)
00001EB8  584F      3201          addq.w    #4,A7
                    3202   ; WatchPointDisplay() ;       // display the break points
00001EBA  4EB8 197A 3203          jsr       _WatchPointDisplay
                    3204   ; return ;
00001EBE  6004      3205          bra.s     SetWatchPoint_11
                    3206   SetWatchPoint_14:
00001EC0  5282      3207          addq.l    #1,D2
00001EC2  608C      3208          bra       SetWatchPoint_9
                    3209   SetWatchPoint_11:
00001EC4  4CDF 0C0C 3210          movem.l   (A7)+,D2/D3/A2/A3
00001EC8  4E5E      3211          unlk      A6
00001ECA  4E75      3212          rts
                    3213   ; }
                    3214   ; }
                    3215   ; }
                    3216   ; void HandleBreakPoint(void)
                    3217   ; {
                    3218   _HandleBreakPoint:
00001ECC  4E56 FFFC 3219          link      A6,#-4
00001ED0  48E7 0038 3220          movem.l   A2/A3/A4,-(A7)
00001ED4  45F9 0B00 3221          lea       _i.L,A2
00001ED8  00C4      
00001EDA  47F9 0000 3222          lea       _printf.L,A3
00001EDE  322C      
00001EE0  49F9 0B00 3223          lea       _PC.L,A4
00001EE4  0120      
                    3224   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3225   ; // now we have to put the break point back to run the instruction
                    3226   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3227   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EE6  5594      3228          subq.l    #2,(A4)
                    3229   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EE8  4879 0000 3230          pea       @m68kde~1_80.L
00001EEC  42FC      
00001EEE  4E93      3231          jsr       (A3)
00001EF0  584F      3232          addq.w    #4,A7
                    3233   ; printf("\r\nSingle Step : [ON]") ;
00001EF2  4879 0000 3234          pea       @m68kde~1_81.L
00001EF6  4310      
00001EF8  4E93      3235          jsr       (A3)
00001EFA  584F      3236          addq.w    #4,A7
                    3237   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EFC  4879 0000 3238          pea       @m68kde~1_82.L
00001F00  4326      
00001F02  4E93      3239          jsr       (A3)
00001F04  584F      3240          addq.w    #4,A7
                    3241   ; // now clear the break point (put original instruction back)
                    3242   ; ProgramBreakPointAddress = PC ;
00001F06  2D54 FFFC 3243          move.l    (A4),-4(A6)
                    3244   ; for(i = 0; i < 8; i ++) {
00001F0A  4292      3245          clr.l     (A2)
                    3246   HandleBreakPoint_1:
00001F0C  2012      3247          move.l    (A2),D0
00001F0E  0C80 0000 3248          cmp.l     #8,D0
00001F12  0008      
00001F14  6400 0056 3249          bhs       HandleBreakPoint_3
                    3250   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001F18  2012      3251          move.l    (A2),D0
00001F1A  E588      3252          lsl.l     #2,D0
00001F1C  41F9 0B00 3253          lea       _BreakPointAddress.L,A0
00001F20  012E      
00001F22  2230 0800 3254          move.l    0(A0,D0.L),D1
00001F26  B294      3255          cmp.l     (A4),D1
00001F28  6600 003E 3256          bne       HandleBreakPoint_4
                    3257   ; BreakPointAddress[i] = 0 ;
00001F2C  2012      3258          move.l    (A2),D0
00001F2E  E588      3259          lsl.l     #2,D0
00001F30  41F9 0B00 3260          lea       _BreakPointAddress.L,A0
00001F34  012E      
00001F36  42B0 0800 3261          clr.l     0(A0,D0.L)
                    3262   ; BreakPointSetOrCleared[i] = 0 ;
00001F3A  2012      3263          move.l    (A2),D0
00001F3C  E588      3264          lsl.l     #2,D0
00001F3E  41F9 0B00 3265          lea       _BreakPointSetOrCleared.L,A0
00001F42  015E      
00001F44  42B0 0800 3266          clr.l     0(A0,D0.L)
                    3267   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F48  2012      3268          move.l    (A2),D0
00001F4A  E388      3269          lsl.l     #1,D0
00001F4C  41F9 0B00 3270          lea       _BreakPointInstruction.L,A0
00001F50  014E      
00001F52  226E FFFC 3271          move.l    -4(A6),A1
00001F56  32B0 0800 3272          move.w    0(A0,D0.L),(A1)
                    3273   ; BreakPointInstruction[i] = 0 ;
00001F5A  2012      3274          move.l    (A2),D0
00001F5C  E388      3275          lsl.l     #1,D0
00001F5E  41F9 0B00 3276          lea       _BreakPointInstruction.L,A0
00001F62  014E      
00001F64  4270 0800 3277          clr.w     0(A0,D0.L)
                    3278   HandleBreakPoint_4:
00001F68  5292      3279          addq.l    #1,(A2)
00001F6A  60A0      3280          bra       HandleBreakPoint_1
                    3281   HandleBreakPoint_3:
                    3282   ; }
                    3283   ; }
                    3284   ; DumpRegisters() ;
00001F6C  4EB8 10F8 3285          jsr       _DumpRegisters
                    3286   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F70  4879 0000 3287          pea       @m68kde~1_44.L
00001F74  3EA2      
00001F76  4E93      3288          jsr       (A3)
00001F78  584F      3289          addq.w    #4,A7
                    3290   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F7A  4879 0000 3291          pea       @m68kde~1_83.L
00001F7E  4340      
00001F80  4E93      3292          jsr       (A3)
00001F82  584F      3293          addq.w    #4,A7
                    3294   ; menu() ;
00001F84  4EB9 0000 3295          jsr       _menu
00001F88  20F4      
00001F8A  4CDF 1C00 3296          movem.l   (A7)+,A2/A3/A4
00001F8E  4E5E      3297          unlk      A6
00001F90  4E75      3298          rts
                    3299   ; }
                    3300   ; void UnknownCommand()
                    3301   ; {
                    3302   _UnknownCommand:
                    3303   ; printf("\r\nUnknown Command.....\r\n") ;
00001F92  4879 0000 3304          pea       @m68kde~1_84.L
00001F96  4368      
00001F98  4EB9 0000 3305          jsr       _printf
00001F9C  322C      
00001F9E  584F      3306          addq.w    #4,A7
                    3307   ; Help() ;
00001FA0  4EB9 0000 3308          jsr       _Help
00001FA4  20B6      
00001FA6  4E75      3309          rts
                    3310   ; }
                    3311   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3312   ; void CallDebugMonitor(void)
                    3313   ; {
                    3314   _CallDebugMonitor:
                    3315   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001FA8  4879 0000 3316          pea       @m68kde~1_85.L
00001FAC  4382      
00001FAE  4EB9 0000 3317          jsr       _printf
00001FB2  322C      
00001FB4  584F      3318          addq.w    #4,A7
                    3319   ; menu();
00001FB6  4EB9 0000 3320          jsr       _menu
00001FBA  20F4      
00001FBC  4E75      3321          rts
                    3322   ; }
                    3323   ; void Breakpoint(void)
                    3324   ; {
                    3325   _Breakpoint:
00001FBE  2F02      3326          move.l    D2,-(A7)
                    3327   ; char c;
                    3328   ; c = toupper(_getch());
00001FC0  2F00      3329          move.l    D0,-(A7)
00001FC2  4EB8 0B68 3330          jsr       __getch
00001FC6  2200      3331          move.l    D0,D1
00001FC8  201F      3332          move.l    (A7)+,D0
00001FCA  2F01      3333          move.l    D1,-(A7)
00001FCC  4EB9 0000 3334          jsr       _toupper
00001FD0  3200      
00001FD2  584F      3335          addq.w    #4,A7
00001FD4  1400      3336          move.b    D0,D2
                    3337   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FD6  0C02 0044 3338          cmp.b     #68,D2
00001FDA  6608      3339          bne.s     Breakpoint_1
                    3340   ; BreakPointDisplay() ;
00001FDC  4EB8 18A6 3341          jsr       _BreakPointDisplay
00001FE0  6000 0054 3342          bra       Breakpoint_10
                    3343   Breakpoint_1:
                    3344   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FE4  0C02 004B 3345          cmp.b     #75,D2
00001FE8  6630      3346          bne.s     Breakpoint_3
                    3347   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FEA  4879 0000 3348          pea       @m68kde~1_86.L
00001FEE  43A2      
00001FF0  4EB9 0000 3349          jsr       _printf
00001FF4  322C      
00001FF6  584F      3350          addq.w    #4,A7
                    3351   ; c = toupper(_getch());
00001FF8  2F00      3352          move.l    D0,-(A7)
00001FFA  4EB8 0B68 3353          jsr       __getch
00001FFE  2200      3354          move.l    D0,D1
00002000  201F      3355          move.l    (A7)+,D0
00002002  2F01      3356          move.l    D1,-(A7)
00002004  4EB9 0000 3357          jsr       _toupper
00002008  3200      
0000200A  584F      3358          addq.w    #4,A7
0000200C  1400      3359          move.b    D0,D2
                    3360   ; if(c == (char)('Y'))
0000200E  0C02 0059 3361          cmp.b     #89,D2
00002012  6604      3362          bne.s     Breakpoint_5
                    3363   ; KillAllBreakPoints() ;
00002014  4EB8 1C3E 3364          jsr       _KillAllBreakPoints
                    3365   Breakpoint_5:
00002018  601C      3366          bra.s     Breakpoint_10
                    3367   Breakpoint_3:
                    3368   ; }
                    3369   ; else if(c == (char)('S')) {
0000201A  0C02 0053 3370          cmp.b     #83,D2
0000201E  6606      3371          bne.s     Breakpoint_7
                    3372   ; SetBreakPoint() ;
00002020  4EB8 1CD6 3373          jsr       _SetBreakPoint
00002024  6010      3374          bra.s     Breakpoint_10
                    3375   Breakpoint_7:
                    3376   ; }
                    3377   ; else if(c == (char)('C')) {
00002026  0C02 0043 3378          cmp.b     #67,D2
0000202A  6606      3379          bne.s     Breakpoint_9
                    3380   ; BreakPointClear() ;
0000202C  4EB8 1A26 3381          jsr       _BreakPointClear
00002030  6004      3382          bra.s     Breakpoint_10
                    3383   Breakpoint_9:
                    3384   ; }
                    3385   ; else
                    3386   ; UnknownCommand() ;
00002032  4EB8 1F92 3387          jsr       _UnknownCommand
                    3388   Breakpoint_10:
00002036  241F      3389          move.l    (A7)+,D2
00002038  4E75      3390          rts
                    3391   ; }
                    3392   ; void Watchpoint(void)
                    3393   ; {
                    3394   _Watchpoint:
0000203A  2F02      3395          move.l    D2,-(A7)
                    3396   ; char c;
                    3397   ; c = toupper(_getch());
0000203C  2F00      3398          move.l    D0,-(A7)
0000203E  4EB8 0B68 3399          jsr       __getch
00002042  2200      3400          move.l    D0,D1
00002044  201F      3401          move.l    (A7)+,D0
00002046  2F01      3402          move.l    D1,-(A7)
00002048  4EB9 0000 3403          jsr       _toupper
0000204C  3200      
0000204E  584F      3404          addq.w    #4,A7
00002050  1400      3405          move.b    D0,D2
                    3406   ; if( c == (char)('D'))                                      // WatchPoint Display
00002052  0C02 0044 3407          cmp.b     #68,D2
00002056  6608      3408          bne.s     Watchpoint_1
                    3409   ; WatchPointDisplay() ;
00002058  4EB8 197A 3410          jsr       _WatchPointDisplay
0000205C  6000 0054 3411          bra       Watchpoint_10
                    3412   Watchpoint_1:
                    3413   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002060  0C02 004B 3414          cmp.b     #75,D2
00002064  6630      3415          bne.s     Watchpoint_3
                    3416   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002066  4879 0000 3417          pea       @m68kde~1_87.L
0000206A  43C4      
0000206C  4EB9 0000 3418          jsr       _printf
00002070  322C      
00002072  584F      3419          addq.w    #4,A7
                    3420   ; c = toupper(_getch());
00002074  2F00      3421          move.l    D0,-(A7)
00002076  4EB8 0B68 3422          jsr       __getch
0000207A  2200      3423          move.l    D0,D1
0000207C  201F      3424          move.l    (A7)+,D0
0000207E  2F01      3425          move.l    D1,-(A7)
00002080  4EB9 0000 3426          jsr       _toupper
00002084  3200      
00002086  584F      3427          addq.w    #4,A7
00002088  1400      3428          move.b    D0,D2
                    3429   ; if(c == (char)('Y'))
0000208A  0C02 0059 3430          cmp.b     #89,D2
0000208E  6604      3431          bne.s     Watchpoint_5
                    3432   ; KillAllWatchPoints() ;
00002090  4EB8 1CA6 3433          jsr       _KillAllWatchPoints
                    3434   Watchpoint_5:
00002094  601C      3435          bra.s     Watchpoint_10
                    3436   Watchpoint_3:
                    3437   ; }
                    3438   ; else if(c == (char)('S')) {
00002096  0C02 0053 3439          cmp.b     #83,D2
0000209A  6606      3440          bne.s     Watchpoint_7
                    3441   ; SetWatchPoint() ;
0000209C  4EB8 1DF6 3442          jsr       _SetWatchPoint
000020A0  6010      3443          bra.s     Watchpoint_10
                    3444   Watchpoint_7:
                    3445   ; }
                    3446   ; else if(c == (char)('C')) {
000020A2  0C02 0043 3447          cmp.b     #67,D2
000020A6  6606      3448          bne.s     Watchpoint_9
                    3449   ; WatchPointClear() ;
000020A8  4EB8 1B00 3450          jsr       _WatchPointClear
000020AC  6004      3451          bra.s     Watchpoint_10
                    3452   Watchpoint_9:
                    3453   ; }
                    3454   ; else
                    3455   ; UnknownCommand() ;
000020AE  4EB8 1F92 3456          jsr       _UnknownCommand
                    3457   Watchpoint_10:
000020B2  241F      3458          move.l    (A7)+,D2
000020B4  4E75      3459          rts
                    3460   ; }
                    3461   ; void Help(void)
                    3462   ; {
                    3463   _Help:
000020B6  48E7 2020 3464          movem.l   D2/A2,-(A7)
000020BA  45F9 0000 3465          lea       _printf.L,A2
000020BE  322C      
                    3466   ; char *banner = "\r\n----------------------------------------------------------------" ;
000020C0  41F9 0000 3467          lea       @m68kde~1_88.L,A0
000020C4  43E6      
000020C6  2408      3468          move.l    A0,D2
                    3469   ; printf(banner) ;
000020C8  2F02      3470          move.l    D2,-(A7)
000020CA  4E92      3471          jsr       (A2)
000020CC  584F      3472          addq.w    #4,A7
                    3473   ; printf("\r\n  Final Project") ;
000020CE  4879 0000 3474          pea       @m68kde~1_89.L
000020D2  442A      
000020D4  4E92      3475          jsr       (A2)
000020D6  584F      3476          addq.w    #4,A7
                    3477   ; printf(banner) ;
000020D8  2F02      3478          move.l    D2,-(A7)
000020DA  4E92      3479          jsr       (A2)
000020DC  584F      3480          addq.w    #4,A7
                    3481   ; printf("\r\n  G            - Run Snake Game") ;
000020DE  4879 0000 3482          pea       @m68kde~1_90.L
000020E2  443C      
000020E4  4E92      3483          jsr       (A2)
000020E6  584F      3484          addq.w    #4,A7
                    3485   ; printf(banner) ;
000020E8  2F02      3486          move.l    D2,-(A7)
000020EA  4E92      3487          jsr       (A2)
000020EC  584F      3488          addq.w    #4,A7
000020EE  4CDF 0404 3489          movem.l   (A7)+,D2/A2
000020F2  4E75      3490          rts
                    3491   ; }
                    3492   ; void menu(void)
                    3493   ; {
                    3494   _menu:
000020F4  4E56 FFFC 3495          link      A6,#-4
                    3496   ; char c,c1 ;
                    3497   ; while(1)    {
                    3498   menu_1:
                    3499   ; FlushKeyboard() ;               // dump unread characters from keyboard
000020F8  4EB8 0BA6 3500          jsr       _FlushKeyboard
                    3501   ; printf("\r\n#") ;
000020FC  4879 0000 3502          pea       @m68kde~1_91.L
00002100  445E      
00002102  4EB9 0000 3503          jsr       _printf
00002106  322C      
00002108  584F      3504          addq.w    #4,A7
                    3505   ; c = toupper(_getch());
0000210A  2F00      3506          move.l    D0,-(A7)
0000210C  4EB8 0B68 3507          jsr       __getch
00002110  2200      3508          move.l    D0,D1
00002112  201F      3509          move.l    (A7)+,D0
00002114  2F01      3510          move.l    D1,-(A7)
00002116  4EB9 0000 3511          jsr       _toupper
0000211A  3200      
0000211C  584F      3512          addq.w    #4,A7
0000211E  1D40 FFFE 3513          move.b    D0,-2(A6)
                    3514   ; if( c == (char)('G'))  {           // go user program
00002122  102E FFFE 3515          move.b    -2(A6),D0
00002126  0C00 0047 3516          cmp.b     #71,D0
0000212A  6616      3517          bne.s     menu_4
                    3518   ; printf("\r\nRunning Snake Game\n") ;
0000212C  4879 0000 3519          pea       @m68kde~1_92.L
00002130  4462      
00002132  4EB9 0000 3520          jsr       _printf
00002136  322C      
00002138  584F      3521          addq.w    #4,A7
                    3522   ; snake_main();
0000213A  4EB9 0000 3523          jsr       _snake_main
0000213E  2C22      
00002140  6004      3524          bra.s     menu_5
                    3525   menu_4:
                    3526   ; }
                    3527   ; else
                    3528   ; UnknownCommand() ;
00002142  4EB8 1F92 3529          jsr       _UnknownCommand
                    3530   menu_5:
00002146  60B0      3531          bra       menu_1
                    3532   ; }
                    3533   ; }
                    3534   ; void PrintErrorMessageandAbort(char *string) {
                    3535   _PrintErrorMessageandAbort:
00002148  4E56 0000 3536          link      A6,#0
                    3537   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
0000214C  4879 0000 3538          pea       @m68kde~1_93.L
00002150  4478      
00002152  4EB9 0000 3539          jsr       _printf
00002156  322C      
00002158  584F      3540          addq.w    #4,A7
                    3541   ; printf("%s\r\n", string) ;
0000215A  2F2E 0008 3542          move.l    8(A6),-(A7)
0000215E  4879 0000 3543          pea       @m68kde~1_94.L
00002162  4494      
00002164  4EB9 0000 3544          jsr       _printf
00002168  322C      
0000216A  504F      3545          addq.w    #8,A7
                    3546   ; menu() ;
0000216C  4EB8 20F4 3547          jsr       _menu
00002170  4E5E      3548          unlk      A6
00002172  4E75      3549          rts
                    3550   ; }
                    3551   ; void IRQMessage(int level) {
                    3552   _IRQMessage:
00002174  4E56 0000 3553          link      A6,#0
                    3554   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002178  4879 0000 3555          pea       @m68kde~1_95.L
0000217C  449A      
0000217E  4EB9 0000 3556          jsr       _printf
00002182  322C      
00002184  584F      3557          addq.w    #4,A7
                    3558   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002186  2F2E 0008 3559          move.l    8(A6),-(A7)
0000218A  4879 0000 3560          pea       @m68kde~1_96.L
0000218E  44B2      
00002190  4EB9 0000 3561          jsr       _printf
00002194  322C      
00002196  504F      3562          addq.w    #8,A7
                    3563   ; menu() ;
00002198  4EB8 20F4 3564          jsr       _menu
0000219C  4E5E      3565          unlk      A6
0000219E  4E75      3566          rts
                    3567   ; }
                    3568   ; void UnhandledIRQ1(void) {
                    3569   _UnhandledIRQ1:
                    3570   ; IRQMessage(1);
000021A0  4878 0001 3571          pea       1
000021A4  4EB8 2174 3572          jsr       _IRQMessage
000021A8  584F      3573          addq.w    #4,A7
000021AA  4E75      3574          rts
                    3575   ; }
                    3576   ; void UnhandledIRQ2(void) {
                    3577   _UnhandledIRQ2:
                    3578   ; IRQMessage(2);
000021AC  4878 0002 3579          pea       2
000021B0  4EB8 2174 3580          jsr       _IRQMessage
000021B4  584F      3581          addq.w    #4,A7
000021B6  4E75      3582          rts
                    3583   ; }
                    3584   ; void UnhandledIRQ3(void){
                    3585   _UnhandledIRQ3:
                    3586   ; IRQMessage(3);
000021B8  4878 0003 3587          pea       3
000021BC  4EB8 2174 3588          jsr       _IRQMessage
000021C0  584F      3589          addq.w    #4,A7
000021C2  4E75      3590          rts
                    3591   ; }
                    3592   ; void UnhandledIRQ4(void) {
                    3593   _UnhandledIRQ4:
                    3594   ; IRQMessage(4);
000021C4  4878 0004 3595          pea       4
000021C8  4EB8 2174 3596          jsr       _IRQMessage
000021CC  584F      3597          addq.w    #4,A7
000021CE  4E75      3598          rts
                    3599   ; }
                    3600   ; void UnhandledIRQ5(void) {
                    3601   _UnhandledIRQ5:
                    3602   ; IRQMessage(5);
000021D0  4878 0005 3603          pea       5
000021D4  4EB8 2174 3604          jsr       _IRQMessage
000021D8  584F      3605          addq.w    #4,A7
000021DA  4E75      3606          rts
                    3607   ; }
                    3608   ; void UnhandledIRQ6(void) {
                    3609   _UnhandledIRQ6:
                    3610   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000021DC  4879 0000 3611          pea       @m68kde~1_97.L
000021E0  44D6      
000021E2  4EB8 2148 3612          jsr       _PrintErrorMessageandAbort
000021E6  584F      3613          addq.w    #4,A7
                    3614   ; menu() ;
000021E8  4EB8 20F4 3615          jsr       _menu
000021EC  4E75      3616          rts
                    3617   ; }
                    3618   ; void UnhandledIRQ7(void) {
                    3619   _UnhandledIRQ7:
                    3620   ; IRQMessage(7);
000021EE  4878 0007 3621          pea       7
000021F2  4EB8 2174 3622          jsr       _IRQMessage
000021F6  584F      3623          addq.w    #4,A7
000021F8  4E75      3624          rts
                    3625   ; }
                    3626   ; void UnhandledTrap(void) {
                    3627   _UnhandledTrap:
                    3628   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000021FA  4879 0000 3629          pea       @m68kde~1_98.L
000021FE  4516      
00002200  4EB8 2148 3630          jsr       _PrintErrorMessageandAbort
00002204  584F      3631          addq.w    #4,A7
00002206  4E75      3632          rts
                    3633   ; }
                    3634   ; void BusError() {
                    3635   _BusError:
                    3636   ; PrintErrorMessageandAbort("BUS Error!") ;
00002208  4879 0000 3637          pea       @m68kde~1_99.L
0000220C  452C      
0000220E  4EB8 2148 3638          jsr       _PrintErrorMessageandAbort
00002212  584F      3639          addq.w    #4,A7
00002214  4E75      3640          rts
                    3641   ; }
                    3642   ; void AddressError() {
                    3643   _AddressError:
                    3644   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002216  4879 0000 3645          pea       @m68kde~1_100.L
0000221A  4538      
0000221C  4EB8 2148 3646          jsr       _PrintErrorMessageandAbort
00002220  584F      3647          addq.w    #4,A7
00002222  4E75      3648          rts
                    3649   ; }
                    3650   ; void IllegalInstruction() {
                    3651   _IllegalInstruction:
                    3652   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002224  4879 0000 3653          pea       @m68kde~1_101.L
00002228  4548      
0000222A  4EB8 2148 3654          jsr       _PrintErrorMessageandAbort
0000222E  584F      3655          addq.w    #4,A7
00002230  4E75      3656          rts
                    3657   ; }
                    3658   ; void Dividebyzero() {
                    3659   _Dividebyzero:
                    3660   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002232  4879 0000 3661          pea       @m68kde~1_102.L
00002236  455C      
00002238  4EB8 2148 3662          jsr       _PrintErrorMessageandAbort
0000223C  584F      3663          addq.w    #4,A7
0000223E  4E75      3664          rts
                    3665   ; }
                    3666   ; void Check() {
                    3667   _Check:
                    3668   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002240  4879 0000 3669          pea       @m68kde~1_103.L
00002244  456C      
00002246  4EB8 2148 3670          jsr       _PrintErrorMessageandAbort
0000224A  584F      3671          addq.w    #4,A7
0000224C  4E75      3672          rts
                    3673   ; }
                    3674   ; void Trapv() {
                    3675   _Trapv:
                    3676   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000224E  4879 0000 3677          pea       @m68kde~1_104.L
00002252  457E      
00002254  4EB8 2148 3678          jsr       _PrintErrorMessageandAbort
00002258  584F      3679          addq.w    #4,A7
0000225A  4E75      3680          rts
                    3681   ; }
                    3682   ; void PrivError() {
                    3683   _PrivError:
                    3684   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000225C  4879 0000 3685          pea       @m68kde~1_105.L
00002260  4590      
00002262  4EB8 2148 3686          jsr       _PrintErrorMessageandAbort
00002266  584F      3687          addq.w    #4,A7
00002268  4E75      3688          rts
                    3689   ; }
                    3690   ; void UnitIRQ() {
                    3691   _UnitIRQ:
                    3692   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000226A  4879 0000 3693          pea       @m68kde~1_106.L
0000226E  45A4      
00002270  4EB8 2148 3694          jsr       _PrintErrorMessageandAbort
00002274  584F      3695          addq.w    #4,A7
00002276  4E75      3696          rts
                    3697   ; }
                    3698   ; void Spurious() {
                    3699   _Spurious:
                    3700   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002278  4879 0000 3701          pea       @m68kde~1_107.L
0000227C  45B6      
0000227E  4EB8 2148 3702          jsr       _PrintErrorMessageandAbort
00002282  584F      3703          addq.w    #4,A7
00002284  4E75      3704          rts
                    3705   ; }
                    3706   ; void EnterString(void)
                    3707   ; {
                    3708   _EnterString:
00002286  4E56 FFFC 3709          link      A6,#-4
0000228A  2F02      3710          move.l    D2,-(A7)
                    3711   ; unsigned char *Start;
                    3712   ; unsigned char c;
                    3713   ; printf("\r\nStart Address in Memory: ") ;
0000228C  4879 0000 3714          pea       @m68kde~1_108.L
00002290  45C4      
00002292  4EB9 0000 3715          jsr       _printf
00002296  322C      
00002298  584F      3716          addq.w    #4,A7
                    3717   ; Start = Get8HexDigits(0) ;
0000229A  42A7      3718          clr.l     -(A7)
0000229C  4EB8 0CD8 3719          jsr       _Get8HexDigits
000022A0  584F      3720          addq.w    #4,A7
000022A2  2400      3721          move.l    D0,D2
                    3722   ; printf("\r\nEnter String (ESC to end) :") ;
000022A4  4879 0000 3723          pea       @m68kde~1_109.L
000022A8  45E0      
000022AA  4EB9 0000 3724          jsr       _printf
000022AE  322C      
000022B0  584F      3725          addq.w    #4,A7
                    3726   ; while((c = getchar()) != 0x1b)
                    3727   EnterString_1:
000022B2  4EB9 0000 3728          jsr       _getch
000022B6  314E      
000022B8  1D40 FFFF 3729          move.b    D0,-1(A6)
000022BC  0C00 001B 3730          cmp.b     #27,D0
000022C0  670A      3731          beq.s     EnterString_3
                    3732   ; *Start++ = c ;
000022C2  2042      3733          move.l    D2,A0
000022C4  5282      3734          addq.l    #1,D2
000022C6  10AE FFFF 3735          move.b    -1(A6),(A0)
000022CA  60E6      3736          bra       EnterString_1
                    3737   EnterString_3:
                    3738   ; *Start = 0x00;  // terminate with a null
000022CC  2042      3739          move.l    D2,A0
000022CE  4210      3740          clr.b     (A0)
000022D0  241F      3741          move.l    (A7)+,D2
000022D2  4E5E      3742          unlk      A6
000022D4  4E75      3743          rts
                    3744   ; }
                    3745   ; void putcharxy(int x, int y, char ch) {
                    3746   _putcharxy:
000022D6  4E56 FFFC 3747          link      A6,#-4
                    3748   ; //display on the VGA char ch at column x, line y
                    3749   ; volatile unsigned char* addr;
                    3750   ; addr = &vga_ram_start + NUM_VGA_COLUMNS*y + x;
000022DA  203C 0060 3751          move.l    #6291456,D0
000022DE  0000      
000022E0  2F2E 000C 3752          move.l    12(A6),-(A7)
000022E4  4878 0050 3753          pea       80
000022E8  4EB9 0000 3754          jsr       LMUL
000022EC  3090      
000022EE  2217      3755          move.l    (A7),D1
000022F0  504F      3756          addq.w    #8,A7
000022F2  D081      3757          add.l     D1,D0
000022F4  D0AE 0008 3758          add.l     8(A6),D0
000022F8  2D40 FFFC 3759          move.l    D0,-4(A6)
                    3760   ; *addr = ch;
000022FC  206E FFFC 3761          move.l    -4(A6),A0
00002300  10AE 0013 3762          move.b    19(A6),(A0)
00002304  4E5E      3763          unlk      A6
00002306  4E75      3764          rts
                    3765   ; }
                    3766   ; void print_at_xy(int x,
                    3767   ; int y,
                    3768   ; const char* str) {
                    3769   _print_at_xy:
00002308  4E56 0000 3770          link      A6,#0
0000230C  48E7 3C00 3771          movem.l   D2/D3/D4/D5,-(A7)
                    3772   ; //print a string on the VGA, starting at column x, line y. 
                    3773   ; //Wrap around to the next line if we reach the edge of the screen
                    3774   ; int end_of_str = 0;
00002310  4285      3775          clr.l     D5
                    3776   ; int i = 0;
00002312  4284      3777          clr.l     D4
                    3778   ; int x_coord = x;
00002314  262E 0008 3779          move.l    8(A6),D3
                    3780   ; int y_coord = y;
00002318  242E 000C 3781          move.l    12(A6),D2
                    3782   ; while (!end_of_str)
                    3783   print_at_xy_1:
0000231C  4A85      3784          tst.l     D5
0000231E  6600 0048 3785          bne       print_at_xy_3
                    3786   ; {
                    3787   ; if (*(str+i) != '\0')
00002322  206E 0010 3788          move.l    16(A6),A0
00002326  1030 4800 3789          move.b    0(A0,D4.L),D0
0000232A  6700 0036 3790          beq       print_at_xy_4
                    3791   ; {   
                    3792   ; if (x_coord > NUM_VGA_COLUMNS-1) { //Wrap around to the next line if we reach the edge of the screen
0000232E  0C83 0000 3793          cmp.l     #79,D3
00002332  004F      
00002334  6F04      3794          ble.s     print_at_xy_6
                    3795   ; x_coord = 0;
00002336  4283      3796          clr.l     D3
                    3797   ; y_coord++;
00002338  5282      3798          addq.l    #1,D2
                    3799   print_at_xy_6:
                    3800   ; }
                    3801   ; if (y_coord > NUM_VGA_ROWS-1) {
0000233A  0C82 0000 3802          cmp.l     #39,D2
0000233E  0027      
00002340  6F02      3803          ble.s     print_at_xy_8
                    3804   ; y_coord = 0;
00002342  4282      3805          clr.l     D2
                    3806   print_at_xy_8:
                    3807   ; }
                    3808   ; putcharxy(x_coord,y_coord, *(str+i));
00002344  206E 0010 3809          move.l    16(A6),A0
00002348  1230 4800 3810          move.b    0(A0,D4.L),D1
0000234C  4881      3811          ext.w     D1
0000234E  48C1      3812          ext.l     D1
00002350  2F01      3813          move.l    D1,-(A7)
00002352  2F02      3814          move.l    D2,-(A7)
00002354  2F03      3815          move.l    D3,-(A7)
00002356  4EB8 22D6 3816          jsr       _putcharxy
0000235A  DEFC 000C 3817          add.w     #12,A7
                    3818   ; x_coord++;
0000235E  5283      3819          addq.l    #1,D3
00002360  6002      3820          bra.s     print_at_xy_5
                    3821   print_at_xy_4:
                    3822   ; }
                    3823   ; else
                    3824   ; {
                    3825   ; end_of_str = 1;
00002362  7A01      3826          moveq     #1,D5
                    3827   print_at_xy_5:
                    3828   ; }
                    3829   ; i++;
00002364  5284      3830          addq.l    #1,D4
00002366  60B4      3831          bra       print_at_xy_1
                    3832   print_at_xy_3:
00002368  4CDF 003C 3833          movem.l   (A7)+,D2/D3/D4/D5
0000236C  4E5E      3834          unlk      A6
0000236E  4E75      3835          rts
                    3836   ; }
                    3837   ; }
                    3838   ; void cls()
                    3839   ; {
                    3840   _cls:
00002370  4E56 FFFC 3841          link      A6,#-4
00002374  48E7 3000 3842          movem.l   D2/D3,-(A7)
                    3843   ; //clear the screen
                    3844   ; int x;
                    3845   ; int y;
                    3846   ; char space = 0x20;
00002378  1D7C 0020 3847          move.b    #32,-1(A6)
0000237C  FFFF      
                    3848   ; for (y=0; y<NUM_VGA_ROWS; y++) {
0000237E  4283      3849          clr.l     D3
                    3850   cls_1:
00002380  0C83 0000 3851          cmp.l     #40,D3
00002384  0028      
00002386  6C28      3852          bge.s     cls_3
                    3853   ; for (x=0; x<NUM_VGA_COLUMNS; x++) {
00002388  4282      3854          clr.l     D2
                    3855   cls_4:
0000238A  0C82 0000 3856          cmp.l     #80,D2
0000238E  0050      
00002390  6C1A      3857          bge.s     cls_6
                    3858   ; putcharxy(x,y,space);
00002392  122E FFFF 3859          move.b    -1(A6),D1
00002396  4881      3860          ext.w     D1
00002398  48C1      3861          ext.l     D1
0000239A  2F01      3862          move.l    D1,-(A7)
0000239C  2F03      3863          move.l    D3,-(A7)
0000239E  2F02      3864          move.l    D2,-(A7)
000023A0  4EB8 22D6 3865          jsr       _putcharxy
000023A4  DEFC 000C 3866          add.w     #12,A7
000023A8  5282      3867          addq.l    #1,D2
000023AA  60DE      3868          bra       cls_4
                    3869   cls_6:
000023AC  5283      3870          addq.l    #1,D3
000023AE  60D0      3871          bra       cls_1
                    3872   cls_3:
000023B0  4CDF 000C 3873          movem.l   (A7)+,D2/D3
000023B4  4E5E      3874          unlk      A6
000023B6  4E75      3875          rts
                    3876   ; }
                    3877   ; }
                    3878   ; };
                    3879   ; void gotoxy(int x, int y)
                    3880   ; {
                    3881   _gotoxy:
000023B8  4E56 0000 3882          link      A6,#0
                    3883   ; //move the cursor to location column = x, row = y
                    3884   ; vga_x_cursor_reg = x;
000023BC  202E 0008 3885          move.l    8(A6),D0
000023C0  13C0 0060 3886          move.b    D0,6295552
000023C4  1000      
                    3887   ; vga_y_cursor_reg = y;
000023C6  202E 000C 3888          move.l    12(A6),D0
000023CA  13C0 0060 3889          move.b    D0,6295554
000023CE  1002      
000023D0  4E5E      3890          unlk      A6
000023D2  4E75      3891          rts
                    3892   ; };
                    3893   ; void set_vga_control_reg(char x) {
                    3894   _set_vga_control_reg:
000023D4  4E56 0000 3895          link      A6,#0
                    3896   ; //Set the VGA control (OCTL) value
                    3897   ; vga_ctrl_reg = x;
000023D8  13EE 000B 3898          move.b    11(A6),6295556
000023DC  0060 1004 
000023E0  4E5E      3899          unlk      A6
000023E2  4E75      3900          rts
                    3901   ; }
                    3902   ; char get_vga_control_reg() {
                    3903   _get_vga_control_reg:
000023E4  4E56 FFFC 3904          link      A6,#-4
                    3905   ; //return the VGA control (OCTL) value
                    3906   ; char value;
                    3907   ; value = vga_ctrl_reg;
000023E8  1D79 0060 3908          move.b    6295556,-1(A6)
000023EC  1004 FFFF 
                    3909   ; return value;
000023F0  102E FFFF 3910          move.b    -1(A6),D0
000023F4  4E5E      3911          unlk      A6
000023F6  4E75      3912          rts
                    3913   ; }
                    3914   ; int clock() {
                    3915   _clock:
                    3916   ; //return the current value of a milliseconds counter, with a resolution of 10ms or better
                    3917   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
000023F8  1039 0040 3918          move.b    4194358,D0
000023FC  0036      
000023FE  0C00 0001 3919          cmp.b     #1,D0
00002402  6612      3920          bne.s     clock_1
                    3921   ; Timer2Control = 3; // reset the timer to clear the interrupt, enable interrupts and allow counter to run
00002404  13FC 0003 3922          move.b    #3,4194358
00002408  0040 0036 
                    3923   ; clock_counter = clock_counter + 10;
0000240C  06B9 0000 3924          add.l     #10,_clock_counter.L
00002410  000A 0B00 
00002414  054E      
                    3925   clock_1:
                    3926   ; }
                    3927   ; return clock_counter;
00002416  2039 0B00 3928          move.l    _clock_counter.L,D0
0000241A  054E      
0000241C  4E75      3929          rts
                    3930   ; }
                    3931   ; void delay_ms(int num_ms) {
                    3932   _delay_ms:
0000241E  4E56 FFFC 3933          link      A6,#-4
                    3934   ; //delay a certain number of milliseconds
                    3935   ; int initial_time;
                    3936   ; initial_time = clock();
00002422  4EB8 23F8 3937          jsr       _clock
00002426  2D40 FFFC 3938          move.l    D0,-4(A6)
                    3939   ; while ((clock() - initial_time) < num_ms) {}
                    3940   delay_ms_1:
0000242A  4EB8 23F8 3941          jsr       _clock
0000242E  90AE FFFC 3942          sub.l     -4(A6),D0
00002432  B0AE 0008 3943          cmp.l     8(A6),D0
00002436  6C02      3944          bge.s     delay_ms_3
00002438  60F0      3945          bra       delay_ms_1
                    3946   delay_ms_3:
0000243A  4E5E      3947          unlk      A6
0000243C  4E75      3948          rts
                    3949   ; }
                    3950   ; void string_cursor(int x,
                    3951   ; int y,
                    3952   ; const char* str)
                    3953   ; {
                    3954   _string_cursor:
0000243E  4E56 0000 3955          link      A6,#0
00002442  48E7 3C30 3956          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00002446  45F8 23B8 3957          lea       _gotoxy.L,A2
0000244A  47F8 241E 3958          lea       _delay_ms.L,A3
                    3959   ; int end_of_str = 0;
0000244E  4285      3960          clr.l     D5
                    3961   ; int i = 0;
00002450  4284      3962          clr.l     D4
                    3963   ; int x_coord = x;
00002452  262E 0008 3964          move.l    8(A6),D3
                    3965   ; int y_coord = y;
00002456  242E 000C 3966          move.l    12(A6),D2
                    3967   ; while (!end_of_str)
                    3968   string_cursor_1:
0000245A  4A85      3969          tst.l     D5
0000245C  6600 0060 3970          bne       string_cursor_3
                    3971   ; {
                    3972   ; if (*(str+i) != '\0')
00002460  206E 0010 3973          move.l    16(A6),A0
00002464  1030 4800 3974          move.b    0(A0,D4.L),D0
00002468  6700 004E 3975          beq       string_cursor_4
                    3976   ; {   
                    3977   ; if (x_coord > NUM_VGA_COLUMNS-1) { //Wrap around to the next line if we reach the edge of the screen
0000246C  0C83 0000 3978          cmp.l     #79,D3
00002470  004F      
00002472  6F04      3979          ble.s     string_cursor_6
                    3980   ; x_coord = 0;
00002474  4283      3981          clr.l     D3
                    3982   ; y_coord++;
00002476  5282      3983          addq.l    #1,D2
                    3984   string_cursor_6:
                    3985   ; }
                    3986   ; if (y_coord > NUM_VGA_ROWS-1) {
00002478  0C82 0000 3987          cmp.l     #39,D2
0000247C  0027      
0000247E  6F02      3988          ble.s     string_cursor_8
                    3989   ; y_coord = 0;
00002480  4282      3990          clr.l     D2
                    3991   string_cursor_8:
                    3992   ; }
                    3993   ; putcharxy(x_coord,y_coord, *(str+i));
00002482  206E 0010 3994          move.l    16(A6),A0
00002486  1230 4800 3995          move.b    0(A0,D4.L),D1
0000248A  4881      3996          ext.w     D1
0000248C  48C1      3997          ext.l     D1
0000248E  2F01      3998          move.l    D1,-(A7)
00002490  2F02      3999          move.l    D2,-(A7)
00002492  2F03      4000          move.l    D3,-(A7)
00002494  4EB8 22D6 4001          jsr       _putcharxy
00002498  DEFC 000C 4002          add.w     #12,A7
                    4003   ; delay_ms(100);
0000249C  4878 0064 4004          pea       100
000024A0  4E93      4005          jsr       (A3)
000024A2  584F      4006          addq.w    #4,A7
                    4007   ; gotoxy(x_coord,y_coord);
000024A4  2F02      4008          move.l    D2,-(A7)
000024A6  2F03      4009          move.l    D3,-(A7)
000024A8  4E92      4010          jsr       (A2)
000024AA  504F      4011          addq.w    #8,A7
                    4012   ; delay_ms(100);
000024AC  4878 0064 4013          pea       100
000024B0  4E93      4014          jsr       (A3)
000024B2  584F      4015          addq.w    #4,A7
                    4016   ; x_coord++;
000024B4  5283      4017          addq.l    #1,D3
000024B6  6002      4018          bra.s     string_cursor_5
                    4019   string_cursor_4:
                    4020   ; }
                    4021   ; else
                    4022   ; {
                    4023   ; end_of_str = 1;
000024B8  7A01      4024          moveq     #1,D5
                    4025   string_cursor_5:
                    4026   ; }
                    4027   ; i++;
000024BA  5284      4028          addq.l    #1,D4
000024BC  609C      4029          bra       string_cursor_1
                    4030   string_cursor_3:
                    4031   ; }
                    4032   ; gotoxy(x_coord,y_coord);
000024BE  2F02      4033          move.l    D2,-(A7)
000024C0  2F03      4034          move.l    D3,-(A7)
000024C2  4E92      4035          jsr       (A2)
000024C4  504F      4036          addq.w    #8,A7
                    4037   ; delay_ms(100);
000024C6  4878 0064 4038          pea       100
000024CA  4E93      4039          jsr       (A3)
000024CC  584F      4040          addq.w    #4,A7
                    4041   ; gotoxy(x_coord+1,y_coord);
000024CE  2F02      4042          move.l    D2,-(A7)
000024D0  2203      4043          move.l    D3,D1
000024D2  5281      4044          addq.l    #1,D1
000024D4  2F01      4045          move.l    D1,-(A7)
000024D6  4E92      4046          jsr       (A2)
000024D8  504F      4047          addq.w    #8,A7
000024DA  4CDF 0C3C 4048          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000024DE  4E5E      4049          unlk      A6
000024E0  4E75      4050          rts
                    4051   ; }
                    4052   ; void int_to_str (char* str, int num)
                    4053   ; {   
                    4054   _int_to_str:
000024E2  4E56 FFFC 4055          link      A6,#-4
000024E6  48E7 3E00 4056          movem.l   D2/D3/D4/D5/D6,-(A7)
000024EA  262E 0008 4057          move.l    8(A6),D3
000024EE  2A2E 000C 4058          move.l    12(A6),D5
                    4059   ; int i = 0, j, sign;
000024F2  4284      4060          clr.l     D4
                    4061   ; // handle negative numbers
                    4062   ; if (num < 0) {
000024F4  0C85 0000 4063          cmp.l     #0,D5
000024F8  0000      
000024FA  6C0A      4064          bge.s     int_to_str_1
                    4065   ; sign = -1;
000024FC  7CFF      4066          moveq     #-1,D6
                    4067   ; num = -num;
000024FE  2005      4068          move.l    D5,D0
00002500  4480      4069          neg.l     D0
00002502  2A00      4070          move.l    D0,D5
00002504  6002      4071          bra.s     int_to_str_2
                    4072   int_to_str_1:
                    4073   ; }
                    4074   ; else {
                    4075   ; sign = 1;
00002506  7C01      4076          moveq     #1,D6
                    4077   int_to_str_2:
                    4078   ; }
                    4079   ; // convert each digit of the number to a character and store in the buffer
                    4080   ; do {
                    4081   int_to_str_3:
                    4082   ; str[i++] = num % 10 + '0';
00002508  2F05      4083          move.l    D5,-(A7)
0000250A  4878 000A 4084          pea       10
0000250E  4EB9 0000 4085          jsr       LDIV
00002512  2FB2      
00002514  202F 0004 4086          move.l    4(A7),D0
00002518  504F      4087          addq.w    #8,A7
0000251A  0680 0000 4088          add.l     #48,D0
0000251E  0030      
00002520  2043      4089          move.l    D3,A0
00002522  2204      4090          move.l    D4,D1
00002524  5284      4091          addq.l    #1,D4
00002526  1180 1800 4092          move.b    D0,0(A0,D1.L)
0000252A  2F05      4093          move.l    D5,-(A7)
0000252C  4878 000A 4094          pea       10
00002530  4EB9 0000 4095          jsr       LDIV
00002534  2FB2      
00002536  2A17      4096          move.l    (A7),D5
00002538  504F      4097          addq.w    #8,A7
0000253A  0C85 0000 4098          cmp.l     #0,D5
0000253E  0000      
00002540  6EC6      4099          bgt       int_to_str_3
                    4100   ; } while ((num /= 10) > 0);
                    4101   ; // add the negative sign if necessary
                    4102   ; if (sign == -1) {
00002542  0C86 FFFF 4103          cmp.l     #-1,D6
00002546  FFFF      
00002548  660C      4104          bne.s     int_to_str_5
                    4105   ; str[i++] = '-';
0000254A  2043      4106          move.l    D3,A0
0000254C  2004      4107          move.l    D4,D0
0000254E  5284      4108          addq.l    #1,D4
00002550  11BC 002D 4109          move.b    #45,0(A0,D0.L)
00002554  0800      
                    4110   int_to_str_5:
                    4111   ; }
                    4112   ; // reverse the string
                    4113   ; for (j = 0; j < i / 2; j++) {
00002556  4282      4114          clr.l     D2
                    4115   int_to_str_7:
00002558  2F04      4116          move.l    D4,-(A7)
0000255A  4878 0002 4117          pea       2
0000255E  4EB9 0000 4118          jsr       LDIV
00002562  2FB2      
00002564  2017      4119          move.l    (A7),D0
00002566  504F      4120          addq.w    #8,A7
00002568  B480      4121          cmp.l     D0,D2
0000256A  6C2A      4122          bge.s     int_to_str_9
                    4123   ; char temp = str[j];
0000256C  2043      4124          move.l    D3,A0
0000256E  1D70 2800 4125          move.b    0(A0,D2.L),-1(A6)
00002572  FFFF      
                    4126   ; str[j] = str[i - j - 1];
00002574  2043      4127          move.l    D3,A0
00002576  2004      4128          move.l    D4,D0
00002578  9082      4129          sub.l     D2,D0
0000257A  5380      4130          subq.l    #1,D0
0000257C  2243      4131          move.l    D3,A1
0000257E  13B0 0800 4132          move.b    0(A0,D0.L),0(A1,D2.L)
00002582  2800      
                    4133   ; str[i - j - 1] = temp;
00002584  2043      4134          move.l    D3,A0
00002586  2004      4135          move.l    D4,D0
00002588  9082      4136          sub.l     D2,D0
0000258A  5380      4137          subq.l    #1,D0
0000258C  11AE FFFF 4138          move.b    -1(A6),0(A0,D0.L)
00002590  0800      
00002592  5282      4139          addq.l    #1,D2
00002594  60C2      4140          bra       int_to_str_7
                    4141   int_to_str_9:
                    4142   ; }
                    4143   ; // add null terminator to the end of the string
                    4144   ; str[i] = '\0';
00002596  2043      4145          move.l    D3,A0
00002598  4230 4800 4146          clr.b     0(A0,D4.L)
0000259C  4CDF 007C 4147          movem.l   (A7)+,D2/D3/D4/D5/D6
000025A0  4E5E      4148          unlk      A6
000025A2  4E75      4149          rts
                    4150   ; }
                    4151   ; void gameOver()
                    4152   ; {
                    4153   _gameOver:
000025A4  4E56 FFEC 4154          link      A6,#-20
000025A8  48E7 2030 4155          movem.l   D2/A2/A3,-(A7)
000025AC  45F9 0000 4156          lea       _printf.L,A2
000025B0  322C      
000025B2  47F8 243E 4157          lea       _string_cursor.L,A3
                    4158   ; //show game over screen and animation
                    4159   ; char score_str[20];
                    4160   ; unsigned int vga_color = 2;
000025B6  7402      4161          moveq     #2,D2
                    4162   ; int_to_str(score_str, score);
000025B8  2F39 0B00 4163          move.l    _score.L,-(A7)
000025BC  0546      
000025BE  486E FFEC 4164          pea       -20(A6)
000025C2  4EB8 24E2 4165          jsr       _int_to_str
000025C6  504F      4166          addq.w    #8,A7
                    4167   ; cls();
000025C8  4EB8 2370 4168          jsr       _cls
                    4169   ; gotoxy(35,18);
000025CC  4878 0012 4170          pea       18
000025D0  4878 0023 4171          pea       35
000025D4  4EB8 23B8 4172          jsr       _gotoxy
000025D8  504F      4173          addq.w    #8,A7
                    4174   ; set_vga_control_reg(0xe2);
000025DA  4878 00E2 4175          pea       226
000025DE  4EB8 23D4 4176          jsr       _set_vga_control_reg
000025E2  584F      4177          addq.w    #4,A7
                    4178   ; putcharxy(35,18,'G');
000025E4  4878 0047 4179          pea       71
000025E8  4878 0012 4180          pea       18
000025EC  4878 0023 4181          pea       35
000025F0  4EB8 22D6 4182          jsr       _putcharxy
000025F4  DEFC 000C 4183          add.w     #12,A7
                    4184   ; delay_ms(100);
000025F8  4878 0064 4185          pea       100
000025FC  4EB8 241E 4186          jsr       _delay_ms
00002600  584F      4187          addq.w    #4,A7
                    4188   ; string_cursor(36,18, "ame Over!");
00002602  4879 0000 4189          pea       @m68kde~1_110.L
00002606  45FE      
00002608  4878 0012 4190          pea       18
0000260C  4878 0024 4191          pea       36
00002610  4E93      4192          jsr       (A3)
00002612  DEFC 000C 4193          add.w     #12,A7
                    4194   ; string_cursor(35,20, "Score: ");
00002616  4879 0000 4195          pea       @m68kde~1_111.L
0000261A  4608      
0000261C  4878 0014 4196          pea       20
00002620  4878 0023 4197          pea       35
00002624  4E93      4198          jsr       (A3)
00002626  DEFC 000C 4199          add.w     #12,A7
                    4200   ; string_cursor(42,20, score_str);
0000262A  486E FFEC 4201          pea       -20(A6)
0000262E  4878 0014 4202          pea       20
00002632  4878 002A 4203          pea       42
00002636  4E93      4204          jsr       (A3)
00002638  DEFC 000C 4205          add.w     #12,A7
                    4206   ; //gotoxy(45,20);
                    4207   ; printf("\r\nGame over !");
0000263C  4879 0000 4208          pea       @m68kde~1_112.L
00002640  4610      
00002642  4E92      4209          jsr       (A2)
00002644  584F      4210          addq.w    #4,A7
                    4211   ; printf("\r\nyour score was %d\n", score);
00002646  2F39 0B00 4212          move.l    _score.L,-(A7)
0000264A  0546      
0000264C  4879 0000 4213          pea       @m68kde~1_113.L
00002650  461E      
00002652  4E92      4214          jsr       (A2)
00002654  504F      4215          addq.w    #8,A7
                    4216   ; printf("\r\npress any key\n");
00002656  4879 0000 4217          pea       @m68kde~1_114.L
0000265A  4634      
0000265C  4E92      4218          jsr       (A2)
0000265E  584F      4219          addq.w    #4,A7
                    4220   ; FlushKeyboard() ; 
00002660  4EB8 0BA6 4221          jsr       _FlushKeyboard
                    4222   ; while (1)
                    4223   gameOver_1:
                    4224   ; {   
                    4225   ; delay_ms(300);
00002664  4878 012C 4226          pea       300
00002668  4EB8 241E 4227          jsr       _delay_ms
0000266C  584F      4228          addq.w    #4,A7
                    4229   ; vga_color = (vga_color+1) & 7; // extract the color bits
0000266E  2002      4230          move.l    D2,D0
00002670  5280      4231          addq.l    #1,D0
00002672  C0BC 0000 4232          and.l     #7,D0
00002676  0007      
00002678  2400      4233          move.l    D0,D2
                    4234   ; if (vga_color == 0)
0000267A  4A82      4235          tst.l     D2
0000267C  6602      4236          bne.s     gameOver_4
                    4237   ; {
                    4238   ; vga_color = 1;
0000267E  7401      4239          moveq     #1,D2
                    4240   gameOver_4:
                    4241   ; }
                    4242   ; set_vga_control_reg((0xe0 | vga_color));
00002680  323C 00E0 4243          move.w    #224,D1
00002684  48C1      4244          ext.l     D1
00002686  8282      4245          or.l      D2,D1
00002688  4881      4246          ext.w     D1
0000268A  48C1      4247          ext.l     D1
0000268C  2F01      4248          move.l    D1,-(A7)
0000268E  4EB8 23D4 4249          jsr       _set_vga_control_reg
00002692  584F      4250          addq.w    #4,A7
                    4251   ; if (kbhit()){
00002694  4EB8 0B24 4252          jsr       _kbhit
00002698  4A80      4253          tst.l     D0
0000269A  6702      4254          beq.s     gameOver_6
                    4255   ; break;
0000269C  6002      4256          bra.s     gameOver_3
                    4257   gameOver_6:
0000269E  60C4      4258          bra       gameOver_1
                    4259   gameOver_3:
000026A0  4CDF 0C04 4260          movem.l   (A7)+,D2/A2/A3
000026A4  4E5E      4261          unlk      A6
000026A6  4E75      4262          rts
                    4263   ; }
                    4264   ; }
                    4265   ; }
                    4266   ; void updateScore()
                    4267   ; {
                    4268   _updateScore:
000026A8  4E56 FFEC 4269          link      A6,#-20
                    4270   ; //print the score at the bottom of the screen
                    4271   ; char score_str[20];
                    4272   ; int_to_str(score_str, score);
000026AC  2F39 0B00 4273          move.l    _score.L,-(A7)
000026B0  0546      
000026B2  486E FFEC 4274          pea       -20(A6)
000026B6  4EB8 24E2 4275          jsr       _int_to_str
000026BA  504F      4276          addq.w    #8,A7
                    4277   ; print_at_xy(1,NUM_VGA_ROWS-1, "Score: ");
000026BC  4879 0000 4278          pea       @m68kde~1_111.L
000026C0  4608      
000026C2  4878 0027 4279          pea       39
000026C6  4878 0001 4280          pea       1
000026CA  4EB8 2308 4281          jsr       _print_at_xy
000026CE  DEFC 000C 4282          add.w     #12,A7
                    4283   ; print_at_xy(8,NUM_VGA_ROWS-1, score_str);
000026D2  486E FFEC 4284          pea       -20(A6)
000026D6  4878 0027 4285          pea       39
000026DA  4878 0008 4286          pea       8
000026DE  4EB8 2308 4287          jsr       _print_at_xy
000026E2  DEFC 000C 4288          add.w     #12,A7
000026E6  4E5E      4289          unlk      A6
000026E8  4E75      4290          rts
                    4291   ; }
                    4292   ; void drawRect(int x, int y, int x2, int y2, char ch)
                    4293   ; {
                    4294   _drawRect:
000026EA  4E56 0000 4295          link      A6,#0
000026EE  48E7 3E20 4296          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
000026F2  282E 000C 4297          move.l    12(A6),D4
000026F6  1A2E 001B 4298          move.b    27(A6),D5
000026FA  4885      4299          ext.w     D5
000026FC  48C5      4300          ext.l     D5
000026FE  45F8 22D6 4301          lea       _putcharxy.L,A2
00002702  2C2E 0008 4302          move.l    8(A6),D6
                    4303   ; //draws a rectangle. Left top corner: (x1,y1) length of sides = x2,y2
                    4304   ; int x_pos,y_pos;
                    4305   ; // draw horizontal edges
                    4306   ; for (x_pos = x; x_pos < x+x2; x_pos++)
00002706  2606      4307          move.l    D6,D3
                    4308   drawRect_1:
00002708  2006      4309          move.l    D6,D0
0000270A  D0AE 0010 4310          add.l     16(A6),D0
0000270E  B680      4311          cmp.l     D0,D3
00002710  6C00 002E 4312          bge       drawRect_3
                    4313   ; {
                    4314   ; putcharxy(x_pos,y,ch);
00002714  4885      4315          ext.w     D5
00002716  48C5      4316          ext.l     D5
00002718  2F05      4317          move.l    D5,-(A7)
0000271A  2F04      4318          move.l    D4,-(A7)
0000271C  2F03      4319          move.l    D3,-(A7)
0000271E  4E92      4320          jsr       (A2)
00002720  DEFC 000C 4321          add.w     #12,A7
                    4322   ; putcharxy(x_pos,y+y2-1,ch);
00002724  4885      4323          ext.w     D5
00002726  48C5      4324          ext.l     D5
00002728  2F05      4325          move.l    D5,-(A7)
0000272A  2204      4326          move.l    D4,D1
0000272C  D2AE 0014 4327          add.l     20(A6),D1
00002730  5381      4328          subq.l    #1,D1
00002732  2F01      4329          move.l    D1,-(A7)
00002734  2F03      4330          move.l    D3,-(A7)
00002736  4E92      4331          jsr       (A2)
00002738  DEFC 000C 4332          add.w     #12,A7
0000273C  5283      4333          addq.l    #1,D3
0000273E  60C8      4334          bra       drawRect_1
                    4335   drawRect_3:
                    4336   ; }
                    4337   ; // draw vertial edges
                    4338   ; for (y_pos = y; y_pos < y+y2-1; y_pos++)
00002740  2404      4339          move.l    D4,D2
                    4340   drawRect_4:
00002742  2004      4341          move.l    D4,D0
00002744  D0AE 0014 4342          add.l     20(A6),D0
00002748  5380      4343          subq.l    #1,D0
0000274A  B480      4344          cmp.l     D0,D2
0000274C  6C00 002E 4345          bge       drawRect_6
                    4346   ; {
                    4347   ; putcharxy(x,y_pos,ch);
00002750  4885      4348          ext.w     D5
00002752  48C5      4349          ext.l     D5
00002754  2F05      4350          move.l    D5,-(A7)
00002756  2F02      4351          move.l    D2,-(A7)
00002758  2F06      4352          move.l    D6,-(A7)
0000275A  4E92      4353          jsr       (A2)
0000275C  DEFC 000C 4354          add.w     #12,A7
                    4355   ; putcharxy(x+x2-1,y_pos,ch);
00002760  4885      4356          ext.w     D5
00002762  48C5      4357          ext.l     D5
00002764  2F05      4358          move.l    D5,-(A7)
00002766  2F02      4359          move.l    D2,-(A7)
00002768  2206      4360          move.l    D6,D1
0000276A  D2AE 0010 4361          add.l     16(A6),D1
0000276E  5381      4362          subq.l    #1,D1
00002770  2F01      4363          move.l    D1,-(A7)
00002772  4E92      4364          jsr       (A2)
00002774  DEFC 000C 4365          add.w     #12,A7
00002778  5282      4366          addq.l    #1,D2
0000277A  60C6      4367          bra       drawRect_4
                    4368   drawRect_6:
0000277C  4CDF 047C 4369          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
00002780  4E5E      4370          unlk      A6
00002782  4E75      4371          rts
                    4372   ; }
                    4373   ; }
                    4374   ; void initSnake()
                    4375   ; {
                    4376   _initSnake:
                    4377   ; Snake.speed          = INITIAL_SNAKE_SPEED ;         
00002784  23FC 0000 4378          move.l    #2,_Snake+16390.L
00002788  0002 0B00 
0000278C  455C      
                    4379   ; Snake.speed_increase = SNAKE_SPEED_INCREASE;
0000278E  23FC 0000 4380          move.l    #1,_Snake+16394.L
00002792  0001 0B00 
00002796  4560      
00002798  4E75      4381          rts
                    4382   ; }
                    4383   ; void drawSnake()
                    4384   ; {
                    4385   _drawSnake:
0000279A  48E7 2020 4386          movem.l   D2/A2,-(A7)
0000279E  45F9 0B00 4387          lea       _Snake.L,A2
000027A2  0556      
                    4388   ; int i;
                    4389   ; for(i = 0; i < Snake.length; i++)
000027A4  4282      4390          clr.l     D2
                    4391   drawSnake_1:
000027A6  B4AA 4000 4392          cmp.l     16384(A2),D2
000027AA  6C24      4393          bge.s     drawSnake_3
                    4394   ; {
                    4395   ; putcharxy(Snake.xy[i].x, Snake.xy[i].y,SNAKE);
000027AC  4878 0053 4396          pea       83
000027B0  2202      4397          move.l    D2,D1
000027B2  E789      4398          lsl.l     #3,D1
000027B4  41F2 1800 4399          lea       0(A2,D1.L),A0
000027B8  2F28 0004 4400          move.l    4(A0),-(A7)
000027BC  2202      4401          move.l    D2,D1
000027BE  E789      4402          lsl.l     #3,D1
000027C0  2F32 1800 4403          move.l    0(A2,D1.L),-(A7)
000027C4  4EB8 22D6 4404          jsr       _putcharxy
000027C8  DEFC 000C 4405          add.w     #12,A7
000027CC  5282      4406          addq.l    #1,D2
000027CE  60D6      4407          bra       drawSnake_1
                    4408   drawSnake_3:
000027D0  4CDF 0404 4409          movem.l   (A7)+,D2/A2
000027D4  4E75      4410          rts
                    4411   ; }
                    4412   ; }
                    4413   ; void drawFood()
                    4414   ; {
                    4415   _drawFood:
                    4416   ; putcharxy(Snake.food.x, Snake.food.y,FOOD);
000027D6  4878 0040 4417          pea       64
000027DA  2F39 0B00 4418          move.l    _Snake+16402.L,-(A7)
000027DE  4568      
000027E0  2F39 0B00 4419          move.l    _Snake+16398.L,-(A7)
000027E4  4564      
000027E6  4EB8 22D6 4420          jsr       _putcharxy
000027EA  DEFC 000C 4421          add.w     #12,A7
000027EE  4E75      4422          rts
                    4423   ; }
                    4424   ; void moveSnake()//remove tail, move array, add new head based on direction
                    4425   ; {
                    4426   _moveSnake:
000027F0  48E7 3820 4427          movem.l   D2/D3/D4/A2,-(A7)
000027F4  45F9 0B00 4428          lea       _Snake.L,A2
000027F8  0556      
                    4429   ; int i;
                    4430   ; int x;
                    4431   ; int y;
                    4432   ; x = Snake.xy[0].x;
000027FA  2612      4433          move.l    (A2),D3
                    4434   ; y = Snake.xy[0].y;
000027FC  242A 0004 4435          move.l    4(A2),D2
                    4436   ; //saves initial head for direction determination
                    4437   ; putcharxy(Snake.xy[Snake.length-1].x, Snake.xy[Snake.length-1].y,' ');
00002800  4878 0020 4438          pea       32
00002804  222A 4000 4439          move.l    16384(A2),D1
00002808  5381      4440          subq.l    #1,D1
0000280A  E789      4441          lsl.l     #3,D1
0000280C  41F2 1800 4442          lea       0(A2,D1.L),A0
00002810  2F28 0004 4443          move.l    4(A0),-(A7)
00002814  222A 4000 4444          move.l    16384(A2),D1
00002818  5381      4445          subq.l    #1,D1
0000281A  E789      4446          lsl.l     #3,D1
0000281C  2F32 1800 4447          move.l    0(A2,D1.L),-(A7)
00002820  4EB8 22D6 4448          jsr       _putcharxy
00002824  DEFC 000C 4449          add.w     #12,A7
                    4450   ; for(i = Snake.length; i > 1; i--)
00002828  282A 4000 4451          move.l    16384(A2),D4
                    4452   moveSnake_1:
0000282C  0C84 0000 4453          cmp.l     #1,D4
00002830  0001      
00002832  6F00 0022 4454          ble       moveSnake_3
                    4455   ; {
                    4456   ; Snake.xy[i-1] = Snake.xy[i-2];
00002836  200A      4457          move.l    A2,D0
00002838  2204      4458          move.l    D4,D1
0000283A  5381      4459          subq.l    #1,D1
0000283C  E789      4460          lsl.l     #3,D1
0000283E  D081      4461          add.l     D1,D0
00002840  2040      4462          move.l    D0,A0
00002842  200A      4463          move.l    A2,D0
00002844  2204      4464          move.l    D4,D1
00002846  5581      4465          subq.l    #2,D1
00002848  E789      4466          lsl.l     #3,D1
0000284A  D081      4467          add.l     D1,D0
0000284C  2240      4468          move.l    D0,A1
0000284E  20D9      4469          move.l    (A1)+,(A0)+
00002850  20D9      4470          move.l    (A1)+,(A0)+
00002852  5384      4471          subq.l    #1,D4
00002854  60D6      4472          bra       moveSnake_1
                    4473   moveSnake_3:
                    4474   ; }
                    4475   ; //moves the snake array to the right
                    4476   ; switch (Snake.direction)
00002856  302A 4004 4477          move.w    16388(A2),D0
0000285A  48C0      4478          ext.l     D0
0000285C  0C80 0000 4479          cmp.l     #4,D0
00002860  0004      
00002862  6400 0046 4480          bhs       moveSnake_4
00002866  E380      4481          asl.l     #1,D0
00002868  303B 0806 4482          move.w    moveSnake_6(PC,D0.L),D0
0000286C  4EFB 0002 4483          jmp       moveSnake_6(PC,D0.W)
                    4484   moveSnake_6:
00002870  0008      4485          dc.w      moveSnake_7-moveSnake_6
00002872  0014      4486          dc.w      moveSnake_8-moveSnake_6
00002874  0020      4487          dc.w      moveSnake_9-moveSnake_6
00002876  002C      4488          dc.w      moveSnake_10-moveSnake_6
                    4489   moveSnake_7:
                    4490   ; {
                    4491   ; case north:
                    4492   ; if (y > 0)  { y--; }
00002878  0C82 0000 4493          cmp.l     #0,D2
0000287C  0000      
0000287E  6F02      4494          ble.s     moveSnake_12
00002880  5382      4495          subq.l    #1,D2
                    4496   moveSnake_12:
                    4497   ; break;
00002882  6026      4498          bra.s     moveSnake_5
                    4499   moveSnake_8:
                    4500   ; case south:
                    4501   ; if (y < (NUM_VGA_ROWS-1)) { y++; }
00002884  0C82 0000 4502          cmp.l     #39,D2
00002888  0027      
0000288A  6C02      4503          bge.s     moveSnake_14
0000288C  5282      4504          addq.l    #1,D2
                    4505   moveSnake_14:
                    4506   ; break;
0000288E  601A      4507          bra.s     moveSnake_5
                    4508   moveSnake_9:
                    4509   ; case west:
                    4510   ; if (x > 0) { x--; }
00002890  0C83 0000 4511          cmp.l     #0,D3
00002894  0000      
00002896  6F02      4512          ble.s     moveSnake_16
00002898  5383      4513          subq.l    #1,D3
                    4514   moveSnake_16:
                    4515   ; break;
0000289A  600E      4516          bra.s     moveSnake_5
                    4517   moveSnake_10:
                    4518   ; case east:
                    4519   ; if (x < (NUM_VGA_COLUMNS-1))  { x++; }
0000289C  0C83 0000 4520          cmp.l     #79,D3
000028A0  004F      
000028A2  6C02      4521          bge.s     moveSnake_18
000028A4  5283      4522          addq.l    #1,D3
                    4523   moveSnake_18:
                    4524   ; break;
000028A6  6000 0002 4525          bra       moveSnake_5
                    4526   moveSnake_4:
                    4527   ; default:
                    4528   ; break;
                    4529   moveSnake_5:
                    4530   ; }
                    4531   ; //adds new snake head
                    4532   ; Snake.xy[0].x = x;
000028AA  2483      4533          move.l    D3,(A2)
                    4534   ; Snake.xy[0].y = y;
000028AC  2542 0004 4535          move.l    D2,4(A2)
                    4536   ; waiting_for_direction_to_be_implemented = 0;
000028B0  42B9 0B00 4537          clr.l     _waiting_for_direction_to_be_imp.L
000028B4  456C      
                    4538   ; putcharxy(Snake.xy[0].x,Snake.xy[0].y,SNAKE);
000028B6  4878 0053 4539          pea       83
000028BA  2F2A 0004 4540          move.l    4(A2),-(A7)
000028BE  2F12      4541          move.l    (A2),-(A7)
000028C0  4EB8 22D6 4542          jsr       _putcharxy
000028C4  DEFC 000C 4543          add.w     #12,A7
000028C8  4CDF 041C 4544          movem.l   (A7)+,D2/D3/D4/A2
000028CC  4E75      4545          rts
                    4546   ; }
                    4547   ; /* Compute x mod y using binary long division. */
                    4548   ; int mod_bld(int x, int y)
                    4549   ; {
                    4550   _mod_bld:
000028CE  4E56 0000 4551          link      A6,#0
000028D2  48E7 3000 4552          movem.l   D2/D3,-(A7)
                    4553   ; int modulus = x, divisor = y;
000028D6  262E 0008 4554          move.l    8(A6),D3
000028DA  242E 000C 4555          move.l    12(A6),D2
                    4556   ; while (divisor <= modulus && divisor <= 16384)
                    4557   mod_bld_1:
000028DE  B483      4558          cmp.l     D3,D2
000028E0  6E0C      4559          bgt.s     mod_bld_3
000028E2  0C82 0000 4560          cmp.l     #16384,D2
000028E6  4000      
000028E8  6E04      4561          bgt.s     mod_bld_3
                    4562   ; divisor <<= 1;
000028EA  E382      4563          asl.l     #1,D2
000028EC  60F0      4564          bra       mod_bld_1
                    4565   mod_bld_3:
                    4566   ; while (modulus >= y) {
                    4567   mod_bld_4:
000028EE  B6AE 000C 4568          cmp.l     12(A6),D3
000028F2  6D0C      4569          blt.s     mod_bld_6
                    4570   ; while (divisor > modulus)
                    4571   mod_bld_7:
000028F4  B483      4572          cmp.l     D3,D2
000028F6  6F04      4573          ble.s     mod_bld_9
                    4574   ; divisor >>= 1;
000028F8  E282      4575          asr.l     #1,D2
000028FA  60F8      4576          bra       mod_bld_7
                    4577   mod_bld_9:
                    4578   ; modulus -= divisor;
000028FC  9682      4579          sub.l     D2,D3
000028FE  60EE      4580          bra       mod_bld_4
                    4581   mod_bld_6:
                    4582   ; }
                    4583   ; return modulus;
00002900  2003      4584          move.l    D3,D0
00002902  4CDF 000C 4585          movem.l   (A7)+,D2/D3
00002906  4E5E      4586          unlk      A6
00002908  4E75      4587          rts
                    4588   ; }
                    4589   ; void generateFood()
                    4590   ; {
                    4591   _generateFood:
0000290A  48E7 3020 4592          movem.l   D2/D3/A2,-(A7)
0000290E  45F9 0B00 4593          lea       _Snake.L,A2
00002912  0556      
                    4594   ; int bol;
                    4595   ; int i;
                    4596   ; static int firsttime = 1;
                    4597   ; //removes last food
                    4598   ; if (!firsttime) {
00002914  4AB9 0000 4599          tst.l     generateFood_firsttime.L
00002918  46C8      
0000291A  6616      4600          bne.s     generateFood_2
                    4601   ; putcharxy(Snake.food.x,Snake.food.y,' ');
0000291C  4878 0020 4602          pea       32
00002920  2F2A 4012 4603          move.l    16402(A2),-(A7)
00002924  2F2A 400E 4604          move.l    16398(A2),-(A7)
00002928  4EB8 22D6 4605          jsr       _putcharxy
0000292C  DEFC 000C 4606          add.w     #12,A7
00002930  6006      4607          bra.s     generateFood_3
                    4608   generateFood_2:
                    4609   ; } else {
                    4610   ; firsttime = 0;
00002932  42B9 0000 4611          clr.l     generateFood_firsttime.L
00002936  46C8      
                    4612   generateFood_3:
                    4613   ; }
                    4614   ; do
                    4615   ; {
                    4616   generateFood_4:
                    4617   ; bol = 0;
00002938  4283      4618          clr.l     D3
                    4619   ; //pseudo-randomly set food location
                    4620   ; //use clock instead of random function that is
                    4621   ; //not implemented in ide68k
                    4622   ; Snake.food.x = 3+ mod_bld(((clock()& 0xFFF0) >> 4),screensize.x-6); 
0000293A  7003      4623          moveq     #3,D0
0000293C  4880      4624          ext.w     D0
0000293E  48C0      4625          ext.l     D0
00002940  2F00      4626          move.l    D0,-(A7)
00002942  2039 0000 4627          move.l    _screensize.L,D0
00002946  46C0      
00002948  5D80      4628          subq.l    #6,D0
0000294A  2F00      4629          move.l    D0,-(A7)
0000294C  2F01      4630          move.l    D1,-(A7)
0000294E  4EB8 23F8 4631          jsr       _clock
00002952  221F      4632          move.l    (A7)+,D1
00002954  C0BC 0000 4633          and.l     #65520,D0
00002958  FFF0      
0000295A  E880      4634          asr.l     #4,D0
0000295C  2F00      4635          move.l    D0,-(A7)
0000295E  4EB8 28CE 4636          jsr       _mod_bld
00002962  504F      4637          addq.w    #8,A7
00002964  2200      4638          move.l    D0,D1
00002966  201F      4639          move.l    (A7)+,D0
00002968  D081      4640          add.l     D1,D0
0000296A  2540 400E 4641          move.l    D0,16398(A2)
                    4642   ; Snake.food.y = 3+ mod_bld(clock()& 0xFFFF,screensize.y-6); 
0000296E  7003      4643          moveq     #3,D0
00002970  4880      4644          ext.w     D0
00002972  48C0      4645          ext.l     D0
00002974  2F00      4646          move.l    D0,-(A7)
00002976  2F00      4647          move.l    D0,-(A7)
00002978  2039 0000 4648          move.l    _screensize+4.L,D0
0000297C  46C4      
0000297E  5D80      4649          subq.l    #6,D0
00002980  2F00      4650          move.l    D0,-(A7)
00002982  2F01      4651          move.l    D1,-(A7)
00002984  4EB8 23F8 4652          jsr       _clock
00002988  221F      4653          move.l    (A7)+,D1
0000298A  C0BC 0000 4654          and.l     #65535,D0
0000298E  FFFF      
00002990  2F00      4655          move.l    D0,-(A7)
00002992  4EB8 28CE 4656          jsr       _mod_bld
00002996  504F      4657          addq.w    #8,A7
00002998  2200      4658          move.l    D0,D1
0000299A  201F      4659          move.l    (A7)+,D0
0000299C  201F      4660          move.l    (A7)+,D0
0000299E  D081      4661          add.l     D1,D0
000029A0  2540 4012 4662          move.l    D0,16402(A2)
                    4663   ; for(i = 0; i < Snake.length; i++)
000029A4  4282      4664          clr.l     D2
                    4665   generateFood_6:
000029A6  B4AA 4000 4666          cmp.l     16384(A2),D2
000029AA  6C26      4667          bge.s     generateFood_8
                    4668   ; {
                    4669   ; if (Snake.food.x == Snake.xy[i].x && Snake.food.y == Snake.xy[i].y) {
000029AC  2002      4670          move.l    D2,D0
000029AE  E788      4671          lsl.l     #3,D0
000029B0  222A 400E 4672          move.l    16398(A2),D1
000029B4  B2B2 0800 4673          cmp.l     0(A2,D0.L),D1
000029B8  6614      4674          bne.s     generateFood_9
000029BA  2002      4675          move.l    D2,D0
000029BC  E788      4676          lsl.l     #3,D0
000029BE  41F2 0800 4677          lea       0(A2,D0.L),A0
000029C2  202A 4012 4678          move.l    16402(A2),D0
000029C6  B0A8 0004 4679          cmp.l     4(A0),D0
000029CA  6602      4680          bne.s     generateFood_9
                    4681   ; bol = 1; //resets loop if collision detected
000029CC  7601      4682          moveq     #1,D3
                    4683   generateFood_9:
000029CE  5282      4684          addq.l    #1,D2
000029D0  60D4      4685          bra       generateFood_6
                    4686   generateFood_8:
000029D2  4A83      4687          tst.l     D3
000029D4  6600 FF62 4688          bne       generateFood_4
                    4689   ; }
                    4690   ; }
                    4691   ; } while (bol);//while colliding with snake
                    4692   ; drawFood();
000029D8  4EB8 27D6 4693          jsr       _drawFood
000029DC  4CDF 040C 4694          movem.l   (A7)+,D2/D3/A2
000029E0  4E75      4695          rts
                    4696   ; }
                    4697   ; int getKeypress()
                    4698   ; {
                    4699   _getKeypress:
000029E2  48E7 0030 4700          movem.l   A2/A3,-(A7)
000029E6  45F9 0B00 4701          lea       _Snake.L,A2
000029EA  0556      
000029EC  47F9 0B00 4702          lea       _waiting_for_direction_to_be_imp.L,A3
000029F0  456C      
                    4703   ; if (kbhit()) {
000029F2  4EB8 0B24 4704          jsr       _kbhit
000029F6  4A80      4705          tst.l     D0
000029F8  6700 00DE 4706          beq       getKeypress_4
                    4707   ; switch (_getch())
000029FC  4EB8 0B68 4708          jsr       __getch
00002A00  0C80 0000 4709          cmp.l     #113,D0
00002A04  0071      
00002A06  6700 00C8 4710          beq       getKeypress_10
00002A0A  6E28      4711          bgt.s     getKeypress_12
00002A0C  0C80 0000 4712          cmp.l     #100,D0
00002A10  0064      
00002A12  6700 0096 4713          beq       getKeypress_8
00002A16  6E0E      4714          bgt.s     getKeypress_13
00002A18  0C80 0000 4715          cmp.l     #97,D0
00002A1C  0061      
00002A1E  6700 006A 4716          beq       getKeypress_7
00002A22  6000 00B4 4717          bra       getKeypress_3
                    4718   getKeypress_13:
00002A26  0C80 0000 4719          cmp.l     #112,D0
00002A2A  0070      
00002A2C  6700 009C 4720          beq       getKeypress_9
00002A30  6000 00A6 4721          bra       getKeypress_3
                    4722   getKeypress_12:
00002A34  0C80 0000 4723          cmp.l     #119,D0
00002A38  0077      
00002A3A  6710      4724          beq.s     getKeypress_5
00002A3C  6E00 009A 4725          bgt       getKeypress_3
00002A40  0C80 0000 4726          cmp.l     #115,D0
00002A44  0073      
00002A46  6724      4727          beq.s     getKeypress_6
00002A48  6000 008E 4728          bra       getKeypress_3
                    4729   getKeypress_5:
                    4730   ; {
                    4731   ; case 'w':
                    4732   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != south)){
00002A4C  4A93      4733          tst.l     (A3)
00002A4E  6618      4734          bne.s     getKeypress_14
00002A50  302A 4004 4735          move.w    16388(A2),D0
00002A54  48C0      4736          ext.l     D0
00002A56  0C80 0000 4737          cmp.l     #1,D0
00002A5A  0001      
00002A5C  670A      4738          beq.s     getKeypress_14
                    4739   ; Snake.direction = north;
00002A5E  426A 4004 4740          clr.w     16388(A2)
                    4741   ; waiting_for_direction_to_be_implemented = 1;
00002A62  26BC 0000 4742          move.l    #1,(A3)
00002A66  0001      
                    4743   getKeypress_14:
                    4744   ; }
                    4745   ; break;
00002A68  6000 006E 4746          bra       getKeypress_4
                    4747   getKeypress_6:
                    4748   ; case 's':
                    4749   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != north)){
00002A6C  4A93      4750          tst.l     (A3)
00002A6E  6616      4751          bne.s     getKeypress_16
00002A70  302A 4004 4752          move.w    16388(A2),D0
00002A74  48C0      4753          ext.l     D0
00002A76  4A80      4754          tst.l     D0
00002A78  670C      4755          beq.s     getKeypress_16
                    4756   ; Snake.direction = south;
00002A7A  357C 0001 4757          move.w    #1,16388(A2)
00002A7E  4004      
                    4758   ; waiting_for_direction_to_be_implemented = 1;
00002A80  26BC 0000 4759          move.l    #1,(A3)
00002A84  0001      
                    4760   getKeypress_16:
                    4761   ; }
                    4762   ; break;
00002A86  6000 0050 4763          bra       getKeypress_4
                    4764   getKeypress_7:
                    4765   ; case 'a':
                    4766   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != east)){
00002A8A  4A93      4767          tst.l     (A3)
00002A8C  661A      4768          bne.s     getKeypress_18
00002A8E  302A 4004 4769          move.w    16388(A2),D0
00002A92  48C0      4770          ext.l     D0
00002A94  0C80 0000 4771          cmp.l     #3,D0
00002A98  0003      
00002A9A  670C      4772          beq.s     getKeypress_18
                    4773   ; Snake.direction = west;
00002A9C  357C 0002 4774          move.w    #2,16388(A2)
00002AA0  4004      
                    4775   ; waiting_for_direction_to_be_implemented = 1;
00002AA2  26BC 0000 4776          move.l    #1,(A3)
00002AA6  0001      
                    4777   getKeypress_18:
                    4778   ; }
                    4779   ; break;
00002AA8  602E      4780          bra.s     getKeypress_4
                    4781   getKeypress_8:
                    4782   ; case 'd':
                    4783   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != west)){
00002AAA  4A93      4784          tst.l     (A3)
00002AAC  661A      4785          bne.s     getKeypress_20
00002AAE  302A 4004 4786          move.w    16388(A2),D0
00002AB2  48C0      4787          ext.l     D0
00002AB4  0C80 0000 4788          cmp.l     #2,D0
00002AB8  0002      
00002ABA  670C      4789          beq.s     getKeypress_20
                    4790   ; Snake.direction = east;
00002ABC  357C 0003 4791          move.w    #3,16388(A2)
00002AC0  4004      
                    4792   ; waiting_for_direction_to_be_implemented = 1;
00002AC2  26BC 0000 4793          move.l    #1,(A3)
00002AC6  0001      
                    4794   getKeypress_20:
                    4795   ; }
                    4796   ; break;
00002AC8  600E      4797          bra.s     getKeypress_4
                    4798   getKeypress_9:
                    4799   ; case 'p':
                    4800   ; _getch();
00002ACA  4EB8 0B68 4801          jsr       __getch
                    4802   ; break;
00002ACE  6008      4803          bra.s     getKeypress_4
                    4804   getKeypress_10:
                    4805   ; case 'q':
                    4806   ; gameOver();
00002AD0  4EB8 25A4 4807          jsr       _gameOver
                    4808   ; return 0;
00002AD4  4280      4809          clr.l     D0
00002AD6  6002      4810          bra.s     getKeypress_22
                    4811   getKeypress_3:
                    4812   ; default:
                    4813   ; //do nothing
                    4814   ; break;
                    4815   getKeypress_4:
                    4816   ; }
                    4817   ; }
                    4818   ; return 1;
00002AD8  7001      4819          moveq     #1,D0
                    4820   getKeypress_22:
00002ADA  4CDF 0C00 4821          movem.l   (A7)+,A2/A3
00002ADE  4E75      4822          rts
                    4823   ; }
                    4824   ; int detectCollision()//with self -> game over, food -> delete food add score (only head checks)
                    4825   ; // returns 0 for no collision, 1 for game over
                    4826   ; {
                    4827   _detectCollision:
00002AE0  48E7 3020 4828          movem.l   D2/D3/A2,-(A7)
00002AE4  45F9 0B00 4829          lea       _Snake.L,A2
00002AE8  0556      
                    4830   ; int i;
                    4831   ; int retval;
                    4832   ; retval = 0;
00002AEA  4283      4833          clr.l     D3
                    4834   ; if (Snake.xy[0].x == Snake.food.x && Snake.xy[0].y == Snake.food.y) {
00002AEC  2012      4835          move.l    (A2),D0
00002AEE  B0AA 400E 4836          cmp.l     16398(A2),D0
00002AF2  6600 0068 4837          bne       detectCollision_1
00002AF6  202A 0004 4838          move.l    4(A2),D0
00002AFA  B0AA 4012 4839          cmp.l     16402(A2),D0
00002AFE  6600 005C 4840          bne       detectCollision_1
                    4841   ; //detect collision with food
                    4842   ; Snake.length++;
00002B02  200A      4843          move.l    A2,D0
00002B04  0680 0000 4844          add.l     #16384,D0
00002B08  4000      
00002B0A  2040      4845          move.l    D0,A0
00002B0C  5290      4846          addq.l    #1,(A0)
                    4847   ; Snake.xy[Snake.length-1].x = Snake.xy[Snake.length-2].x;
00002B0E  202A 4000 4848          move.l    16384(A2),D0
00002B12  5580      4849          subq.l    #2,D0
00002B14  E788      4850          lsl.l     #3,D0
00002B16  222A 4000 4851          move.l    16384(A2),D1
00002B1A  5381      4852          subq.l    #1,D1
00002B1C  E789      4853          lsl.l     #3,D1
00002B1E  25B2 0800 4854          move.l    0(A2,D0.L),0(A2,D1.L)
00002B22  1800      
                    4855   ; Snake.xy[Snake.length-1].y = Snake.xy[Snake.length-2].y;
00002B24  202A 4000 4856          move.l    16384(A2),D0
00002B28  5580      4857          subq.l    #2,D0
00002B2A  E788      4858          lsl.l     #3,D0
00002B2C  41F2 0800 4859          lea       0(A2,D0.L),A0
00002B30  202A 4000 4860          move.l    16384(A2),D0
00002B34  5380      4861          subq.l    #1,D0
00002B36  E788      4862          lsl.l     #3,D0
00002B38  43F2 0800 4863          lea       0(A2,D0.L),A1
00002B3C  2368 0004 4864          move.l    4(A0),4(A1)
00002B40  0004      
                    4865   ; Snake.speed = Snake.speed + Snake.speed_increase;
00002B42  202A 4006 4866          move.l    16390(A2),D0
00002B46  D0AA 400A 4867          add.l     16394(A2),D0
00002B4A  2540 4006 4868          move.l    D0,16390(A2)
                    4869   ; generateFood();
00002B4E  4EB8 290A 4870          jsr       _generateFood
                    4871   ; score++;
00002B52  52B9 0B00 4872          addq.l    #1,_score.L
00002B56  0546      
                    4873   ; updateScore();
00002B58  4EB8 26A8 4874          jsr       _updateScore
                    4875   detectCollision_1:
                    4876   ; }
                    4877   ; for(i = 2; i < Snake.length; i++)
00002B5C  7402      4878          moveq     #2,D2
                    4879   detectCollision_3:
00002B5E  B4AA 4000 4880          cmp.l     16384(A2),D2
00002B62  6C28      4881          bge.s     detectCollision_5
                    4882   ; {
                    4883   ; //detects collision of the head
                    4884   ; if (Snake.xy[i].x == Snake.xy[0].x && Snake.xy[i].y == Snake.xy[0].y) {
00002B64  2002      4885          move.l    D2,D0
00002B66  E788      4886          lsl.l     #3,D0
00002B68  2232 0800 4887          move.l    0(A2,D0.L),D1
00002B6C  B292      4888          cmp.l     (A2),D1
00002B6E  6618      4889          bne.s     detectCollision_6
00002B70  2002      4890          move.l    D2,D0
00002B72  E788      4891          lsl.l     #3,D0
00002B74  41F2 0800 4892          lea       0(A2,D0.L),A0
00002B78  2028 0004 4893          move.l    4(A0),D0
00002B7C  B0AA 0004 4894          cmp.l     4(A2),D0
00002B80  6606      4895          bne.s     detectCollision_6
                    4896   ; gameOver();
00002B82  4EB8 25A4 4897          jsr       _gameOver
                    4898   ; retval = 1;
00002B86  7601      4899          moveq     #1,D3
                    4900   detectCollision_6:
00002B88  5282      4901          addq.l    #1,D2
00002B8A  60D2      4902          bra       detectCollision_3
                    4903   detectCollision_5:
                    4904   ; }
                    4905   ; }
                    4906   ; if (Snake.xy[0].x == 1 || Snake.xy[0].x == (screensize.x-1) || Snake.xy[0].y == 1 || Snake.xy[0].y == (screensize.y-2)) {
00002B8C  2012      4907          move.l    (A2),D0
00002B8E  0C80 0000 4908          cmp.l     #1,D0
00002B92  0001      
00002B94  6726      4909          beq.s     detectCollision_10
00002B96  2039 0000 4910          move.l    _screensize.L,D0
00002B9A  46C0      
00002B9C  5380      4911          subq.l    #1,D0
00002B9E  B092      4912          cmp.l     (A2),D0
00002BA0  671A      4913          beq.s     detectCollision_10
00002BA2  202A 0004 4914          move.l    4(A2),D0
00002BA6  0C80 0000 4915          cmp.l     #1,D0
00002BAA  0001      
00002BAC  670E      4916          beq.s     detectCollision_10
00002BAE  2039 0000 4917          move.l    _screensize+4.L,D0
00002BB2  46C4      
00002BB4  5580      4918          subq.l    #2,D0
00002BB6  B0AA 0004 4919          cmp.l     4(A2),D0
00002BBA  6606      4920          bne.s     detectCollision_8
                    4921   detectCollision_10:
                    4922   ; //collision with wall
                    4923   ; gameOver();
00002BBC  4EB8 25A4 4924          jsr       _gameOver
                    4925   ; retval = 1;
00002BC0  7601      4926          moveq     #1,D3
                    4927   detectCollision_8:
                    4928   ; }
                    4929   ; return retval;
00002BC2  2003      4930          move.l    D3,D0
00002BC4  4CDF 040C 4931          movem.l   (A7)+,D2/D3/A2
00002BC8  4E75      4932          rts
                    4933   ; }
                    4934   ; void mainloop()
                    4935   ; {
                    4936   _mainloop:
00002BCA  4E56 FFFC 4937          link      A6,#-4
00002BCE  2F02      4938          move.l    D2,-(A7)
                    4939   ; int current_time;
                    4940   ; int got_game_over;
                    4941   ; while(1){
                    4942   mainloop_1:
                    4943   ; if (!getKeypress()) { // getKeypress is zero when you press 'q'
00002BD0  4EB8 29E2 4944          jsr       _getKeypress
00002BD4  4A80      4945          tst.l     D0
00002BD6  6604      4946          bne.s     mainloop_4
                    4947   ; return;
00002BD8  6000 0042 4948          bra       mainloop_3
                    4949   mainloop_4:
                    4950   ; }
                    4951   ; current_time = clock();
00002BDC  4EB8 23F8 4952          jsr       _clock
00002BE0  2400      4953          move.l    D0,D2
                    4954   ; //printf("\r\nCurrent time: %d",current_time);
                    4955   ; if (current_time >= ((MILLISECONDS_PER_SEC/Snake.speed) + timer)) {
00002BE2  4878 03E8 4956          pea       1000
00002BE6  2F39 0B00 4957          move.l    _Snake+16390.L,-(A7)
00002BEA  455C      
00002BEC  4EB9 0000 4958          jsr       LDIV
00002BF0  2FB2      
00002BF2  2017      4959          move.l    (A7),D0
00002BF4  504F      4960          addq.w    #8,A7
00002BF6  D0B9 0B00 4961          add.l     _timer.L,D0
00002BFA  054A      
00002BFC  B480      4962          cmp.l     D0,D2
00002BFE  6D1A      4963          blt.s     mainloop_7
                    4964   ; moveSnake(); //draws new snake position
00002C00  4EB8 27F0 4965          jsr       _moveSnake
                    4966   ; got_game_over = detectCollision();
00002C04  4EB8 2AE0 4967          jsr       _detectCollision
00002C08  2D40 FFFC 4968          move.l    D0,-4(A6)
                    4969   ; if (got_game_over) {
00002C0C  4AAE FFFC 4970          tst.l     -4(A6)
00002C10  6702      4971          beq.s     mainloop_9
                    4972   ; break;
00002C12  6008      4973          bra.s     mainloop_3
                    4974   mainloop_9:
                    4975   ; }
                    4976   ; timer = current_time;
00002C14  23C2 0B00 4977          move.l    D2,_timer.L
00002C18  054A      
                    4978   mainloop_7:
00002C1A  60B4      4979          bra       mainloop_1
                    4980   mainloop_3:
00002C1C  241F      4981          move.l    (A7)+,D2
00002C1E  4E5E      4982          unlk      A6
00002C20  4E75      4983          rts
                    4984   ; }
                    4985   ; }
                    4986   ; }
                    4987   ; void snake_main()
                    4988   ; {   
                    4989   _snake_main:
00002C22  2F0A      4990          move.l    A2,-(A7)
00002C24  45F9 0B00 4991          lea       _Snake.L,A2
00002C28  0556      
                    4992   ; clock_counter = 0;
00002C2A  42B9 0B00 4993          clr.l     _clock_counter.L
00002C2E  054E      
                    4994   ; score = 0;
00002C30  42B9 0B00 4995          clr.l     _score.L
00002C34  0546      
                    4996   ; vga_color = 2;
00002C36  23FC 0000 4997          move.l    #2,_vga_color.L
00002C3A  0002 0B00 
00002C3E  0552      
                    4998   ; waiting_for_direction_to_be_implemented = 0;
00002C40  42B9 0B00 4999          clr.l     _waiting_for_direction_to_be_imp.L
00002C44  456C      
                    5000   ; Snake.xy[0].x = 4;
00002C46  24BC 0000 5001          move.l    #4,(A2)
00002C4A  0004      
                    5002   ; Snake.xy[0].y = 3;
00002C4C  257C 0000 5003          move.l    #3,4(A2)
00002C50  0003 0004 
                    5004   ; Snake.xy[1].x = 3;
00002C54  257C 0000 5005          move.l    #3,8(A2)
00002C58  0003 0008 
                    5006   ; Snake.xy[1].y = 3;
00002C5C  257C 0000 5007          move.l    #3,12(A2)
00002C60  0003 000C 
                    5008   ; Snake.xy[2].x = 2;
00002C64  257C 0000 5009          move.l    #2,16(A2)
00002C68  0002 0010 
                    5010   ; Snake.xy[2].y = 3;
00002C6C  257C 0000 5011          move.l    #3,20(A2)
00002C70  0003 0014 
                    5012   ; Snake.length = INITIAL_SNAKE_LENGTH;
00002C74  257C 0000 5013          move.l    #3,16384(A2)
00002C78  0003 4000 
                    5014   ; Snake.direction = east;
00002C7C  357C 0003 5015          move.w    #3,16388(A2)
00002C80  4004      
                    5016   ; set_vga_control_reg(0x82);
00002C82  4878 0082 5017          pea       130
00002C86  4EB8 23D4 5018          jsr       _set_vga_control_reg
00002C8A  584F      5019          addq.w    #4,A7
                    5020   ; initSnake();
00002C8C  4EB8 2784 5021          jsr       _initSnake
                    5022   ; cls();
00002C90  4EB8 2370 5023          jsr       _cls
                    5024   ; drawRect(1,1,screensize.x-1,screensize.y-2, BORDER);
00002C94  4878 0023 5025          pea       35
00002C98  2239 0000 5026          move.l    _screensize+4.L,D1
00002C9C  46C4      
00002C9E  5581      5027          subq.l    #2,D1
00002CA0  2F01      5028          move.l    D1,-(A7)
00002CA2  2239 0000 5029          move.l    _screensize.L,D1
00002CA6  46C0      
00002CA8  5381      5030          subq.l    #1,D1
00002CAA  2F01      5031          move.l    D1,-(A7)
00002CAC  4878 0001 5032          pea       1
00002CB0  4878 0001 5033          pea       1
00002CB4  4EB8 26EA 5034          jsr       _drawRect
00002CB8  DEFC 0014 5035          add.w     #20,A7
                    5036   ; drawSnake();
00002CBC  4EB8 279A 5037          jsr       _drawSnake
                    5038   ; generateFood();
00002CC0  4EB8 290A 5039          jsr       _generateFood
                    5040   ; drawFood();
00002CC4  4EB8 27D6 5041          jsr       _drawFood
                    5042   ; timer = clock();
00002CC8  4EB8 23F8 5043          jsr       _clock
00002CCC  23C0 0B00 5044          move.l    D0,_timer.L
00002CD0  054A      
                    5045   ; updateScore();
00002CD2  4EB8 26A8 5046          jsr       _updateScore
                    5047   ; mainloop();
00002CD6  4EB8 2BCA 5048          jsr       _mainloop
00002CDA  245F      5049          move.l    (A7)+,A2
00002CDC  4E75      5050          rts
                    5051   ; }
                    5052   ; void main(void)
                    5053   ; {
                    5054   _main:
00002CDE  4E56 FFF4 5055          link      A6,#-12
00002CE2  48E7 3030 5056          movem.l   D2/D3/A2/A3,-(A7)
00002CE6  45F8 0A30 5057          lea       _InstallExceptionHandler.L,A2
00002CEA  47F9 0000 5058          lea       _printf.L,A3
00002CEE  322C      
                    5059   ; char c ;
                    5060   ; int i, j ;
                    5061   ; char *BugMessage = "DE1-68k Bug V1.77";
00002CF0  41F9 0000 5062          lea       @m68kde~1_115.L,A0
00002CF4  4646      
00002CF6  2608      5063          move.l    A0,D3
                    5064   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002CF8  41F9 0000 5065          lea       @m68kde~1_116.L,A0
00002CFC  4658      
00002CFE  2D48 FFFC 5066          move.l    A0,-4(A6)
                    5067   ; KillAllBreakPoints() ;
00002D02  4EB8 1C3E 5068          jsr       _KillAllBreakPoints
                    5069   ; i = x = y = z = PortA_Count = 0;
00002D06  42B9 0B00 5070          clr.l     _PortA_Count.L
00002D0A  00D4      
00002D0C  42B9 0B00 5071          clr.l     _z.L
00002D10  00D0      
00002D12  42B9 0B00 5072          clr.l     _y.L
00002D16  00CC      
00002D18  42B9 0B00 5073          clr.l     _x.L
00002D1C  00C8      
00002D1E  4282      5074          clr.l     D2
                    5075   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002D20  42B9 0B00 5076          clr.l     _GoFlag.L
00002D24  00DC      
00002D26  42B9 0B00 5077          clr.l     _Trace.L
00002D2A  00D8      
                    5078   ; Echo = 1 ;
00002D2C  23FC 0000 5079          move.l    #1,_Echo.L
00002D30  0001 0B00 
00002D34  00E0      
                    5080   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002D36  42B9 0B00 5081          clr.l     _d7.L
00002D3A  0100      
00002D3C  42B9 0B00 5082          clr.l     _d6.L
00002D40  00FC      
00002D42  42B9 0B00 5083          clr.l     _d5.L
00002D46  00F8      
00002D48  42B9 0B00 5084          clr.l     _d4.L
00002D4C  00F4      
00002D4E  42B9 0B00 5085          clr.l     _d3.L
00002D52  00F0      
00002D54  42B9 0B00 5086          clr.l     _d2.L
00002D58  00EC      
00002D5A  42B9 0B00 5087          clr.l     _d1.L
00002D5E  00E8      
00002D60  42B9 0B00 5088          clr.l     _d0.L
00002D64  00E4      
                    5089   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002D66  42B9 0B00 5090          clr.l     _a6.L
00002D6A  011C      
00002D6C  42B9 0B00 5091          clr.l     _a5.L
00002D70  0118      
00002D72  42B9 0B00 5092          clr.l     _a4.L
00002D76  0114      
00002D78  42B9 0B00 5093          clr.l     _a3.L
00002D7C  0110      
00002D7E  42B9 0B00 5094          clr.l     _a2.L
00002D82  010C      
00002D84  42B9 0B00 5095          clr.l     _a1.L
00002D88  0108      
00002D8A  42B9 0B00 5096          clr.l     _a0.L
00002D8E  0104      
                    5097   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002D90  23FC 0800 5098          move.l    #134217728,_PC.L
00002D94  0000 0B00 
00002D98  0120      
00002D9A  23FC 0C00 5099          move.l    #201326592,_SSP.L
00002D9E  0000 0B00 
00002DA2  0124      
00002DA4  23FC 0C00 5100          move.l    #201326592,_USP.L
00002DA8  0000 0B00 
00002DAC  0128      
                    5101   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002DAE  33FC 2000 5102          move.w    #8192,_SR.L
00002DB2  0B00 012C 
                    5103   ; // Initialise Breakpoint variables
                    5104   ; for(i = 0; i < 8; i++)  {
00002DB6  4282      5105          clr.l     D2
                    5106   main_1:
00002DB8  0C82 0000 5107          cmp.l     #8,D2
00002DBC  0008      
00002DBE  6C00 004C 5108          bge       main_3
                    5109   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002DC2  2002      5110          move.l    D2,D0
00002DC4  E588      5111          lsl.l     #2,D0
00002DC6  41F9 0B00 5112          lea       _BreakPointAddress.L,A0
00002DCA  012E      
00002DCC  42B0 0800 5113          clr.l     0(A0,D0.L)
                    5114   ; WatchPointAddress[i] = 0 ;
00002DD0  2002      5115          move.l    D2,D0
00002DD2  E588      5116          lsl.l     #2,D0
00002DD4  41F9 0B00 5117          lea       _WatchPointAddress.L,A0
00002DD8  0182      
00002DDA  42B0 0800 5118          clr.l     0(A0,D0.L)
                    5119   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002DDE  2002      5120          move.l    D2,D0
00002DE0  E388      5121          lsl.l     #1,D0
00002DE2  41F9 0B00 5122          lea       _BreakPointInstruction.L,A0
00002DE6  014E      
00002DE8  4270 0800 5123          clr.w     0(A0,D0.L)
                    5124   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002DEC  2002      5125          move.l    D2,D0
00002DEE  E588      5126          lsl.l     #2,D0
00002DF0  41F9 0B00 5127          lea       _BreakPointSetOrCleared.L,A0
00002DF4  015E      
00002DF6  42B0 0800 5128          clr.l     0(A0,D0.L)
                    5129   ; WatchPointSetOrCleared[i] = 0;
00002DFA  2002      5130          move.l    D2,D0
00002DFC  E588      5131          lsl.l     #2,D0
00002DFE  41F9 0B00 5132          lea       _WatchPointSetOrCleared.L,A0
00002E02  01A2      
00002E04  42B0 0800 5133          clr.l     0(A0,D0.L)
00002E08  5282      5134          addq.l    #1,D2
00002E0A  60AC      5135          bra       main_1
                    5136   main_3:
                    5137   ; }
                    5138   ; Init_RS232() ;     // initialise the RS232 port
00002E0C  4EB8 0B12 5139          jsr       _Init_RS232
                    5140   ; Init_LCD() ;
00002E10  4EB8 095E 5141          jsr       _Init_LCD
                    5142   ; for( i = 32; i < 48; i++)
00002E14  7420      5143          moveq     #32,D2
                    5144   main_4:
00002E16  0C82 0000 5145          cmp.l     #48,D2
00002E1A  0030      
00002E1C  6C0E      5146          bge.s     main_6
                    5147   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002E1E  2F02      5148          move.l    D2,-(A7)
00002E20  4878 21FA 5149          pea       _UnhandledTrap.L
00002E24  4E92      5150          jsr       (A2)
00002E26  504F      5151          addq.w    #8,A7
00002E28  5282      5152          addq.l    #1,D2
00002E2A  60EA      5153          bra       main_4
                    5154   main_6:
                    5155   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002E2C  4878 002F 5156          pea       47
00002E30  4878 20F4 5157          pea       _menu.L
00002E34  4E92      5158          jsr       (A2)
00002E36  504F      5159          addq.w    #8,A7
                    5160   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002E38  4878 0019 5161          pea       25
00002E3C  4878 21A0 5162          pea       _UnhandledIRQ1.L
00002E40  4E92      5163          jsr       (A2)
00002E42  504F      5164          addq.w    #8,A7
                    5165   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002E44  4878 001A 5166          pea       26
00002E48  4878 21AC 5167          pea       _UnhandledIRQ2.L
00002E4C  4E92      5168          jsr       (A2)
00002E4E  504F      5169          addq.w    #8,A7
                    5170   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002E50  4878 001B 5171          pea       27
00002E54  4878 21B8 5172          pea       _UnhandledIRQ3.L
00002E58  4E92      5173          jsr       (A2)
00002E5A  504F      5174          addq.w    #8,A7
                    5175   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002E5C  4878 001C 5176          pea       28
00002E60  4878 21C4 5177          pea       _UnhandledIRQ4.L
00002E64  4E92      5178          jsr       (A2)
00002E66  504F      5179          addq.w    #8,A7
                    5180   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002E68  4878 001D 5181          pea       29
00002E6C  4878 21D0 5182          pea       _UnhandledIRQ5.L
00002E70  4E92      5183          jsr       (A2)
00002E72  504F      5184          addq.w    #8,A7
                    5185   ; //InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
                    5186   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002E74  4878 001F 5187          pea       31
00002E78  4878 21EE 5188          pea       _UnhandledIRQ7.L
00002E7C  4E92      5189          jsr       (A2)
00002E7E  504F      5190          addq.w    #8,A7
                    5191   ; InstallExceptionHandler(clock, 30);
00002E80  4878 001E 5192          pea       30
00002E84  4878 23F8 5193          pea       _clock.L
00002E88  4E92      5194          jsr       (A2)
00002E8A  504F      5195          addq.w    #8,A7
                    5196   ; Timer2Data = 0x03;
00002E8C  13FC 0003 5197          move.b    #3,4194356
00002E90  0040 0034 
                    5198   ; Timer2Control = 3;
00002E94  13FC 0003 5199          move.b    #3,4194358
00002E98  0040 0036 
                    5200   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E9C  4878 002E 5201          pea       46
00002EA0  4878 1ECC 5202          pea       _HandleBreakPoint.L
00002EA4  4E92      5203          jsr       (A2)
00002EA6  504F      5204          addq.w    #8,A7
                    5205   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002EA8  4878 001D 5206          pea       29
00002EAC  4878 15AC 5207          pea       _DumpRegistersandPause.L
00002EB0  4E92      5208          jsr       (A2)
00002EB2  504F      5209          addq.w    #8,A7
                    5210   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002EB4  4878 0002 5211          pea       2
00002EB8  4878 2208 5212          pea       _BusError.L
00002EBC  4E92      5213          jsr       (A2)
00002EBE  504F      5214          addq.w    #8,A7
                    5215   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002EC0  4878 0003 5216          pea       3
00002EC4  4878 2216 5217          pea       _AddressError.L
00002EC8  4E92      5218          jsr       (A2)
00002ECA  504F      5219          addq.w    #8,A7
                    5220   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002ECC  4878 0004 5221          pea       4
00002ED0  4878 2224 5222          pea       _IllegalInstruction.L
00002ED4  4E92      5223          jsr       (A2)
00002ED6  504F      5224          addq.w    #8,A7
                    5225   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002ED8  4878 0005 5226          pea       5
00002EDC  4878 2232 5227          pea       _Dividebyzero.L
00002EE0  4E92      5228          jsr       (A2)
00002EE2  504F      5229          addq.w    #8,A7
                    5230   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002EE4  4878 0006 5231          pea       6
00002EE8  4878 2240 5232          pea       _Check.L
00002EEC  4E92      5233          jsr       (A2)
00002EEE  504F      5234          addq.w    #8,A7
                    5235   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002EF0  4878 0007 5236          pea       7
00002EF4  4878 224E 5237          pea       _Trapv.L
00002EF8  4E92      5238          jsr       (A2)
00002EFA  504F      5239          addq.w    #8,A7
                    5240   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002EFC  4878 0008 5241          pea       8
00002F00  4878 225C 5242          pea       _PrivError.L
00002F04  4E92      5243          jsr       (A2)
00002F06  504F      5244          addq.w    #8,A7
                    5245   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002F08  4878 000F 5246          pea       15
00002F0C  4878 226A 5247          pea       _UnitIRQ.L
00002F10  4E92      5248          jsr       (A2)
00002F12  504F      5249          addq.w    #8,A7
                    5250   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002F14  4878 0018 5251          pea       24
00002F18  4878 2240 5252          pea       _Check.L
00002F1C  4E92      5253          jsr       (A2)
00002F1E  504F      5254          addq.w    #8,A7
                    5255   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002F20  4EB8 0BA6 5256          jsr       _FlushKeyboard
                    5257   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002F24  4239 0040 5258          clr.b     4194314
00002F28  000A      
                    5259   ; // otherwise start the debug monitor
                    5260   ; gotoxy(NUM_VGA_COLUMNS/2, NUM_VGA_ROWS/2);
00002F2A  4878 0014 5261          pea       20
00002F2E  4878 0028 5262          pea       40
00002F32  4EB8 23B8 5263          jsr       _gotoxy
00002F36  504F      5264          addq.w    #8,A7
                    5265   ; set_vga_control_reg(0xf2);
00002F38  4878 00F2 5266          pea       242
00002F3C  4EB8 23D4 5267          jsr       _set_vga_control_reg
00002F40  584F      5268          addq.w    #4,A7
                    5269   ; Oline0(BugMessage) ;
00002F42  2F03      5270          move.l    D3,-(A7)
00002F44  4EB8 09D4 5271          jsr       _Oline0
00002F48  584F      5272          addq.w    #4,A7
                    5273   ; Oline1("By: PJ Davies") ;
00002F4A  4879 0000 5274          pea       @m68kde~1_117.L
00002F4E  4676      
00002F50  4EB8 0A02 5275          jsr       _Oline1
00002F54  584F      5276          addq.w    #4,A7
                    5277   ; printf("\r\n%s", BugMessage) ;
00002F56  2F03      5278          move.l    D3,-(A7)
00002F58  4879 0000 5279          pea       @m68kde~1_118.L
00002F5C  4684      
00002F5E  4E93      5280          jsr       (A3)
00002F60  504F      5281          addq.w    #8,A7
                    5282   ; printf("\r\n%s", CopyrightMessage) ;
00002F62  2F2E FFFC 5283          move.l    -4(A6),-(A7)
00002F66  4879 0000 5284          pea       @m68kde~1_118.L
00002F6A  4684      
00002F6C  4E93      5285          jsr       (A3)
00002F6E  504F      5286          addq.w    #8,A7
                    5287   ; printf("\r\nStudent Name: Shidi Xi") ;
00002F70  4879 0000 5288          pea       @m68kde~1_119.L
00002F74  468A      
00002F76  4E93      5289          jsr       (A3)
00002F78  584F      5290          addq.w    #4,A7
                    5291   ; printf("\r\nStudent Number: 90506643");
00002F7A  4879 0000 5292          pea       @m68kde~1_120.L
00002F7E  46A4      
00002F80  4E93      5293          jsr       (A3)
00002F82  584F      5294          addq.w    #4,A7
                    5295   ; menu();
00002F84  4EB8 20F4 5296          jsr       _menu
00002F88  4CDF 0C0C 5297          movem.l   (A7)+,D2/D3/A2/A3
00002F8C  4E5E      5298          unlk      A6
00002F8E  4E75      5299          rts
                    5300   ; }
                    5301   _strcpy:
00002F90  206F 0004 5302          move.l    (4,A7),A0
00002F94  226F 0008 5303          move.l    (8,A7),A1
00002F98  2008      5304          move.l    A0,D0
                    5305   strcpy_1:
00002F9A  10D9      5306          move.b    (A1)+,(A0)+
00002F9C  66FC      5307          bne       strcpy_1
00002F9E  4E75      5308          rts
                    5309   ULDIV:
00002FA0  4E56 0000 5310          link    A6,#0
00002FA4  48E7 C000 5311          movem.l D0/D1,-(A7)
00002FA8  222E 0008 5312          move.l  8(A6),D1
00002FAC  202E 000C 5313          move.l  12(A6),D0
00002FB0  6036      5314          bra.s   ldiv_3
                    5315   LDIV:
00002FB2  4E56 0000 5316          link    A6,#0
00002FB6  48E7 C000 5317          movem.l D0/D1,-(A7)
00002FBA  222E 0008 5318          move.l  8(A6),D1
00002FBE  202E 000C 5319          move.l  12(A6),D0
00002FC2  4A80      5320          tst.l   D0
00002FC4  6A0E      5321          bpl.s   ldiv_1
00002FC6  4480      5322          neg.l   D0
00002FC8  4A81      5323          tst.l   D1
00002FCA  6A14      5324          bpl.s   ldiv_2
00002FCC  4481      5325          neg.l   D1
00002FCE  612A      5326          bsr.s   dodiv
00002FD0  4481      5327          neg.l   D1
00002FD2  6016      5328          bra.s   ldiv_4
                    5329   ldiv_1:
00002FD4  4A81      5330          tst.l   D1
00002FD6  6A10      5331          bpl.s   ldiv_3
00002FD8  4481      5332          neg.l   D1
00002FDA  611E      5333          bsr.s   dodiv
00002FDC  4480      5334          neg.l   D0
00002FDE  600A      5335          bra.s   ldiv_4
                    5336   ldiv_2:
00002FE0  6118      5337          bsr.s   dodiv
00002FE2  4480      5338          neg.l   D0
00002FE4  4481      5339          neg.l   D1
00002FE6  6002      5340          bra.s   ldiv_4
                    5341   ldiv_3:
00002FE8  6110      5342          bsr.s   dodiv
                    5343   ldiv_4:
00002FEA  2D40 0008 5344          move.l  D0,8(A6)
00002FEE  2D41 000C 5345          move.l  D1,12(A6)
00002FF2  4CDF 0003 5346          movem.l (A7)+,D0/D1
00002FF6  4E5E      5347          unlk    A6
00002FF8  4E75      5348          rts
                    5349   dodiv:
00002FFA  0C81 0000 5350          cmpi.l  #$FFFF,D1
00002FFE  FFFF      
00003000  6236      5351          bhi.s   dodiv_2
00003002  0C80 0000 5352          cmpi.l  #$FFFF,D0
00003006  FFFF      
00003008  6210      5353          bhi.s   dodiv_1
0000300A  80C1      5354          divu    D1,D0
0000300C  2200      5355          move.l  D0,D1
0000300E  4241      5356          clr.w   D1
00003010  4841      5357          swap    D1
00003012  0280 0000 5358          andi.l  #$FFFF,D0
00003016  FFFF      
00003018  4E75      5359          rts
                    5360   dodiv_1:
0000301A  48A7 A000 5361          movem.w D0/D2,-(A7)
0000301E  4240      5362          clr.w   D0
00003020  4840      5363          swap    D0
00003022  80C1      5364          divu    D1,D0
00003024  3400      5365          move.w  D0,D2
00003026  301F      5366          move.w  (A7)+,D0
00003028  80C1      5367          divu    D1,D0
0000302A  4840      5368          swap    D0
0000302C  4281      5369          clr.l   D1
0000302E  3200      5370          move.w  D0,D1
00003030  3002      5371          move.w  D2,D0
00003032  4840      5372          swap    D0
00003034  341F      5373          move.w  (A7)+,D2
00003036  4E75      5374          rts
                    5375   dodiv_2:
00003038  48E7 3800 5376          movem.l D2/D3/D4,-(A7)
0000303C  2401      5377          move.l  D1,D2
0000303E  4242      5378          clr.w   D2
00003040  4842      5379          swap    D2
00003042  5282      5380          addq.l  #1,D2
00003044  2600      5381          move.l  D0,D3
00003046  2801      5382          move.l  D1,D4
00003048  2202      5383          move.l  D2,D1
0000304A  61CE      5384          bsr.s   dodiv_1
0000304C  2204      5385          move.l  D4,D1
0000304E  82C2      5386          divu    D2,D1
00003050  80C1      5387          divu    D1,D0
00003052  0280 0000 5388          andi.l  #$FFFF,D0
00003056  FFFF      
                    5389   dodiv_3:
00003058  2204      5390          move.l  D4,D1
0000305A  2404      5391          move.l  D4,D2
0000305C  4842      5392          swap    D2
0000305E  C2C0      5393          mulu    D0,D1
00003060  C4C0      5394          mulu    D0,D2
00003062  4842      5395          swap    D2
00003064  D282      5396          add.l   D2,D1
00003066  9283      5397          sub.l   D3,D1
00003068  620A      5398          bhi.s   dodiv_4
0000306A  4481      5399          neg.l   D1
0000306C  B881      5400          cmp.l   D1,D4
0000306E  6208      5401          bhi.s   dodiv_5
00003070  5280      5402          addq.l  #1,D0
00003072  60E4      5403          bra.s   dodiv_3
                    5404   dodiv_4:
00003074  5380      5405          subq.l  #1,D0
00003076  60E0      5406          bra.s   dodiv_3
                    5407   dodiv_5:
00003078  4CDF 001C 5408          movem.l (A7)+,D2/D3/D4
0000307C  4E75      5409          rts
                    5410   ULMUL:
0000307E  4E56 0000 5411          link    A6,#0
00003082  48E7 C000 5412          movem.l D0/D1,-(A7)
00003086  222E 0008 5413          move.l  8(A6),D1
0000308A  202E 000C 5414          move.l  12(A6),D0
0000308E  602C      5415          bra.s   lmul_3
                    5416   LMUL:
00003090  4E56 0000 5417          link    A6,#0
00003094  48E7 C000 5418          movem.l D0/D1,-(A7)
00003098  222E 0008 5419          move.l  8(A6),D1
0000309C  202E 000C 5420          move.l  12(A6),D0
000030A0  4A80      5421          tst.l   D0
000030A2  6A0A      5422          bpl.s   lmul_1
000030A4  4480      5423          neg.l   D0
000030A6  4A81      5424          tst.l   D1
000030A8  6A0A      5425          bpl.s   lmul_2
000030AA  4481      5426          neg.l   D1
000030AC  600E      5427          bra.s   lmul_3
                    5428   lmul_1:
000030AE  4A81      5429          tst.l   D1
000030B0  6A0A      5430          bpl.s   lmul_3
000030B2  4481      5431          neg.l   D1
                    5432   lmul_2:
000030B4  6114      5433          bsr.s   domul
000030B6  4481      5434          neg.l   D1
000030B8  4080      5435          negx.l  D0
000030BA  6002      5436          bra.s   lmul_4
                    5437   lmul_3:
000030BC  610C      5438          bsr.s   domul
                    5439   lmul_4:
000030BE  2D41 0008 5440          move.l  D1,8(A6)
000030C2  4CDF 0003 5441          movem.l (A7)+,D0/D1
000030C6  4E5E      5442          unlk    A6
000030C8  4E75      5443          rts
                    5444   domul:
000030CA  0C81 0000 5445          cmpi.l  #$FFFF,D1
000030CE  FFFF      
000030D0  620C      5446          bhi.s   domul_1
000030D2  0C80 0000 5447          cmpi.l  #$FFFF,D0
000030D6  FFFF      
000030D8  620E      5448          bhi.s   domul_2
000030DA  C2C0      5449          mulu    D0,D1
000030DC  4E75      5450          rts
                    5451   domul_1:
000030DE  0C80 0000 5452          cmpi.l  #$FFFF,D0
000030E2  FFFF      
000030E4  6218      5453          bhi.s   domul_4
000030E6  6002      5454          bra.s   domul_3
                    5455   domul_2
000030E8  C141      5456          exg     D0,D1
                    5457   domul_3:
000030EA  2F02      5458          move.l  D2,-(A7)
000030EC  2401      5459          move.l  D1,D2
000030EE  4842      5460          swap    D2
000030F0  C2C0      5461          mulu    D0,D1
000030F2  C4C0      5462          mulu    D0,D2
000030F4  4842      5463          swap    D2
000030F6  4242      5464          clr.w   D2
000030F8  D282      5465          add.l   D2,D1
000030FA  241F      5466          move.l  (A7)+,D2
000030FC  4E75      5467          rts
                    5468   domul_4:
000030FE  48E7 3000 5469          movem.l D2/D3,-(A7)
00003102  2401      5470          move.l  D1,D2
00003104  2601      5471          move.l  D1,D3
00003106  C2C0      5472          mulu    D0,D1
00003108  4842      5473          swap    D2
0000310A  C4C0      5474          mulu    D0,D2
0000310C  4840      5475          swap    D0
0000310E  C6C0      5476          mulu    D0,D3
00003110  D483      5477          add.l   D3,D2
00003112  4842      5478          swap    D2
00003114  4242      5479          clr.w   D2
00003116  D282      5480          add.l   D2,D1
00003118  4CDF 000C 5481          movem.l (A7)+,D2/D3
0000311C  4E75      5482          rts
                    5483   _putch:
0000311E  4E56 0000 5484          link      A6,#0
00003122  48E7 2000 5485          movem.l   D2,-(A7)
00003126  242E 0008 5486          move.l    8(A6),D2
0000312A  0C82 0000 5487          cmp.l     #10,D2
0000312E  000A      
00003130  660A      5488          bne.s     putch_1
00003132  4878 000D 5489          pea       13
00003136  6100 DA04 5490          bsr       __putch
0000313A  584F      5491          addq.w    #4,A7
                    5492   putch_1:
0000313C  2F02      5493          move.l    D2,-(A7)
0000313E  6100 D9FC 5494          bsr       __putch
00003142  584F      5495          addq.w    #4,A7
00003144  2002      5496          move.l    D2,D0
00003146  4CDF 0004 5497          movem.l   (A7)+,D2
0000314A  4E5E      5498          unlk      A6
0000314C  4E75      5499          rts
                    5500   _getch:
0000314E  48E7 2000 5501          movem.l   D2,-(A7)
00003152  2439 0B00 5502          move.l    __ungetbuf,D2
00003156  00C0      
00003158  2039 0B00 5503          move.l    __ungetbuf,D0
0000315C  00C0      
0000315E  0C80 FFFF 5504          cmp.l     #-1,D0
00003162  FFFF      
00003164  670C      5505          beq.s     getch_1
00003166  23FC FFFF 5506          move.l    #-1,__ungetbuf
0000316A  FFFF 0B00 
0000316E  00C0      
00003170  6010      5507          bra.s     getch_3
                    5508   getch_1:
00003172  6100 D9F4 5509          bsr       __getch
00003176  2400      5510          move.l    D0,D2
00003178  0C80 0000 5511          cmp.l     #13,D0
0000317C  000D      
0000317E  6602      5512          bne.s     getch_3
00003180  740A      5513          moveq     #10,D2
                    5514   getch_3:
00003182  2002      5515          move.l    D2,D0
00003184  4CDF 0004 5516          movem.l   (A7)+,D2
00003188  4E75      5517          rts
                    5518   _tolower:
0000318A  4E56 0000 5519          link      A6,#0
0000318E  48E7 2000 5520          movem.l   D2,-(A7)
00003192  242E 0008 5521          move.l    8(A6),D2
00003196  0C82 0000 5522          cmp.l     #65,D2
0000319A  0041      
0000319C  6D0E      5523          blt.s     tolower_1
0000319E  0C82 0000 5524          cmp.l     #90,D2
000031A2  005A      
000031A4  6E06      5525          bgt.s     tolower_1
000031A6  84BC 0000 5526          or.l      #32,D2
000031AA  0020      
                    5527   tolower_1:
000031AC  2002      5528          move.l    D2,D0
000031AE  4CDF 0004 5529          movem.l   (A7)+,D2
000031B2  4E5E      5530          unlk      A6
000031B4  4E75      5531          rts
                    5532   _sprintf:
000031B6  4E56 FFFC 5533          link      A6,#-4
000031BA  48E7 2000 5534          movem.l   D2,-(A7)
000031BE  41EE 000C 5535          lea       12(A6),A0
000031C2  5848      5536          addq.w    #4,A0
000031C4  2408      5537          move.l    A0,D2
000031C6  2F02      5538          move.l    D2,-(A7)
000031C8  2F2E 000C 5539          move.l    12(A6),-(A7)
000031CC  2F2E 0008 5540          move.l    8(A6),-(A7)
000031D0  6100 013E 5541          bsr       _vsprintf
000031D4  DEFC 000C 5542          add.w     #12,A7
000031D8  2D40 FFFC 5543          move.l    D0,-4(A6)
000031DC  4282      5544          clr.l     D2
000031DE  202E FFFC 5545          move.l    -4(A6),D0
000031E2  4CDF 0004 5546          movem.l   (A7)+,D2
000031E6  4E5E      5547          unlk      A6
000031E8  4E75      5548          rts
                    5549   _strcat:
000031EA  206F 0004 5550          move.l    (4,A7),A0	
000031EE  226F 0008 5551          move.l    (8,A7),A1	
000031F2  2008      5552          move.l    A0,D0		
                    5553   strcat_0:
000031F4  4A18      5554          tst.b     (A0)+
000031F6  66FC      5555          bne       strcat_0
000031F8  5348      5556          subq      #1,A0
                    5557   strcat_1:
000031FA  10D9      5558          move.b    (A1)+,(A0)+
000031FC  66FC      5559          bne       strcat_1
000031FE  4E75      5560          rts
                    5561   _toupper:
00003200  4E56 0000 5562          link      A6,#0
00003204  48E7 2000 5563          movem.l   D2,-(A7)
00003208  242E 0008 5564          move.l    8(A6),D2
0000320C  0C82 0000 5565          cmp.l     #97,D2
00003210  0061      
00003212  6D0E      5566          blt.s     toupper_1
00003214  0C82 0000 5567          cmp.l     #122,D2
00003218  007A      
0000321A  6E06      5568          bgt.s     toupper_1
0000321C  C4BC 0000 5569          and.l     #95,D2
00003220  005F      
                    5570   toupper_1:
00003222  2002      5571          move.l    D2,D0
00003224  4CDF 0004 5572          movem.l   (A7)+,D2
00003228  4E5E      5573          unlk      A6
0000322A  4E75      5574          rts
                    5575   _printf:
0000322C  4E56 FFFC 5576          link      A6,#-4
00003230  48E7 2000 5577          movem.l   D2,-(A7)
00003234  41EE 0008 5578          lea       8(A6),A0
00003238  5848      5579          addq.w    #4,A0
0000323A  2408      5580          move.l    A0,D2
0000323C  2F02      5581          move.l    D2,-(A7)
0000323E  2F2E 0008 5582          move.l    8(A6),-(A7)
00003242  42A7      5583          clr.l     -(A7)
00003244  6100 00CA 5584          bsr       _vsprintf
00003248  DEFC 000C 5585          add.w     #12,A7
0000324C  2D40 FFFC 5586          move.l    D0,-4(A6)
00003250  4282      5587          clr.l     D2
00003252  202E FFFC 5588          move.l    -4(A6),D0
00003256  4CDF 0004 5589          movem.l   (A7)+,D2
0000325A  4E5E      5590          unlk      A6
0000325C  4E75      5591          rts
                    5592   @vsprintf_copy:
0000325E  4E56 0000 5593          link      A6,#0
00003262  206E 0008 5594          move.l    8(A6),A0
00003266  4A90      5595          tst.l     (A0)
00003268  6710      5596          beq.s     @vsprintf_copy_1
0000326A  202E 000C 5597          move.l    12(A6),D0
0000326E  206E 0008 5598          move.l    8(A6),A0
00003272  2250      5599          move.l    (A0),A1
00003274  5290      5600          addq.l    #1,(A0)
00003276  1280      5601          move.b    D0,(A1)
00003278  600A      5602          bra.s     @vsprintf_copy_2
                    5603   @vsprintf_copy_1:
0000327A  2F2E 000C 5604          move.l    12(A6),-(A7)
0000327E  6100 FE9E 5605          bsr       _putch
00003282  584F      5606          addq.w    #4,A7
                    5607   @vsprintf_copy_2:
00003284  4E5E      5608          unlk      A6
00003286  4E75      5609          rts
                    5610   @vsprintf_getval:
00003288  4E56 0000 5611          link      A6,#0
0000328C  48E7 3000 5612          movem.l   D2/D3,-(A7)
00003290  242E 0008 5613          move.l    8(A6),D2
00003294  4283      5614          clr.l     D3
00003296  2042      5615          move.l    D2,A0
00003298  2050      5616          move.l    (A0),A0
0000329A  1010      5617          move.b    (A0),D0
0000329C  4880      5618          ext.w     D0
0000329E  48C0      5619          ext.l     D0
000032A0  0C80 0000 5620          cmp.l     #42,D0
000032A4  002A      
000032A6  6612      5621          bne.s     @vsprintf_getval_1
000032A8  206E 000C 5622          move.l    12(A6),A0
000032AC  2250      5623          move.l    (A0),A1
000032AE  5890      5624          addq.l    #4,(A0)
000032B0  2611      5625          move.l    (A1),D3
000032B2  2042      5626          move.l    D2,A0
000032B4  5290      5627          addq.l    #1,(A0)
000032B6  6000 004E 5628          bra       @vsprintf_getval_5
                    5629   @vsprintf_getval_1:
000032BA  2042      5630          move.l    D2,A0
000032BC  2050      5631          move.l    (A0),A0
000032BE  1010      5632          move.b    (A0),D0
000032C0  4880      5633          ext.w     D0
000032C2  48C0      5634          ext.l     D0
000032C4  0C80 0000 5635          cmp.l     #48,D0
000032C8  0030      
000032CA  6D00 003A 5636          blt       @vsprintf_getval_5
000032CE  2042      5637          move.l    D2,A0
000032D0  2050      5638          move.l    (A0),A0
000032D2  1010      5639          move.b    (A0),D0
000032D4  4880      5640          ext.w     D0
000032D6  48C0      5641          ext.l     D0
000032D8  0C80 0000 5642          cmp.l     #57,D0
000032DC  0039      
000032DE  6E26      5643          bgt.s     @vsprintf_getval_5
000032E0  2F03      5644          move.l    D3,-(A7)
000032E2  4878 000A 5645          pea       10
000032E6  6100 FDA8 5646          bsr       LMUL
000032EA  2017      5647          move.l    (A7),D0
000032EC  504F      5648          addq.w    #8,A7
000032EE  2042      5649          move.l    D2,A0
000032F0  2250      5650          move.l    (A0),A1
000032F2  5290      5651          addq.l    #1,(A0)
000032F4  1211      5652          move.b    (A1),D1
000032F6  4881      5653          ext.w     D1
000032F8  48C1      5654          ext.l     D1
000032FA  D081      5655          add.l     D1,D0
000032FC  0480 0000 5656          sub.l     #48,D0
00003300  0030      
00003302  2600      5657          move.l    D0,D3
00003304  60B4      5658          bra       @vsprintf_getval_1
                    5659   @vsprintf_getval_5:
00003306  2003      5660          move.l    D3,D0
00003308  4CDF 000C 5661          movem.l   (A7)+,D2/D3
0000330C  4E5E      5662          unlk      A6
0000330E  4E75      5663          rts
                    5664   _vsprintf:
00003310  4E56 FFCC 5665          link      A6,#-52
00003314  48E7 3F3C 5666          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003318  45EE 0008 5667          lea       8(A6),A2
0000331C  47F8 325E 5668          lea       @vsprintf_copy,A3
00003320  49F9 0000 5669          lea       _ultoa,A4
00003324  3A68      
00003326  4286      5670          clr.l     D6
                    5671   vsprintf_1:
00003328  206E 000C 5672          move.l    12(A6),A0
0000332C  4A10      5673          tst.b     (A0)
0000332E  6700 0624 5674          beq       vsprintf_3
00003332  206E 000C 5675          move.l    12(A6),A0
00003336  1010      5676          move.b    (A0),D0
00003338  4880      5677          ext.w     D0
0000333A  48C0      5678          ext.l     D0
0000333C  0C80 0000 5679          cmp.l     #37,D0
00003340  0025      
00003342  671C      5680          beq.s     vsprintf_4
00003344  206E 000C 5681          move.l    12(A6),A0
00003348  52AE 000C 5682          addq.l    #1,12(A6)
0000334C  1210      5683          move.b    (A0),D1
0000334E  4881      5684          ext.w     D1
00003350  48C1      5685          ext.l     D1
00003352  2F01      5686          move.l    D1,-(A7)
00003354  2F0A      5687          move.l    A2,-(A7)
00003356  4E93      5688          jsr       (A3)
00003358  504F      5689          addq.w    #8,A7
0000335A  5286      5690          addq.l    #1,D6
0000335C  6000 05F2 5691          bra       vsprintf_2
                    5692   vsprintf_4:
00003360  52AE 000C 5693          addq.l    #1,12(A6)
00003364  422E FFD3 5694          clr.b     -45(A6)
00003368  422E FFD2 5695          clr.b     -46(A6)
0000336C  422E FFD0 5696          clr.b     -48(A6)
00003370  422E FFCF 5697          clr.b     -49(A6)
00003374  422E FFCE 5698          clr.b     -50(A6)
00003378  422E FFCD 5699          clr.b     -51(A6)
0000337C  42AE FFFC 5700          clr.l     -4(A6)
00003380  7AFF      5701          moveq     #-1,D5
00003382  41EE FFDC 5702          lea       -36(A6),A0
00003386  2608      5703          move.l    A0,D3
00003388  2408      5704          move.l    A0,D2
                    5705   vsprintf_6:
0000338A  206E 000C 5706          move.l    12(A6),A0
0000338E  1010      5707          move.b    (A0),D0
00003390  4880      5708          ext.w     D0
00003392  48C0      5709          ext.l     D0
00003394  0C80 0000 5710          cmp.l     #43,D0
00003398  002B      
0000339A  6730      5711          beq.s     vsprintf_12
0000339C  6E18      5712          bgt.s     vsprintf_15
0000339E  0C80 0000 5713          cmp.l     #35,D0
000033A2  0023      
000033A4  6700 003E 5714          beq       vsprintf_14
000033A8  6E00 0046 5715          bgt       vsprintf_9
000033AC  0C80 0000 5716          cmp.l     #32,D0
000033B0  0020      
000033B2  6724      5717          beq.s     vsprintf_13
000033B4  603A      5718          bra.s     vsprintf_9
                    5719   vsprintf_15:
000033B6  0C80 0000 5720          cmp.l     #45,D0
000033BA  002D      
000033BC  6702      5721          beq.s     vsprintf_11
000033BE  6030      5722          bra.s     vsprintf_9
                    5723   vsprintf_11:
000033C0  1D7C 0001 5724          move.b    #1,-51(A6)
000033C4  FFCD      
000033C6  52AE 000C 5725          addq.l    #1,12(A6)
000033CA  6026      5726          bra.s     vsprintf_7
                    5727   vsprintf_12:
000033CC  1D7C 0001 5728          move.b    #1,-50(A6)
000033D0  FFCE      
000033D2  52AE 000C 5729          addq.l    #1,12(A6)
000033D6  601A      5730          bra.s     vsprintf_7
                    5731   vsprintf_13:
000033D8  1D7C 0001 5732          move.b    #1,-49(A6)
000033DC  FFCF      
000033DE  52AE 000C 5733          addq.l    #1,12(A6)
000033E2  600E      5734          bra.s     vsprintf_7
                    5735   vsprintf_14:
000033E4  1D7C 0001 5736          move.b    #1,-48(A6)
000033E8  FFD0      
000033EA  52AE 000C 5737          addq.l    #1,12(A6)
000033EE  6002      5738          bra.s     vsprintf_7
                    5739   vsprintf_9:
000033F0  6002      5740          bra.s     vsprintf_8
                    5741   vsprintf_7:
000033F2  6096      5742          bra       vsprintf_6
                    5743   vsprintf_8:
000033F4  206E 000C 5744          move.l    12(A6),A0
000033F8  1010      5745          move.b    (A0),D0
000033FA  4880      5746          ext.w     D0
000033FC  48C0      5747          ext.l     D0
000033FE  0C80 0000 5748          cmp.l     #48,D0
00003402  0030      
00003404  660A      5749          bne.s     vsprintf_16
00003406  52AE 000C 5750          addq.l    #1,12(A6)
0000340A  1D7C 0001 5751          move.b    #1,-46(A6)
0000340E  FFD2      
                    5752   vsprintf_16:
00003410  486E 0010 5753          pea       16(A6)
00003414  486E 000C 5754          pea       12(A6)
00003418  6100 FE6E 5755          bsr       @vsprintf_getval
0000341C  504F      5756          addq.w    #8,A7
0000341E  2A40      5757          move.l    D0,A5
00003420  206E 000C 5758          move.l    12(A6),A0
00003424  1010      5759          move.b    (A0),D0
00003426  4880      5760          ext.w     D0
00003428  48C0      5761          ext.l     D0
0000342A  0C80 0000 5762          cmp.l     #46,D0
0000342E  002E      
00003430  6614      5763          bne.s     vsprintf_18
00003432  52AE 000C 5764          addq.l    #1,12(A6)
00003436  486E 0010 5765          pea       16(A6)
0000343A  486E 000C 5766          pea       12(A6)
0000343E  6100 FE48 5767          bsr       @vsprintf_getval
00003442  504F      5768          addq.w    #8,A7
00003444  2A00      5769          move.l    D0,D5
                    5770   vsprintf_18:
00003446  206E 000C 5771          move.l    12(A6),A0
0000344A  1010      5772          move.b    (A0),D0
0000344C  4880      5773          ext.w     D0
0000344E  48C0      5774          ext.l     D0
00003450  0C80 0000 5775          cmp.l     #108,D0
00003454  006C      
00003456  660A      5776          bne.s     vsprintf_20
00003458  52AE 000C 5777          addq.l    #1,12(A6)
0000345C  1D7C 0001 5778          move.b    #1,-45(A6)
00003460  FFD3      
                    5779   vsprintf_20:
00003462  206E 000C 5780          move.l    12(A6),A0
00003466  1010      5781          move.b    (A0),D0
00003468  4880      5782          ext.w     D0
0000346A  48C0      5783          ext.l     D0
0000346C  0C80 0000 5784          cmp.l     #111,D0
00003470  006F      
00003472  6700 00D4 5785          beq       vsprintf_27
00003476  6E34      5786          bgt.s     vsprintf_33
00003478  0C80 0000 5787          cmp.l     #100,D0
0000347C  0064      
0000347E  6700 0054 5788          beq       vsprintf_24
00003482  6E1C      5789          bgt.s     vsprintf_34
00003484  0C80 0000 5790          cmp.l     #99,D0
00003488  0063      
0000348A  6700 012C 5791          beq       vsprintf_30
0000348E  6E00 016A 5792          bgt       vsprintf_22
00003492  0C80 0000 5793          cmp.l     #88,D0
00003496  0058      
00003498  6700 00E6 5794          beq       vsprintf_28
0000349C  6000 015C 5795          bra       vsprintf_22
                    5796   vsprintf_34:
000034A0  0C80 0000 5797          cmp.l     #105,D0
000034A4  0069      
000034A6  672C      5798          beq.s     vsprintf_24
000034A8  6000 0150 5799          bra       vsprintf_22
                    5800   vsprintf_33:
000034AC  0C80 0000 5801          cmp.l     #117,D0
000034B0  0075      
000034B2  6700 005C 5802          beq       vsprintf_26
000034B6  6E0E      5803          bgt.s     vsprintf_35
000034B8  0C80 0000 5804          cmp.l     #115,D0
000034BC  0073      
000034BE  6700 011C 5805          beq       vsprintf_31
000034C2  6000 0136 5806          bra       vsprintf_22
                    5807   vsprintf_35:
000034C6  0C80 0000 5808          cmp.l     #120,D0
000034CA  0078      
000034CC  6700 00B2 5809          beq       vsprintf_28
000034D0  6000 0128 5810          bra       vsprintf_22
                    5811   vsprintf_24:
000034D4  4A2E FFD3 5812          tst.b     -45(A6)
000034D8  671A      5813          beq.s     vsprintf_36
000034DA  4878 000A 5814          pea       10
000034DE  2F03      5815          move.l    D3,-(A7)
000034E0  206E 0010 5816          move.l    16(A6),A0
000034E4  58AE 0010 5817          addq.l    #4,16(A6)
000034E8  2F10      5818          move.l    (A0),-(A7)
000034EA  6100 04F8 5819          bsr       _ltoa
000034EE  DEFC 000C 5820          add.w     #12,A7
000034F2  6018      5821          bra.s     vsprintf_37
                    5822   vsprintf_36:
000034F4  4878 000A 5823          pea       10
000034F8  2F03      5824          move.l    D3,-(A7)
000034FA  206E 0010 5825          move.l    16(A6),A0
000034FE  58AE 0010 5826          addq.l    #4,16(A6)
00003502  2F10      5827          move.l    (A0),-(A7)
00003504  6100 04DE 5828          bsr       _ltoa
00003508  DEFC 000C 5829          add.w     #12,A7
                    5830   vsprintf_37:
0000350C  6000 00FA 5831          bra       vsprintf_23
                    5832   vsprintf_26:
00003510  4A2E FFD3 5833          tst.b     -45(A6)
00003514  6718      5834          beq.s     vsprintf_38
00003516  4878 000A 5835          pea       10
0000351A  2F03      5836          move.l    D3,-(A7)
0000351C  206E 0010 5837          move.l    16(A6),A0
00003520  58AE 0010 5838          addq.l    #4,16(A6)
00003524  2F10      5839          move.l    (A0),-(A7)
00003526  4E94      5840          jsr       (A4)
00003528  DEFC 000C 5841          add.w     #12,A7
0000352C  6016      5842          bra.s     vsprintf_39
                    5843   vsprintf_38:
0000352E  4878 000A 5844          pea       10
00003532  2F03      5845          move.l    D3,-(A7)
00003534  206E 0010 5846          move.l    16(A6),A0
00003538  58AE 0010 5847          addq.l    #4,16(A6)
0000353C  2F10      5848          move.l    (A0),-(A7)
0000353E  4E94      5849          jsr       (A4)
00003540  DEFC 000C 5850          add.w     #12,A7
                    5851   vsprintf_39:
00003544  6000 00C2 5852          bra       vsprintf_23
                    5853   vsprintf_27:
00003548  4A2E FFD3 5854          tst.b     -45(A6)
0000354C  6718      5855          beq.s     vsprintf_40
0000354E  4878 0008 5856          pea       8
00003552  2F03      5857          move.l    D3,-(A7)
00003554  206E 0010 5858          move.l    16(A6),A0
00003558  58AE 0010 5859          addq.l    #4,16(A6)
0000355C  2F10      5860          move.l    (A0),-(A7)
0000355E  4E94      5861          jsr       (A4)
00003560  DEFC 000C 5862          add.w     #12,A7
00003564  6016      5863          bra.s     vsprintf_41
                    5864   vsprintf_40:
00003566  4878 0008 5865          pea       8
0000356A  2F03      5866          move.l    D3,-(A7)
0000356C  206E 0010 5867          move.l    16(A6),A0
00003570  58AE 0010 5868          addq.l    #4,16(A6)
00003574  2F10      5869          move.l    (A0),-(A7)
00003576  4E94      5870          jsr       (A4)
00003578  DEFC 000C 5871          add.w     #12,A7
                    5872   vsprintf_41:
0000357C  6000 008A 5873          bra       vsprintf_23
                    5874   vsprintf_28:
00003580  4A2E FFD3 5875          tst.b     -45(A6)
00003584  6718      5876          beq.s     vsprintf_42
00003586  4878 0010 5877          pea       16
0000358A  2F03      5878          move.l    D3,-(A7)
0000358C  206E 0010 5879          move.l    16(A6),A0
00003590  58AE 0010 5880          addq.l    #4,16(A6)
00003594  2F10      5881          move.l    (A0),-(A7)
00003596  4E94      5882          jsr       (A4)
00003598  DEFC 000C 5883          add.w     #12,A7
0000359C  6016      5884          bra.s     vsprintf_43
                    5885   vsprintf_42:
0000359E  4878 0010 5886          pea       16
000035A2  2F03      5887          move.l    D3,-(A7)
000035A4  206E 0010 5888          move.l    16(A6),A0
000035A8  58AE 0010 5889          addq.l    #4,16(A6)
000035AC  2F10      5890          move.l    (A0),-(A7)
000035AE  4E94      5891          jsr       (A4)
000035B0  DEFC 000C 5892          add.w     #12,A7
                    5893   vsprintf_43:
000035B4  6000 0052 5894          bra       vsprintf_23
                    5895   vsprintf_30:
000035B8  206E 0010 5896          move.l    16(A6),A0
000035BC  58AE 0010 5897          addq.l    #4,16(A6)
000035C0  2010      5898          move.l    (A0),D0
000035C2  2042      5899          move.l    D2,A0
000035C4  5282      5900          addq.l    #1,D2
000035C6  1080      5901          move.b    D0,(A0)
000035C8  2042      5902          move.l    D2,A0
000035CA  4210      5903          clr.b     (A0)
000035CC  200D      5904          move.l    A5,D0
000035CE  6704      5905          beq.s     vsprintf_44
000035D0  200D      5906          move.l    A5,D0
000035D2  6002      5907          bra.s     vsprintf_45
                    5908   vsprintf_44:
000035D4  7001      5909          moveq     #1,D0
                    5910   vsprintf_45:
000035D6  2A00      5911          move.l    D0,D5
000035D8  6000 002E 5912          bra       vsprintf_23
                    5913   vsprintf_31:
000035DC  206E 0010 5914          move.l    16(A6),A0
000035E0  58AE 0010 5915          addq.l    #4,16(A6)
000035E4  2610      5916          move.l    (A0),D3
000035E6  0C85 FFFF 5917          cmp.l     #-1,D5
000035EA  FFFF      
000035EC  660A      5918          bne.s     vsprintf_46
000035EE  2F03      5919          move.l    D3,-(A7)
000035F0  6100 04D8 5920          bsr       _strlen
000035F4  584F      5921          addq.w    #4,A7
000035F6  2A00      5922          move.l    D0,D5
                    5923   vsprintf_46:
000035F8  600E      5924          bra.s     vsprintf_23
                    5925   vsprintf_22:
000035FA  206E 000C 5926          move.l    12(A6),A0
000035FE  2242      5927          move.l    D2,A1
00003600  5282      5928          addq.l    #1,D2
00003602  1290      5929          move.b    (A0),(A1)
00003604  2042      5930          move.l    D2,A0
00003606  4210      5931          clr.b     (A0)
                    5932   vsprintf_23:
00003608  2F03      5933          move.l    D3,-(A7)
0000360A  6100 04BE 5934          bsr       _strlen
0000360E  584F      5935          addq.w    #4,A7
00003610  1800      5936          move.b    D0,D4
00003612  206E 000C 5937          move.l    12(A6),A0
00003616  1010      5938          move.b    (A0),D0
00003618  4880      5939          ext.w     D0
0000361A  48C0      5940          ext.l     D0
0000361C  0C80 0000 5941          cmp.l     #115,D0
00003620  0073      
00003622  6618      5942          bne.s     vsprintf_48
00003624  0C85 0000 5943          cmp.l     #0,D5
00003628  0000      
0000362A  6D10      5944          blt.s     vsprintf_48
0000362C  4884      5945          ext.w     D4
0000362E  48C4      5946          ext.l     D4
00003630  B885      5947          cmp.l     D5,D4
00003632  6F04      5948          ble.s     vsprintf_50
00003634  1005      5949          move.b    D5,D0
00003636  6002      5950          bra.s     vsprintf_51
                    5951   vsprintf_50:
00003638  1004      5952          move.b    D4,D0
                    5953   vsprintf_51:
0000363A  1800      5954          move.b    D0,D4
                    5955   vsprintf_48:
0000363C  206E 000C 5956          move.l    12(A6),A0
00003640  1010      5957          move.b    (A0),D0
00003642  4880      5958          ext.w     D0
00003644  48C0      5959          ext.l     D0
00003646  0C80 0000 5960          cmp.l     #88,D0
0000364A  0058      
0000364C  6600 0026 5961          bne       vsprintf_56
00003650  41EE FFDC 5962          lea       -36(A6),A0
00003654  2408      5963          move.l    A0,D2
                    5964   vsprintf_54:
00003656  2042      5965          move.l    D2,A0
00003658  4A10      5966          tst.b     (A0)
0000365A  6718      5967          beq.s     vsprintf_56
0000365C  2042      5968          move.l    D2,A0
0000365E  1210      5969          move.b    (A0),D1
00003660  4881      5970          ext.w     D1
00003662  48C1      5971          ext.l     D1
00003664  2F01      5972          move.l    D1,-(A7)
00003666  6100 FB98 5973          bsr       _toupper
0000366A  584F      5974          addq.w    #4,A7
0000366C  2042      5975          move.l    D2,A0
0000366E  1080      5976          move.b    D0,(A0)
00003670  5282      5977          addq.l    #1,D2
00003672  60E2      5978          bra       vsprintf_54
                    5979   vsprintf_56:
00003674  7E00      5980          moveq     #0,D7
00003676  41EE FFD4 5981          lea       -44(A6),A0
0000367A  2408      5982          move.l    A0,D2
0000367C  206E 000C 5983          move.l    12(A6),A0
00003680  1010      5984          move.b    (A0),D0
00003682  4880      5985          ext.w     D0
00003684  48C0      5986          ext.l     D0
00003686  0C80 0000 5987          cmp.l     #100,D0
0000368A  0064      
0000368C  6714      5988          beq.s     vsprintf_59
0000368E  206E 000C 5989          move.l    12(A6),A0
00003692  1010      5990          move.b    (A0),D0
00003694  4880      5991          ext.w     D0
00003696  48C0      5992          ext.l     D0
00003698  0C80 0000 5993          cmp.l     #105,D0
0000369C  0069      
0000369E  6600 0076 5994          bne       vsprintf_65
                    5995   vsprintf_59:
000036A2  4A2E FFCE 5996          tst.b     -50(A6)
000036A6  6612      5997          bne.s     vsprintf_62
000036A8  2043      5998          move.l    D3,A0
000036AA  1010      5999          move.b    (A0),D0
000036AC  4880      6000          ext.w     D0
000036AE  48C0      6001          ext.l     D0
000036B0  0C80 0000 6002          cmp.l     #45,D0
000036B4  002D      
000036B6  6600 002E 6003          bne       vsprintf_60
                    6004   vsprintf_62:
000036BA  2043      6005          move.l    D3,A0
000036BC  1010      6006          move.b    (A0),D0
000036BE  4880      6007          ext.w     D0
000036C0  48C0      6008          ext.l     D0
000036C2  0C80 0000 6009          cmp.l     #45,D0
000036C6  002D      
000036C8  660E      6010          bne.s     vsprintf_63
000036CA  2043      6011          move.l    D3,A0
000036CC  5283      6012          addq.l    #1,D3
000036CE  2242      6013          move.l    D2,A1
000036D0  5282      6014          addq.l    #1,D2
000036D2  1290      6015          move.b    (A0),(A1)
000036D4  5304      6016          subq.b    #1,D4
000036D6  6008      6017          bra.s     vsprintf_64
                    6018   vsprintf_63:
000036D8  2042      6019          move.l    D2,A0
000036DA  5282      6020          addq.l    #1,D2
000036DC  10BC 002B 6021          move.b    #43,(A0)
                    6022   vsprintf_64:
000036E0  5287      6023          addq.l    #1,D7
000036E2  6000 0032 6024          bra       vsprintf_65
                    6025   vsprintf_60:
000036E6  4A2E FFCF 6026          tst.b     -49(A6)
000036EA  6700 002A 6027          beq       vsprintf_65
000036EE  2043      6028          move.l    D3,A0
000036F0  1010      6029          move.b    (A0),D0
000036F2  4880      6030          ext.w     D0
000036F4  48C0      6031          ext.l     D0
000036F6  0C80 0000 6032          cmp.l     #45,D0
000036FA  002D      
000036FC  660E      6033          bne.s     vsprintf_67
000036FE  2043      6034          move.l    D3,A0
00003700  5283      6035          addq.l    #1,D3
00003702  2242      6036          move.l    D2,A1
00003704  5282      6037          addq.l    #1,D2
00003706  1290      6038          move.b    (A0),(A1)
00003708  5304      6039          subq.b    #1,D4
0000370A  6008      6040          bra.s     vsprintf_68
                    6041   vsprintf_67:
0000370C  2042      6042          move.l    D2,A0
0000370E  5282      6043          addq.l    #1,D2
00003710  10BC 0020 6044          move.b    #32,(A0)
                    6045   vsprintf_68:
00003714  5287      6046          addq.l    #1,D7
                    6047   vsprintf_65:
00003716  4A2E FFD0 6048          tst.b     -48(A6)
0000371A  6700 0066 6049          beq       vsprintf_77
0000371E  206E 000C 6050          move.l    12(A6),A0
00003722  1010      6051          move.b    (A0),D0
00003724  4880      6052          ext.w     D0
00003726  48C0      6053          ext.l     D0
00003728  0C80 0000 6054          cmp.l     #111,D0
0000372C  006F      
0000372E  671A      6055          beq.s     vsprintf_73
00003730  6E0C      6056          bgt.s     vsprintf_76
00003732  0C80 0000 6057          cmp.l     #88,D0
00003736  0058      
00003738  6710      6058          beq.s     vsprintf_73
0000373A  6000 0046 6059          bra       vsprintf_77
                    6060   vsprintf_76:
0000373E  0C80 0000 6061          cmp.l     #120,D0
00003742  0078      
00003744  6704      6062          beq.s     vsprintf_73
00003746  6000 003A 6063          bra       vsprintf_77
                    6064   vsprintf_73:
0000374A  2042      6065          move.l    D2,A0
0000374C  5282      6066          addq.l    #1,D2
0000374E  10BC 0030 6067          move.b    #48,(A0)
00003752  5287      6068          addq.l    #1,D7
00003754  206E 000C 6069          move.l    12(A6),A0
00003758  1010      6070          move.b    (A0),D0
0000375A  4880      6071          ext.w     D0
0000375C  48C0      6072          ext.l     D0
0000375E  0C80 0000 6073          cmp.l     #120,D0
00003762  0078      
00003764  6712      6074          beq.s     vsprintf_79
00003766  206E 000C 6075          move.l    12(A6),A0
0000376A  1010      6076          move.b    (A0),D0
0000376C  4880      6077          ext.w     D0
0000376E  48C0      6078          ext.l     D0
00003770  0C80 0000 6079          cmp.l     #88,D0
00003774  0058      
00003776  660A      6080          bne.s     vsprintf_77
                    6081   vsprintf_79:
00003778  2042      6082          move.l    D2,A0
0000377A  5282      6083          addq.l    #1,D2
0000377C  10BC 0078 6084          move.b    #120,(A0)
00003780  5287      6085          addq.l    #1,D7
                    6086   vsprintf_77:
00003782  2042      6087          move.l    D2,A0
00003784  4210      6088          clr.b     (A0)
00003786  206E 000C 6089          move.l    12(A6),A0
0000378A  1010      6090          move.b    (A0),D0
0000378C  4880      6091          ext.w     D0
0000378E  48C0      6092          ext.l     D0
00003790  0C80 0000 6093          cmp.l     #105,D0
00003794  0069      
00003796  6700 0076 6094          beq       vsprintf_82
0000379A  6E42      6095          bgt.s     vsprintf_93
0000379C  0C80 0000 6096          cmp.l     #99,D0
000037A0  0063      
000037A2  6700 0084 6097          beq       vsprintf_96
000037A6  6E1C      6098          bgt.s     vsprintf_94
000037A8  0C80 0000 6099          cmp.l     #88,D0
000037AC  0058      
000037AE  6700 005E 6100          beq       vsprintf_82
000037B2  6E00 0184 6101          bgt       vsprintf_80
000037B6  0C80 0000 6102          cmp.l     #69,D0
000037BA  0045      
000037BC  6700 0050 6103          beq       vsprintf_82
000037C0  6000 0176 6104          bra       vsprintf_80
                    6105   vsprintf_94:
000037C4  0C80 0000 6106          cmp.l     #101,D0
000037C8  0065      
000037CA  6700 0042 6107          beq       vsprintf_82
000037CE  6E00 0168 6108          bgt       vsprintf_80
000037D2  0C80 0000 6109          cmp.l     #100,D0
000037D6  0064      
000037D8  6734      6110          beq.s     vsprintf_82
000037DA  6000 015C 6111          bra       vsprintf_80
                    6112   vsprintf_93:
000037DE  0C80 0000 6113          cmp.l     #117,D0
000037E2  0075      
000037E4  6728      6114          beq.s     vsprintf_82
000037E6  6E1A      6115          bgt.s     vsprintf_95
000037E8  0C80 0000 6116          cmp.l     #115,D0
000037EC  0073      
000037EE  6700 0038 6117          beq       vsprintf_96
000037F2  6E00 0144 6118          bgt       vsprintf_80
000037F6  0C80 0000 6119          cmp.l     #111,D0
000037FA  006F      
000037FC  6710      6120          beq.s     vsprintf_82
000037FE  6000 0138 6121          bra       vsprintf_80
                    6122   vsprintf_95:
00003802  0C80 0000 6123          cmp.l     #120,D0
00003806  0078      
00003808  6704      6124          beq.s     vsprintf_82
0000380A  6000 012C 6125          bra       vsprintf_80
                    6126   vsprintf_82:
0000380E  4A2E FFD2 6127          tst.b     -46(A6)
00003812  6714      6128          beq.s     vsprintf_96
00003814  4A2E FFCD 6129          tst.b     -51(A6)
00003818  660E      6130          bne.s     vsprintf_96
0000381A  200D      6131          move.l    A5,D0
0000381C  9087      6132          sub.l     D7,D0
0000381E  4884      6133          ext.w     D4
00003820  48C4      6134          ext.l     D4
00003822  9084      6135          sub.l     D4,D0
00003824  2D40 FFFC 6136          move.l    D0,-4(A6)
                    6137   vsprintf_96:
00003828  202E FFFC 6138          move.l    -4(A6),D0
0000382C  0C80 0000 6139          cmp.l     #0,D0
00003830  0000      
00003832  6C04      6140          bge.s     vsprintf_98
00003834  42AE FFFC 6141          clr.l     -4(A6)
                    6142   vsprintf_98:
00003838  4A2E FFCD 6143          tst.b     -51(A6)
0000383C  6600 0030 6144          bne       vsprintf_104
00003840  4884      6145          ext.w     D4
00003842  48C4      6146          ext.l     D4
00003844  2004      6147          move.l    D4,D0
00003846  D0AE FFFC 6148          add.l     -4(A6),D0
0000384A  D087      6149          add.l     D7,D0
0000384C  1D40 FFD1 6150          move.b    D0,-47(A6)
                    6151   vsprintf_102:
00003850  102E FFD1 6152          move.b    -47(A6),D0
00003854  4880      6153          ext.w     D0
00003856  48C0      6154          ext.l     D0
00003858  220D      6155          move.l    A5,D1
0000385A  534D      6156          subq.w    #1,A5
0000385C  B081      6157          cmp.l     D1,D0
0000385E  6C0E      6158          bge.s     vsprintf_104
00003860  4878 0020 6159          pea       32
00003864  2F0A      6160          move.l    A2,-(A7)
00003866  4E93      6161          jsr       (A3)
00003868  504F      6162          addq.w    #8,A7
0000386A  5286      6163          addq.l    #1,D6
0000386C  60E2      6164          bra       vsprintf_102
                    6165   vsprintf_104:
0000386E  41EE FFD4 6166          lea       -44(A6),A0
00003872  2408      6167          move.l    A0,D2
                    6168   vsprintf_105:
00003874  2042      6169          move.l    D2,A0
00003876  4A10      6170          tst.b     (A0)
00003878  6716      6171          beq.s     vsprintf_107
0000387A  2042      6172          move.l    D2,A0
0000387C  5282      6173          addq.l    #1,D2
0000387E  1210      6174          move.b    (A0),D1
00003880  4881      6175          ext.w     D1
00003882  48C1      6176          ext.l     D1
00003884  2F01      6177          move.l    D1,-(A7)
00003886  2F0A      6178          move.l    A2,-(A7)
00003888  4E93      6179          jsr       (A3)
0000388A  504F      6180          addq.w    #8,A7
0000388C  5286      6181          addq.l    #1,D6
0000388E  60E4      6182          bra       vsprintf_105
                    6183   vsprintf_107:
00003890  202E FFFC 6184          move.l    -4(A6),D0
00003894  1D40 FFD1 6185          move.b    D0,-47(A6)
                    6186   vsprintf_108:
00003898  102E FFD1 6187          move.b    -47(A6),D0
0000389C  532E FFD1 6188          subq.b    #1,-47(A6)
000038A0  4A00      6189          tst.b     D0
000038A2  670E      6190          beq.s     vsprintf_110
000038A4  4878 0030 6191          pea       48
000038A8  2F0A      6192          move.l    A2,-(A7)
000038AA  4E93      6193          jsr       (A3)
000038AC  504F      6194          addq.w    #8,A7
000038AE  5286      6195          addq.l    #1,D6
000038B0  60E6      6196          bra       vsprintf_108
                    6197   vsprintf_110:
000038B2  2043      6198          move.l    D3,A0
000038B4  4A10      6199          tst.b     (A0)
000038B6  6700 0048 6200          beq       vsprintf_113
000038BA  206E 000C 6201          move.l    12(A6),A0
000038BE  1010      6202          move.b    (A0),D0
000038C0  4880      6203          ext.w     D0
000038C2  48C0      6204          ext.l     D0
000038C4  0C80 0000 6205          cmp.l     #115,D0
000038C8  0073      
000038CA  670C      6206          beq.s     vsprintf_116
000038CC  6E18      6207          bgt.s     vsprintf_119
000038CE  0C80 0000 6208          cmp.l     #99,D0
000038D2  0063      
000038D4  6702      6209          beq.s     vsprintf_116
000038D6  600E      6210          bra.s     vsprintf_119
                    6211   vsprintf_116:
000038D8  2005      6212          move.l    D5,D0
000038DA  5385      6213          subq.l    #1,D5
000038DC  0C80 0000 6214          cmp.l     #0,D0
000038E0  0000      
000038E2  6E02      6215          bgt.s     vsprintf_119
000038E4  6016      6216          bra.s     vsprintf_115
                    6217   vsprintf_119:
000038E6  2043      6218          move.l    D3,A0
000038E8  5283      6219          addq.l    #1,D3
000038EA  1210      6220          move.b    (A0),D1
000038EC  4881      6221          ext.w     D1
000038EE  48C1      6222          ext.l     D1
000038F0  2F01      6223          move.l    D1,-(A7)
000038F2  2F0A      6224          move.l    A2,-(A7)
000038F4  4E93      6225          jsr       (A3)
000038F6  504F      6226          addq.w    #8,A7
000038F8  5286      6227          addq.l    #1,D6
000038FA  6002      6228          bra.s     vsprintf_112
                    6229   vsprintf_115:
000038FC  6002      6230          bra.s     vsprintf_113
                    6231   vsprintf_112:
000038FE  60B2      6232          bra       vsprintf_110
                    6233   vsprintf_113:
00003900  4A2E FFCD 6234          tst.b     -51(A6)
00003904  6700 0030 6235          beq       vsprintf_125
00003908  4884      6236          ext.w     D4
0000390A  48C4      6237          ext.l     D4
0000390C  2004      6238          move.l    D4,D0
0000390E  D0AE FFFC 6239          add.l     -4(A6),D0
00003912  D087      6240          add.l     D7,D0
00003914  1D40 FFD1 6241          move.b    D0,-47(A6)
                    6242   vsprintf_123:
00003918  102E FFD1 6243          move.b    -47(A6),D0
0000391C  4880      6244          ext.w     D0
0000391E  48C0      6245          ext.l     D0
00003920  220D      6246          move.l    A5,D1
00003922  534D      6247          subq.w    #1,A5
00003924  B081      6248          cmp.l     D1,D0
00003926  6C0E      6249          bge.s     vsprintf_125
00003928  4878 0020 6250          pea       32
0000392C  2F0A      6251          move.l    A2,-(A7)
0000392E  4E93      6252          jsr       (A3)
00003930  504F      6253          addq.w    #8,A7
00003932  5386      6254          subq.l    #1,D6
00003934  60E2      6255          bra       vsprintf_123
                    6256   vsprintf_125:
00003936  6014      6257          bra.s     vsprintf_81
                    6258   vsprintf_80:
00003938  206E 000C 6259          move.l    12(A6),A0
0000393C  1210      6260          move.b    (A0),D1
0000393E  4881      6261          ext.w     D1
00003940  48C1      6262          ext.l     D1
00003942  2F01      6263          move.l    D1,-(A7)
00003944  2F0A      6264          move.l    A2,-(A7)
00003946  4E93      6265          jsr       (A3)
00003948  504F      6266          addq.w    #8,A7
0000394A  5286      6267          addq.l    #1,D6
                    6268   vsprintf_81:
0000394C  52AE 000C 6269          addq.l    #1,12(A6)
                    6270   vsprintf_2:
00003950  6000 F9D6 6271          bra       vsprintf_1
                    6272   vsprintf_3:
00003954  4A92      6273          tst.l     (A2)
00003956  6710      6274          beq.s     vsprintf_126
00003958  4201      6275          clr.b     D1
0000395A  C2BC 0000 6276          and.l     #255,D1
0000395E  00FF      
00003960  2F01      6277          move.l    D1,-(A7)
00003962  2F0A      6278          move.l    A2,-(A7)
00003964  4E93      6279          jsr       (A3)
00003966  504F      6280          addq.w    #8,A7
                    6281   vsprintf_126:
00003968  2006      6282          move.l    D6,D0
0000396A  4CDF 3CFC 6283          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000396E  4E5E      6284          unlk      A6
00003970  4E75      6285          rts
                    6286   @itoa_convert:
00003972  4E56 0000 6287          link      A6,#0
00003976  48E7 3C00 6288          movem.l   D2/D3/D4/D5,-(A7)
0000397A  242E 0008 6289          move.l    8(A6),D2
0000397E  262E 0010 6290          move.l    16(A6),D3
00003982  2A2E 000C 6291          move.l    12(A6),D5
00003986  2F05      6292          move.l    D5,-(A7)
00003988  2F03      6293          move.l    D3,-(A7)
0000398A  6100 F614 6294          bsr       ULDIV
0000398E  202F 0004 6295          move.l    4(A7),D0
00003992  504F      6296          addq.w    #8,A7
00003994  2800      6297          move.l    D0,D4
00003996  BA83      6298          cmp.l     D3,D5
00003998  651A      6299          blo.s     @itoa_convert_1
0000399A  2F03      6300          move.l    D3,-(A7)
0000399C  2F05      6301          move.l    D5,-(A7)
0000399E  2F03      6302          move.l    D3,-(A7)
000039A0  6100 F5FE 6303          bsr       ULDIV
000039A4  2217      6304          move.l    (A7),D1
000039A6  504F      6305          addq.w    #8,A7
000039A8  2F01      6306          move.l    D1,-(A7)
000039AA  2F02      6307          move.l    D2,-(A7)
000039AC  61C4      6308          bsr       @itoa_convert
000039AE  DEFC 000C 6309          add.w     #12,A7
000039B2  2400      6310          move.l    D0,D2
                    6311   @itoa_convert_1:
000039B4  0C84 0000 6312          cmp.l     #9,D4
000039B8  0009      
000039BA  6E0A      6313          bgt.s     @itoa_convert_3
000039BC  2004      6314          move.l    D4,D0
000039BE  0680 0000 6315          add.l     #48,D0
000039C2  0030      
000039C4  600E      6316          bra.s     @itoa_convert_4
                    6317   @itoa_convert_3:
000039C6  2004      6318          move.l    D4,D0
000039C8  0680 0000 6319          add.l     #97,D0
000039CC  0061      
000039CE  0480 0000 6320          sub.l     #10,D0
000039D2  000A      
                    6321   @itoa_convert_4:
000039D4  2042      6322          move.l    D2,A0
000039D6  1080      6323          move.b    D0,(A0)
000039D8  2002      6324          move.l    D2,D0
000039DA  5280      6325          addq.l    #1,D0
000039DC  4CDF 003C 6326          movem.l   (A7)+,D2/D3/D4/D5
000039E0  4E5E      6327          unlk      A6
000039E2  4E75      6328          rts
                    6329   _ltoa:
000039E4  4E56 0000 6330          link      A6,#0
000039E8  48E7 3C00 6331          movem.l   D2/D3/D4/D5,-(A7)
000039EC  242E 0008 6332          move.l    8(A6),D2
000039F0  262E 000C 6333          move.l    12(A6),D3
000039F4  2A2E 0010 6334          move.l    16(A6),D5
000039F8  2803      6335          move.l    D3,D4
000039FA  0C85 0000 6336          cmp.l     #2,D5
000039FE  0002      
00003A00  6D08      6337          blt.s     ltoa_3
00003A02  0C85 0000 6338          cmp.l     #36,D5
00003A06  0024      
00003A08  6F06      6339          ble.s     ltoa_1
                    6340   ltoa_3:
00003A0A  2003      6341          move.l    D3,D0
00003A0C  6000 0052 6342          bra       ltoa_4
                    6343   ltoa_1:
00003A10  0C85 0000 6344          cmp.l     #10,D5
00003A14  000A      
00003A16  6600 0032 6345          bne       ltoa_5
00003A1A  0C82 0000 6346          cmp.l     #0,D2
00003A1E  0000      
00003A20  6C28      6347          bge.s     ltoa_5
00003A22  2002      6348          move.l    D2,D0
00003A24  4480      6349          neg.l     D0
00003A26  2400      6350          move.l    D0,D2
00003A28  0C82 0000 6351          cmp.l     #0,D2
00003A2C  0000      
00003A2E  6C12      6352          bge.s     ltoa_7
00003A30  4879 0000 6353          pea       @itoa_1
00003A34  46CC      
00003A36  2F03      6354          move.l    D3,-(A7)
00003A38  6100 F556 6355          bsr       _strcpy
00003A3C  504F      6356          addq.w    #8,A7
00003A3E  2003      6357          move.l    D3,D0
00003A40  601E      6358          bra.s     ltoa_4
                    6359   ltoa_7:
00003A42  2044      6360          move.l    D4,A0
00003A44  5284      6361          addq.l    #1,D4
00003A46  10BC 002D 6362          move.b    #45,(A0)
                    6363   ltoa_5:
00003A4A  2F05      6364          move.l    D5,-(A7)
00003A4C  2F02      6365          move.l    D2,-(A7)
00003A4E  2F04      6366          move.l    D4,-(A7)
00003A50  6100 FF20 6367          bsr       @itoa_convert
00003A54  DEFC 000C 6368          add.w     #12,A7
00003A58  2800      6369          move.l    D0,D4
00003A5A  2044      6370          move.l    D4,A0
00003A5C  4210      6371          clr.b     (A0)
00003A5E  2003      6372          move.l    D3,D0
                    6373   ltoa_4:
00003A60  4CDF 003C 6374          movem.l   (A7)+,D2/D3/D4/D5
00003A64  4E5E      6375          unlk      A6
00003A66  4E75      6376          rts
                    6377   _ultoa:
00003A68  4E56 0000 6378          link      A6,#0
00003A6C  48E7 3800 6379          movem.l   D2/D3/D4,-(A7)
00003A70  262E 0010 6380          move.l    16(A6),D3
00003A74  282E 000C 6381          move.l    12(A6),D4
00003A78  2404      6382          move.l    D4,D2
00003A7A  0C83 0000 6383          cmp.l     #2,D3
00003A7E  0002      
00003A80  6D08      6384          blt.s     ultoa_3
00003A82  0C83 0000 6385          cmp.l     #36,D3
00003A86  0024      
00003A88  6F04      6386          ble.s     ultoa_1
                    6387   ultoa_3:
00003A8A  2004      6388          move.l    D4,D0
00003A8C  6018      6389          bra.s     ultoa_4
                    6390   ultoa_1:
00003A8E  2F03      6391          move.l    D3,-(A7)
00003A90  2F2E 0008 6392          move.l    8(A6),-(A7)
00003A94  2F02      6393          move.l    D2,-(A7)
00003A96  6100 FEDA 6394          bsr       @itoa_convert
00003A9A  DEFC 000C 6395          add.w     #12,A7
00003A9E  2400      6396          move.l    D0,D2
00003AA0  2042      6397          move.l    D2,A0
00003AA2  4210      6398          clr.b     (A0)
00003AA4  2004      6399          move.l    D4,D0
                    6400   ultoa_4:
00003AA6  4CDF 001C 6401          movem.l   (A7)+,D2/D3/D4
00003AAA  4E5E      6402          unlk      A6
00003AAC  4E75      6403          rts
                    6404   _itoa:
00003AAE  4E56 0000 6405          link      A6,#0
00003AB2  2F2E 0010 6406          move.l    16(A6),-(A7)
00003AB6  2F2E 000C 6407          move.l    12(A6),-(A7)
00003ABA  2F2E 0008 6408          move.l    8(A6),-(A7)
00003ABE  6100 FF24 6409          bsr       _ltoa
00003AC2  DEFC 000C 6410          add.w     #12,A7
00003AC6  4E5E      6411          unlk      A6
00003AC8  4E75      6412          rts
                    6413   _strlen:
00003ACA  206F 0004 6414          move.l    (4,A7),A0
00003ACE  2248      6415          move.l    A0,A1
                    6416   strlen_1:
00003AD0  4A19      6417          tst.b     (A1)+
00003AD2  66FC      6418          bne       strlen_1
00003AD4  2009      6419          move.l    A1,D0
00003AD6  9088      6420          sub.l     A0,D0
00003AD8  5380      6421          subq.l    #1,D0
00003ADA  4E75      6422          rts
                    6423          section   const
                    6424   
                    6425   @m68kde~1_1:
00003ADC  0D0A 00   6426          dc.b      13,10,0
                    6427   @m68kde~1_2:
00003AE0  0D53 7769 6428          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003AE4  7463 6865 
00003AE8  7320 5357 
00003AEC  5B        
00003AED  372D 305D 6429          dc.b      55,45,48,93,32,61,32,0
00003AF1  203D 2000 
                    6430   @m68kde~1_3:
00003AF6  3000      6431          dc.b      48,0
                    6432   @m68kde~1_4:
00003AF8  3100      6433          dc.b      49,0
                    6434   @m68kde~1_5:
00003AFA  0D0A 4475 6435          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003AFE  6D70 204D 
00003B02  656D 6F72 
00003B06  79        
00003B07  2042 6C6F 6436          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003B0B  636B 3A20 
00003B0F  3C45 5343 
00003B13  3E20      
00003B15  746F 2041 6437          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003B19  626F 7274 
00003B1D  2C20 3C53 
00003B21  50        
00003B22  4143 453E 6438          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003B26  2074 6F20 
00003B2A  436F 6E74 
00003B2E  69        
00003B2F  6E75 6500 6439          dc.b      110,117,101,0
                    6440   @m68kde~1_6:
00003B34  0D0A 456E 6441          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003B38  7465 7220 
00003B3C  5374 6172 
00003B40  74        
00003B41  2041 6464 6442          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003B45  7265 7373 
00003B49  3A20 00   
                    6443   @m68kde~1_7:
00003B4C  0D0A 2530 6444          dc.b      13,10,37,48,56,120,32,0
00003B50  3878 2000 
                    6445   @m68kde~1_8:
00003B54  2530 3258 6446          dc.b      37,48,50,88,0
00003B58  00        
                    6447   @m68kde~1_9:
00003B5A  2020 00   6448          dc.b      32,32,0
                    6449   @m68kde~1_10:
00003B5E  0D0A 4669 6450          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003B62  6C6C 204D 
00003B66  656D 6F72 
00003B6A  79        
00003B6B  2042 6C6F 6451          dc.b      32,66,108,111,99,107,0
00003B6F  636B 00   
                    6452   @m68kde~1_11:
00003B72  0D0A 456E 6453          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003B76  7465 7220 
00003B7A  456E 6420 
00003B7E  41        
00003B7F  6464 7265 6454          dc.b      100,100,114,101,115,115,58,32,0
00003B83  7373 3A20 
00003B87  00        
                    6455   @m68kde~1_12:
00003B88  0D0A 456E 6456          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003B8C  7465 7220 
00003B90  4669 6C6C 
00003B94  20        
00003B95  4461 7461 6457          dc.b      68,97,116,97,58,32,0
00003B99  3A20 00   
                    6458   @m68kde~1_13:
00003B9C  0D0A 4669 6459          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003BA0  6C6C 696E 
00003BA4  6720 4164 
00003BA8  64        
00003BA9  7265 7373 6460          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003BAD  6573 205B 
00003BB1  2425 3038 
00003BB5  58        
00003BB6  202D 2024 6461          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003BBA  2530 3858 
00003BBE  5D20 7769 
00003BC2  7468      
00003BC4  2024 2530 6462          dc.b      32,36,37,48,50,88,0
00003BC8  3258 00   
                    6463   @m68kde~1_14:
00003BCC  0D0A 5573 6464          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003BD0  6520 4879 
00003BD4  7065 7254 
00003BD8  65        
00003BD9  726D 696E 6465          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003BDD  616C 2074 
00003BE1  6F20 5365 
00003BE5  6E64 2054 6466          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003BE9  6578 7420 
00003BED  4669 6C65 
00003BF1  2028 2E68 6467          dc.b      32,40,46,104,101,120,41,13,10,0
00003BF5  6578 290D 
00003BF9  0A00      
                    6468   @m68kde~1_15:
00003BFC  0D0A 4C6F 6469          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003C00  6164 2046 
00003C04  6169 6C65 
00003C08  64        
00003C09  2061 7420 6470          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003C0D  4164 6472 
00003C11  6573 7320 
00003C15  3D        
00003C16  205B 2425 6471          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003C1A  3038 585D 
00003C1E  0D0A 00   
                    6472   @m68kde~1_16:
00003C22  0D0A 5375 6473          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003C26  6363 6573 
00003C2A  733A 2044 
00003C2E  6F        
00003C2F  776E 6C6F 6474          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003C33  6164 6564 
00003C37  2025 6420 
00003C3B  6279 7465 6475          dc.b      98,121,116,101,115,13,10,0
00003C3F  730D 0A00 
                    6476   @m68kde~1_17:
00003C44  0D0A 4578 6477          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003C48  616D 696E 
00003C4C  6520 616E 
00003C50  64        
00003C51  2043 6861 6478          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003C55  6E67 6520 
00003C59  4D65 6D6F 
00003C5D  72        
00003C5E  7900      6479          dc.b      121,0
                    6480   @m68kde~1_18:
00003C60  0D0A 3C45 6481          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003C64  5343 3E20 
00003C68  746F 2053 
00003C6C  746F      
00003C6E  702C 203C 6482          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003C72  5350 4143 
00003C76  453E 2074 
00003C7A  6F20      
00003C7C  4164 7661 6483          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003C80  6E63 652C 
00003C84  2027 2D27 
00003C88  2074      
00003C8A  6F20 476F 6484          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003C8E  2042 6163 
00003C92  6B2C 203C 
00003C96  4441      
00003C98  5441 3E20 6485          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003C9C  746F 2063 
00003CA0  6861 6E67 
00003CA4  65        
00003CA5  00        6486          dc.b      0
                    6487   @m68kde~1_19:
00003CA6  0D0A 456E 6488          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003CAA  7465 7220 
00003CAE  4164 6472 
00003CB2  65        
00003CB3  7373 3A20 6489          dc.b      115,115,58,32,0
00003CB7  00        
                    6490   @m68kde~1_20:
00003CB8  0D0A 5B25 6491          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003CBC  3038 785D 
00003CC0  203A 2025 
00003CC4  3032 78   
00003CC7  2020 00   6492          dc.b      32,32,0
                    6493   @m68kde~1_21:
00003CCA  0D0A 5761 6494          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003CCE  726E 696E 
00003CD2  6720 4368 
00003CD6  61        
00003CD7  6E67 6520 6495          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003CDB  4661 696C 
00003CDF  6564 3A20 
00003CE3  57        
00003CE4  726F 7465 6496          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003CE8  205B 2530 
00003CEC  3278 5D2C 
00003CF0  20        
00003CF1  5265 6164 6497          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003CF5  205B 2530 
00003CF9  3278 5D00 
                    6498   @m68kde~1_22:
00003CFE  2425 3038 6499          dc.b      36,37,48,56,88,32,32,0
00003D02  5820 2000 
                    6500   @m68kde~1_23:
00003D06  2000      6501          dc.b      32,0
                    6502   @m68kde~1_24:
00003D08  2E00      6503          dc.b      46,0
                    6504   @m68kde~1_25:
00003D0A  2563 00   6505          dc.b      37,99,0
                    6506   @m68kde~1_26:
00003D0E  00        6507          dc.b      0
                    6508   @m68kde~1_27:
00003D10  0D0A 0D0A 6509          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003D14  2044 3020 
00003D18  3D20 2425 
00003D1C  3038 58   
00003D1F  2020 4130 6510          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003D23  203D 2024 
00003D27  2530 3858 
00003D2B  00        
                    6511   @m68kde~1_28:
00003D2C  0D0A 2044 6512          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003D30  3120 3D20 
00003D34  2425 3038 
00003D38  5820 20   
00003D3B  4131 203D 6513          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003D3F  2024 2530 
00003D43  3858 00   
                    6514   @m68kde~1_29:
00003D46  0D0A 2044 6515          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003D4A  3220 3D20 
00003D4E  2425 3038 
00003D52  5820 20   
00003D55  4132 203D 6516          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003D59  2024 2530 
00003D5D  3858 00   
                    6517   @m68kde~1_30:
00003D60  0D0A 2044 6518          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003D64  3320 3D20 
00003D68  2425 3038 
00003D6C  5820 20   
00003D6F  4133 203D 6519          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003D73  2024 2530 
00003D77  3858 00   
                    6520   @m68kde~1_31:
00003D7A  0D0A 2044 6521          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003D7E  3420 3D20 
00003D82  2425 3038 
00003D86  5820 20   
00003D89  4134 203D 6522          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003D8D  2024 2530 
00003D91  3858 00   
                    6523   @m68kde~1_32:
00003D94  0D0A 2044 6524          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003D98  3520 3D20 
00003D9C  2425 3038 
00003DA0  5820 20   
00003DA3  4135 203D 6525          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003DA7  2024 2530 
00003DAB  3858 00   
                    6526   @m68kde~1_33:
00003DAE  0D0A 2044 6527          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003DB2  3620 3D20 
00003DB6  2425 3038 
00003DBA  5820 20   
00003DBD  4136 203D 6528          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003DC1  2024 2530 
00003DC5  3858 00   
                    6529   @m68kde~1_34:
00003DC8  0D0A 2044 6530          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003DCC  3720 3D20 
00003DD0  2425 3038 
00003DD4  5820 20   
00003DD7  4137 203D 6531          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003DDB  2024 2530 
00003DDF  3858 00   
                    6532   @m68kde~1_35:
00003DE2  0D0A 0D0A 6533          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003DE6  5553 5020 
00003DEA  3D20 2425 
00003DEE  3038 58   
00003DF1  2020 2841 6534          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003DF5  3729 2055 
00003DF9  7365 7220 
00003DFD  5350      
00003DFF  00        6535          dc.b      0
                    6536   @m68kde~1_36:
00003E00  0D0A 5353 6537          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003E04  5020 3D20 
00003E08  2425 3038 
00003E0C  5820 20   
00003E0F  2841 3729 6538          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003E13  2053 7570 
00003E17  6572 7669 
00003E1B  73        
00003E1C  6F72 2053 6539          dc.b      111,114,32,83,80,0
00003E20  5000      
                    6540   @m68kde~1_37:
00003E22  0D0A 2053 6541          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003E26  5220 3D20 
00003E2A  2425 3034 
00003E2E  5820 20   
00003E31  2000      6542          dc.b      32,0
                    6543   @m68kde~1_38:
00003E34  2020 205B 6544          dc.b      32,32,32,91,0
00003E38  00        
                    6545   @m68kde~1_39:
00003E3A  0D0A 2050 6546          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003E3E  4320 3D20 
00003E42  2425 3038 
00003E46  5820 20   
00003E49  00        6547          dc.b      0
                    6548   @m68kde~1_40:
00003E4A  5B40 2042 6549          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003E4E  5245 414B 
00003E52  504F 494E 
00003E56  545D 00   
                    6550   @m68kde~1_41:
00003E5A  0D0A 5750 6551          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003E5E  2564 203D 
00003E62  2025 7300 
                    6552   @m68kde~1_42:
00003E66  0D0A 0D0A 6553          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003E6A  0D0A 0D0A 
00003E6E  0D0A 0D0A 
00003E72  5369 6E   
00003E75  676C 6520 6554          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003E79  5374 6570 
00003E7D  2020 3A5B 
00003E81  4F        
00003E82  4E5D 00   6555          dc.b      78,93,0
                    6556   @m68kde~1_43:
00003E86  0D0A 4272 6557          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003E8A  6561 6B20 
00003E8E  506F 696E 
00003E92  74        
00003E93  7320 3A5B 6558          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003E97  4469 7361 
00003E9B  626C 6564 
00003E9F  5D        
00003EA0  00        6559          dc.b      0
                    6560   @m68kde~1_44:
00003EA2  0D0A 5072 6561          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003EA6  6573 7320 
00003EAA  3C53 5041 
00003EAE  4345      
00003EB0  3E20 746F 6562          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003EB4  2045 7865 
00003EB8  6375 7465 
00003EBC  20        
00003EBD  4E65 7874 6563          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003EC1  2049 6E73 
00003EC5  7472 7563 
00003EC9  7469 6F6E 6564          dc.b      116,105,111,110,0
00003ECD  00        
                    6565   @m68kde~1_45:
00003ECE  0D0A 5072 6566          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003ED2  6573 7320 
00003ED6  3C45 5343 
00003EDA  3E20      
00003EDC  746F 2052 6567          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003EE0  6573 756D 
00003EE4  6520 5072 
00003EE8  6F67 7261 6568          dc.b      111,103,114,97,109,0
00003EEC  6D00      
                    6569   @m68kde~1_46:
00003EEE  0D0A 496C 6570          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003EF2  6C65 6761 
00003EF6  6C20 4461 
00003EFA  74        
00003EFB  6120 5265 6571          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003EFF  6769 7374 
00003F03  6572 203A 
00003F07  20        
00003F08  5573 6520 6572          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003F0C  4430 2D44 
00003F10  372E 2E2E 
00003F14  2E2E      
00003F16  0D0A 00   6573          dc.b      13,10,0
                    6574   @m68kde~1_47:
00003F1A  0D0A 4425 6575          dc.b      13,10,68,37,99,32,61,32,0
00003F1E  6320 3D20 
00003F22  00        
                    6576   @m68kde~1_48:
00003F24  0D0A 496C 6577          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003F28  6C65 6761 
00003F2C  6C20 4164 
00003F30  64        
00003F31  7265 7373 6578          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003F35  2052 6567 
00003F39  6973 7465 
00003F3D  7220 3A20 6579          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003F41  5573 6520 
00003F45  4130 2D41 
00003F49  372E      
00003F4B  2E2E 2E2E 6580          dc.b      46,46,46,46,13,10,0
00003F4F  0D0A 00   
                    6581   @m68kde~1_49:
00003F52  0D0A 4125 6582          dc.b      13,10,65,37,99,32,61,32,0
00003F56  6320 3D20 
00003F5A  00        
                    6583   @m68kde~1_50:
00003F5C  0D0A 5573 6584          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003F60  6572 2053 
00003F64  5020 3D20 
00003F68  00        
                    6585   @m68kde~1_51:
00003F6A  0D0A 496C 6586          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003F6E  6C65 6761 
00003F72  6C20 5265 
00003F76  67        
00003F77  6973 7465 6587          dc.b      105,115,116,101,114,46,46,46,46,0
00003F7B  722E 2E2E 
00003F7F  2E00      
                    6588   @m68kde~1_52:
00003F82  0D0A 5379 6589          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003F86  7374 656D 
00003F8A  2053 5020 
00003F8E  3D        
00003F8F  2000      6590          dc.b      32,0
                    6591   @m68kde~1_53:
00003F92  0D0A 5043 6592          dc.b      13,10,80,67,32,61,32,0
00003F96  203D 2000 
                    6593   @m68kde~1_54:
00003F9A  0D0A 5352 6594          dc.b      13,10,83,82,32,61,32,0
00003F9E  203D 2000 
                    6595   @m68kde~1_55:
00003FA2  0D0A 496C 6596          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003FA6  6C65 6761 
00003FAA  6C20 5265 
00003FAE  67        
00003FAF  6973 7465 6597          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003FB3  723A 2055 
00003FB7  7365 2041 
00003FBB  30        
00003FBC  2D41 372C 6598          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003FC0  2044 302D 
00003FC4  4437 2C20 
00003FC8  5353 50   
00003FCB  2C20 5553 6599          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003FCF  502C 2050 
00003FD3  4320 6F72 
00003FD7  2053      
00003FD9  520D 0A00 6600          dc.b      82,13,10,0
                    6601   @m68kde~1_56:
00003FDE  0D0A 0D0A 6602          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003FE2  4E75 6D20 
00003FE6  2020 2020 
00003FEA  4164      
00003FEC  6472 6573 6603          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003FF0  7320 2020 
00003FF4  2020 2049 
00003FF8  6E        
00003FF9  7374 7275 6604          dc.b      115,116,114,117,99,116,105,111,110,0
00003FFD  6374 696F 
00004001  6E00      
                    6605   @m68kde~1_57:
00004004  0D0A 2D2D 6606          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004008  2D20 2020 
0000400C  2020 2D2D 
00004010  2D2D 2D   
00004013  2D2D 2D2D 6607          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004017  2020 2020 
0000401B  2D2D 2D2D 
0000401F  2D2D 2D   
00004022  2D2D 2D2D 6608          dc.b      45,45,45,45,0
00004026  00        
                    6609   @m68kde~1_58:
00004028  0D0A 4E6F 6610          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000402C  2042 7265 
00004030  616B 506F 
00004034  69        
00004035  6E74 7320 6611          dc.b      110,116,115,32,83,101,116,0
00004039  5365 7400 
                    6612   @m68kde~1_59:
0000403E  0D0A 2533 6613          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004042  6420 2020 
00004046  2020 2425 
0000404A  3038 78   
0000404D  00        6614          dc.b      0
                    6615   @m68kde~1_60:
0000404E  0D0A 4E75 6616          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004052  6D20 2020 
00004056  2020 4164 
0000405A  6472      
0000405C  6573 7300 6617          dc.b      101,115,115,0
                    6618   @m68kde~1_61:
00004060  0D0A 2D2D 6619          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004064  2D20 2020 
00004068  2020 2D2D 
0000406C  2D2D 2D   
0000406F  2D2D 2D2D 6620          dc.b      45,45,45,45,0
00004073  00        
                    6621   @m68kde~1_62:
00004074  0D0A 4E6F 6622          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004078  2057 6174 
0000407C  6368 506F 
00004080  69        
00004081  6E74 7320 6623          dc.b      110,116,115,32,83,101,116,0
00004085  5365 7400 
                    6624   @m68kde~1_63:
0000408A  0D0A 456E 6625          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000408E  7465 7220 
00004092  4272 6561 
00004096  6B        
00004097  2050 6F69 6626          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000409B  6E74 204E 
0000409F  756D 6265 
000040A3  72        
000040A4  3A20 00   6627          dc.b      58,32,0
                    6628   @m68kde~1_64:
000040A8  0D0A 496C 6629          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000040AC  6C65 6761 
000040B0  6C20 5261 
000040B4  6E        
000040B5  6765 203A 6630          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000040B9  2055 7365 
000040BD  2030 202D 
000040C1  2037      
000040C3  00        6631          dc.b      0
                    6632   @m68kde~1_65:
000040C4  0D0A 4272 6633          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000040C8  6561 6B20 
000040CC  506F 696E 
000040D0  74        
000040D1  2043 6C65 6634          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000040D5  6172 6564 
000040D9  2E2E 2E2E 
000040DD  2E        
000040DE  0D0A 00   6635          dc.b      13,10,0
                    6636   @m68kde~1_66:
000040E2  0D0A 4272 6637          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000040E6  6561 6B20 
000040EA  506F 696E 
000040EE  74        
000040EF  2077 6173 6638          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000040F3  6E27 7420 
000040F7  5365 742E 
000040FB  2E        
000040FC  2E2E 2E00 6639          dc.b      46,46,46,0
                    6640   @m68kde~1_67:
00004100  0D0A 456E 6641          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004104  7465 7220 
00004108  5761 7463 
0000410C  68        
0000410D  2050 6F69 6642          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004111  6E74 204E 
00004115  756D 6265 
00004119  72        
0000411A  3A20 00   6643          dc.b      58,32,0
                    6644   @m68kde~1_68:
0000411E  0D0A 5761 6645          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004122  7463 6820 
00004126  506F 696E 
0000412A  74        
0000412B  2043 6C65 6646          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000412F  6172 6564 
00004133  2E2E 2E2E 
00004137  2E        
00004138  0D0A 00   6647          dc.b      13,10,0
                    6648   @m68kde~1_69:
0000413C  0D0A 5761 6649          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004140  7463 6820 
00004144  506F 696E 
00004148  74        
00004149  2057 6173 6650          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000414D  206E 6F74 
00004151  2053 6574 
00004155  2E        
00004156  2E2E 2E2E 6651          dc.b      46,46,46,46,0
0000415A  00        
                    6652   @m68kde~1_70:
0000415C  0D0A 4E6F 6653          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004160  2046 5245 
00004164  4520 4272 
00004168  6561      
0000416A  6B20 506F 6654          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000416E  696E 7473 
00004172  2E2E 2E2E 
00004176  2E        
00004177  00        6655          dc.b      0
                    6656   @m68kde~1_71:
00004178  0D0A 4272 6657          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000417C  6561 6B20 
00004180  506F 696E 
00004184  74        
00004185  2041 6464 6658          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004189  7265 7373 
0000418D  3A20 00   
                    6659   @m68kde~1_72:
00004190  0D0A 4572 6660          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004194  726F 7220 
00004198  3A20 4272 
0000419C  65        
0000419D  616B 2050 6661          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000041A1  6F69 6E74 
000041A5  7320 4341 
000041A9  4E        
000041AA  4E4F 5420 6662          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000041AE  6265 2073 
000041B2  6574 2061 
000041B6  74        
000041B7  204F 4444 6663          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000041BB  2061 6464 
000041BF  7265 7373 
000041C3  65        
000041C4  7300      6664          dc.b      115,0
                    6665   @m68kde~1_73:
000041C6  0D0A 4572 6666          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000041CA  726F 7220 
000041CE  3A20 4272 
000041D2  65        
000041D3  616B 2050 6667          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000041D7  6F69 6E74 
000041DB  7320 4341 
000041DF  4E        
000041E0  4E4F 5420 6668          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000041E4  6265 2073 
000041E8  6574 2066 
000041EC  6F        
000041ED  7220 524F 6669          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000041F1  4D20 696E 
000041F5  2052 616E 
000041F9  67        
000041FA  6520 3A20 6670          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000041FE  5B24 302D 
00004202  2430 3030 
00004206  3037 46   
00004209  4646 5D00 6671          dc.b      70,70,93,0
                    6672   @m68kde~1_74:
0000420E  0D0A 4572 6673          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004212  726F 723A 
00004216  2042 7265 
0000421A  61        
0000421B  6B20 506F 6674          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000421F  696E 7420 
00004223  416C 7265 
00004227  6164 7920 6675          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000422B  4578 6973 
0000422F  7473 2061 
00004233  74        
00004234  2041 6464 6676          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004238  7265 7373 
0000423C  203A 2025 
00004240  30        
00004241  3878 0D0A 6677          dc.b      56,120,13,10,0
00004245  00        
                    6678   @m68kde~1_75:
00004246  0D0A 4272 6679          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000424A  6561 6B20 
0000424E  506F 696E 
00004252  74        
00004253  2053 6574 6680          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004257  2061 7420 
0000425B  4164 6472 
0000425F  65        
00004260  7373 3A20 6681          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004264  5B24 2530 
00004268  3878 5D00 
                    6682   @m68kde~1_76:
0000426C  0D0A 4E6F 6683          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004270  2046 5245 
00004274  4520 5761 
00004278  7463      
0000427A  6820 506F 6684          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000427E  696E 7473 
00004282  2E2E 2E2E 
00004286  2E        
00004287  00        6685          dc.b      0
                    6686   @m68kde~1_77:
00004288  0D0A 5761 6687          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000428C  7463 6820 
00004290  506F 696E 
00004294  74        
00004295  2041 6464 6688          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004299  7265 7373 
0000429D  3A20 00   
                    6689   @m68kde~1_78:
000042A0  0D0A 4572 6690          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000042A4  726F 723A 
000042A8  2057 6174 
000042AC  63        
000042AD  6820 506F 6691          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000042B1  696E 7420 
000042B5  416C 7265 
000042B9  6164 7920 6692          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000042BD  5365 7420 
000042C1  6174 2041 
000042C5  64        
000042C6  6472 6573 6693          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000042CA  7320 3A20 
000042CE  2530 3878 
000042D2  0D        
000042D3  0A00      6694          dc.b      10,0
                    6695   @m68kde~1_79:
000042D6  0D0A 5761 6696          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000042DA  7463 6820 
000042DE  506F 696E 
000042E2  74        
000042E3  2053 6574 6697          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000042E7  2061 7420 
000042EB  4164 6472 
000042EF  65        
000042F0  7373 3A20 6698          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000042F4  5B24 2530 
000042F8  3878 5D00 
                    6699   @m68kde~1_80:
000042FC  0D0A 0D0A 6700          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004300  0D0A 0D0A 
00004304  4042 5245 
00004308  414B 50   
0000430B  4F49 4E54 6701          dc.b      79,73,78,84,0
0000430F  00        
                    6702   @m68kde~1_81:
00004310  0D0A 5369 6703          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004314  6E67 6C65 
00004318  2053 7465 
0000431C  70        
0000431D  203A 205B 6704          dc.b      32,58,32,91,79,78,93,0
00004321  4F4E 5D00 
                    6705   @m68kde~1_82:
00004326  0D0A 4272 6706          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000432A  6561 6B50 
0000432E  6F69 6E74 
00004332  73        
00004333  203A 205B 6707          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004337  456E 6162 
0000433B  6C65 645D 
0000433F  00        
                    6708   @m68kde~1_83:
00004340  0D0A 5072 6709          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004344  6573 7320 
00004348  3C45 5343 
0000434C  3E20      
0000434E  746F 2052 6710          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004352  6573 756D 
00004356  6520 5573 
0000435A  6572 2050 6711          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000435E  726F 6772 
00004362  616D 0D0A 
00004366  00        
                    6712   @m68kde~1_84:
00004368  0D0A 556E 6713          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000436C  6B6E 6F77 
00004370  6E20 436F 
00004374  6D        
00004375  6D61 6E64 6714          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004379  2E2E 2E2E 
0000437D  2E0D 0A00 
                    6715   @m68kde~1_85:
00004382  0D0A 5072 6716          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004386  6F67 7261 
0000438A  6D20 456E 
0000438E  64        
0000438F  6564 2028 6717          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004393  5452 4150 
00004397  2023 3135 
0000439B  292E      
0000439D  2E2E 2E00 6718          dc.b      46,46,46,0
                    6719   @m68kde~1_86:
000043A2  0D0A 4B69 6720          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000043A6  6C6C 2041 
000043AA  6C6C 2042 
000043AE  72        
000043AF  6561 6B20 6721          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000043B3  506F 696E 
000043B7  7473 2E2E 
000043BB  2E        
000043BC  2879 2F6E 6722          dc.b      40,121,47,110,41,63,0
000043C0  293F 00   
                    6723   @m68kde~1_87:
000043C4  0D0A 4B69 6724          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000043C8  6C6C 2041 
000043CC  6C6C 2057 
000043D0  61        
000043D1  7463 6820 6725          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000043D5  506F 696E 
000043D9  7473 2E2E 
000043DD  2E        
000043DE  2879 2F6E 6726          dc.b      40,121,47,110,41,63,0
000043E2  293F 00   
                    6727   @m68kde~1_88:
000043E6  0D0A 2D2D 6728          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000043EA  2D2D 2D2D 
000043EE  2D2D 2D2D 
000043F2  2D2D 2D   
000043F5  2D2D 2D2D 6729          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000043F9  2D2D 2D2D 
000043FD  2D2D 2D2D 
00004401  2D2D 2D   
00004404  2D2D 2D2D 6730          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004408  2D2D 2D2D 
0000440C  2D2D 2D2D 
00004410  2D2D 2D   
00004413  2D2D 2D2D 6731          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004417  2D2D 2D2D 
0000441B  2D2D 2D2D 
0000441F  2D2D 2D   
00004422  2D2D 2D2D 6732          dc.b      45,45,45,45,45,45,0
00004426  2D2D 00   
                    6733   @m68kde~1_89:
0000442A  0D0A 2020 6734          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
0000442E  4669 6E61 
00004432  6C20 5072 
00004436  6F        
00004437  6A65 6374 6735          dc.b      106,101,99,116,0
0000443B  00        
                    6736   @m68kde~1_90:
0000443C  0D0A 2020 6737          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004440  4720 2020 
00004444  2020 2020 
00004448  2020 20   
0000444B  2020 2D20 6738          dc.b      32,32,45,32,82,117,110,32,83,110,97,107,101
0000444F  5275 6E20 
00004453  536E 616B 
00004457  65        
00004458  2047 616D 6739          dc.b      32,71,97,109,101,0
0000445C  6500      
                    6740   @m68kde~1_91:
0000445E  0D0A 2300 6741          dc.b      13,10,35,0
                    6742   @m68kde~1_92:
00004462  0D0A 5275 6743          dc.b      13,10,82,117,110,110,105,110,103,32,83,110,97
00004466  6E6E 696E 
0000446A  6720 536E 
0000446E  61        
0000446F  6B65 2047 6744          dc.b      107,101,32,71,97,109,101,10,0
00004473  616D 650A 
00004477  00        
                    6745   @m68kde~1_93:
00004478  0D0A 0D0A 6746          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000447C  5072 6F67 
00004480  7261 6D20 
00004484  41        
00004485  424F 5254 6747          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004489  2021 2121 
0000448D  2121 210D 
00004491  0A00      
                    6748   @m68kde~1_94:
00004494  2573 0D0A 6749          dc.b      37,115,13,10,0
00004498  00        
                    6750   @m68kde~1_95:
0000449A  0D0A 0D0A 6751          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000449E  5072 6F67 
000044A2  7261 6D20 
000044A6  41        
000044A7  424F 5254 6752          dc.b      66,79,82,84,32,33,33,33,33,33,0
000044AB  2021 2121 
000044AF  2121 00   
                    6753   @m68kde~1_96:
000044B2  0D0A 556E 6754          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000044B6  6861 6E64 
000044BA  6C65 6420 
000044BE  49        
000044BF  6E74 6572 6755          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000044C3  7275 7074 
000044C7  3A20 4952 
000044CB  5125 6420 6756          dc.b      81,37,100,32,33,33,33,33,33,0
000044CF  2121 2121 
000044D3  2100      
                    6757   @m68kde~1_97:
000044D6  4144 4452 6758          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000044DA  4553 5320 
000044DE  4552 524F 
000044E2  523A 20   
000044E5  3136 206F 6759          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000044E9  7220 3332 
000044ED  2042 6974 
000044F1  2054      
000044F3  7261 6E73 6760          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000044F7  6665 7220 
000044FB  746F 2F66 
000044FF  726F 6D20 6761          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004503  616E 204F 
00004507  4444 2041 
0000450B  64        
0000450C  6472 6573 6762          dc.b      100,114,101,115,115,46,46,46,46,0
00004510  732E 2E2E 
00004514  2E00      
                    6763   @m68kde~1_98:
00004516  556E 6861 6764          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000451A  6E64 6C65 
0000451E  6420 5472 
00004522  6170 2021 6765          dc.b      97,112,32,33,33,33,33,33,0
00004526  2121 2121 
0000452A  00        
                    6766   @m68kde~1_99:
0000452C  4255 5320 6767          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004530  4572 726F 
00004534  7221 00   
                    6768   @m68kde~1_100:
00004538  4144 4452 6769          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000453C  4553 5320 
00004540  4572 726F 
00004544  7221      
00004546  00        6770          dc.b      0
                    6771   @m68kde~1_101:
00004548  494C 4C45 6772          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000454C  4741 4C20 
00004550  494E 5354 
00004554  5255 43   
00004557  5449 4F4E 6773          dc.b      84,73,79,78,0
0000455B  00        
                    6774   @m68kde~1_102:
0000455C  4449 5649 6775          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004560  4445 2042 
00004564  5920 5A45 
00004568  524F 00   
                    6776   @m68kde~1_103:
0000456C  2743 484B 6777          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004570  2720 494E 
00004574  5354 5255 
00004578  4354 49   
0000457B  4F4E 00   6778          dc.b      79,78,0
                    6779   @m68kde~1_104:
0000457E  5452 4150 6780          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004582  5620 494E 
00004586  5354 5255 
0000458A  4354 49   
0000458D  4F4E 00   6781          dc.b      79,78,0
                    6782   @m68kde~1_105:
00004590  5052 4956 6783          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004594  494C 4547 
00004598  4520 5649 
0000459C  4F4C 41   
0000459F  5449 4F4E 6784          dc.b      84,73,79,78,0
000045A3  00        
                    6785   @m68kde~1_106:
000045A4  554E 494E 6786          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000045A8  4954 4941 
000045AC  4C49 5345 
000045B0  4420 49   
000045B3  5251 00   6787          dc.b      82,81,0
                    6788   @m68kde~1_107:
000045B6  5350 5552 6789          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000045BA  494F 5553 
000045BE  2049 5251 
000045C2  00        
                    6790   @m68kde~1_108:
000045C4  0D0A 5374 6791          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000045C8  6172 7420 
000045CC  4164 6472 
000045D0  65        
000045D1  7373 2069 6792          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000045D5  6E20 4D65 
000045D9  6D6F 7279 
000045DD  3A20 00   6793          dc.b      58,32,0
                    6794   @m68kde~1_109:
000045E0  0D0A 456E 6795          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000045E4  7465 7220 
000045E8  5374 7269 
000045EC  6E        
000045ED  6720 2845 6796          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000045F1  5343 2074 
000045F5  6F20 656E 
000045F9  64        
000045FA  2920 3A00 6797          dc.b      41,32,58,0
                    6798   @m68kde~1_110:
000045FE  616D 6520 6799          dc.b      97,109,101,32,79,118,101,114,33,0
00004602  4F76 6572 
00004606  2100      
                    6800   @m68kde~1_111:
00004608  5363 6F72 6801          dc.b      83,99,111,114,101,58,32,0
0000460C  653A 2000 
                    6802   @m68kde~1_112:
00004610  0D0A 4761 6803          dc.b      13,10,71,97,109,101,32,111,118,101,114,32,33
00004614  6D65 206F 
00004618  7665 7220 
0000461C  21        
0000461D  00        6804          dc.b      0
                    6805   @m68kde~1_113:
0000461E  0D0A 796F 6806          dc.b      13,10,121,111,117,114,32,115,99,111,114,101
00004622  7572 2073 
00004626  636F 7265 
0000462A  2077 6173 6807          dc.b      32,119,97,115,32,37,100,10,0
0000462E  2025 640A 
00004632  00        
                    6808   @m68kde~1_114:
00004634  0D0A 7072 6809          dc.b      13,10,112,114,101,115,115,32,97,110,121,32,107
00004638  6573 7320 
0000463C  616E 7920 
00004640  6B        
00004641  6579 0A00 6810          dc.b      101,121,10,0
                    6811   @m68kde~1_115:
00004646  4445 312D 6812          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000464A  3638 6B20 
0000464E  4275 6720 
00004652  5631      
00004654  2E37 3700 6813          dc.b      46,55,55,0
                    6814   @m68kde~1_116:
00004658  436F 7079 6815          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000465C  7269 6768 
00004660  7420 2843 
00004664  2920 504A 6816          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004668  2044 6176 
0000466C  6965 7320 
00004670  3230      
00004672  3136 00   6817          dc.b      49,54,0
                    6818   @m68kde~1_117:
00004676  4279 3A20 6819          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000467A  504A 2044 
0000467E  6176 6965 
00004682  73        
00004683  00        6820          dc.b      0
                    6821   @m68kde~1_118:
00004684  0D0A 2573 6822          dc.b      13,10,37,115,0
00004688  00        
                    6823   @m68kde~1_119:
0000468A  0D0A 5374 6824          dc.b      13,10,83,116,117,100,101,110,116,32,78,97,109
0000468E  7564 656E 
00004692  7420 4E61 
00004696  6D        
00004697  653A 2053 6825          dc.b      101,58,32,83,104,105,100,105,32,88,105,0
0000469B  6869 6469 
0000469F  2058 6900 
                    6826   @m68kde~1_120:
000046A4  0D0A 5374 6827          dc.b      13,10,83,116,117,100,101,110,116,32,78,117,109
000046A8  7564 656E 
000046AC  7420 4E75 
000046B0  6D        
000046B1  6265 723A 6828          dc.b      98,101,114,58,32,57,48,53,48,54,54,52,51,0
000046B5  2039 3035 
000046B9  3036 3634 
000046BD  3300      
                    6829   _screensize:
000046C0  0000 0050 6830          dc.l      80,40
000046C4  0000 0028 
                    6831          section   data
000046C8            6832                   align
          0000 46C8 6833   DataStart       equ       *
                    6834   
                    6835   *********************************************************************************************************
                    6836   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6837   * to ram as part of the CStart routine in this file
                    6838   *********************************************************************************************************
                    6839   
                    6840   generateFood_firsttime:
000046C8  0000 0001 6841          dc.l      1
                    6842   @itoa_1:
000046CC  2D32 3134 6843          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000046D0  3734 3833 
000046D4  3634 3800 
                    6844          section   bss
000046D8            6845                   align
          0000 46D8 6846   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6847   
                    6848   *********************************************************************************************************
                    6849   * Section for Uninitialised Data held in ROM as constants
                    6850   *********************************************************************************************************
                    6851   
0B000000            6852                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0010 6853   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6854   
                    6855   
0B000000            6856   bss             org       bss
                    6857   
                    6858   *********************************************************************************************************
                    6859   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6860   * install the exception handler using the C function InstallExceptionHandler()
                    6861   *********************************************************************************************************
                    6862   
                    6863   
                    6864   
0B000000            6865   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            6866   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            6867   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            6868   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            6869   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            6870   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            6871   VCheck           ds.l    1      ditto
0B00001C            6872   VTrapV           ds.l    1      ditto
0B000020            6873   VPrivilege       ds.l    1      ditto
0B000024            6874   VTrace           ds.l    1
0B000028            6875   VLine1010emul    ds.l    1
0B00002C            6876   VLine1111emul    ds.l    1
0B000030            6877   VUnassigned1     ds.l    1
0B000034            6878   VUnassigned2     ds.l    1
0B000038            6879   VUnassigned3     ds.l    1
0B00003C            6880   VUninit_IRQ      ds.l    1
0B000040            6881   VUnassigned4     ds.l    1
0B000044            6882   VUnassigned5     ds.l    1
0B000048            6883   VUnassigned6     ds.l    1
0B00004C            6884   VUnassigned7     ds.l    1
0B000050            6885   VUnassigned8     ds.l    1
0B000054            6886   VUnassigned9     ds.l    1
0B000058            6887   VUnassigned10    ds.l    1
0B00005C            6888   VUnassigned11    ds.l    1
0B000060            6889   VSpuriousIRQ     ds.l    1
                    6890   
                    6891   * Interrupt handlers Vector 25-31
0B000064            6892   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            6893   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            6894   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            6895   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            6896   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            6897   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            6898   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6899   
                    6900   * Trap Handler vectors 32-47
0B000080            6901   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            6902   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            6903   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            6904   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            6905   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            6906   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            6907   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            6908   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            6909   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            6910   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            6911   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            6912   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            6913   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            6914   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            6915   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            6916   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6917   
                    6918   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6919   
                    6920   ***********************************************************************************************************
                    6921   * Other Variables
                    6922   ***********************************************************************************************************
                    6923   *__DebugA5       ds.l    1
                    6924   *__UserA5        ds.l    1
                    6925   
                    6926   ***********************************************************************************************************
0B0000C0            6927   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            6928   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            6929   __heap:         ds.l    0       ; pointers for malloc functions
                    6930   
                    6931   *__himem:       ds.l    himem            ; highest memory location + 1
                    6932   *__stklen:      ds.l    stklen           ; default stack size
                    6933   
                    6934   *********************************************************************************************************
                    6935   * Section for Heap
                    6936   *********************************************************************************************************
                    6937   
                    6938   _i:
0B0000C4            6939          ds.b      4
                    6940   _x:
0B0000C8            6941          ds.b      4
                    6942   _y:
0B0000CC            6943          ds.b      4
                    6944   _z:
0B0000D0            6945          ds.b      4
                    6946   _PortA_Count:
0B0000D4            6947          ds.b      4
                    6948   _Trace:
0B0000D8            6949          ds.b      4
                    6950   _GoFlag:
0B0000DC            6951          ds.b      4
                    6952   _Echo:
0B0000E0            6953          ds.b      4
                    6954   _d0:
0B0000E4            6955          ds.b      4
                    6956   _d1:
0B0000E8            6957          ds.b      4
                    6958   _d2:
0B0000EC            6959          ds.b      4
                    6960   _d3:
0B0000F0            6961          ds.b      4
                    6962   _d4:
0B0000F4            6963          ds.b      4
                    6964   _d5:
0B0000F8            6965          ds.b      4
                    6966   _d6:
0B0000FC            6967          ds.b      4
                    6968   _d7:
0B000100            6969          ds.b      4
                    6970   _a0:
0B000104            6971          ds.b      4
                    6972   _a1:
0B000108            6973          ds.b      4
                    6974   _a2:
0B00010C            6975          ds.b      4
                    6976   _a3:
0B000110            6977          ds.b      4
                    6978   _a4:
0B000114            6979          ds.b      4
                    6980   _a5:
0B000118            6981          ds.b      4
                    6982   _a6:
0B00011C            6983          ds.b      4
                    6984   _PC:
0B000120            6985          ds.b      4
                    6986   _SSP:
0B000124            6987          ds.b      4
                    6988   _USP:
0B000128            6989          ds.b      4
                    6990   _SR:
0B00012C            6991          ds.b      2
                    6992   _BreakPointAddress:
0B00012E            6993          ds.b      32
                    6994   _BreakPointInstruction:
0B00014E            6995          ds.b      16
                    6996   _BreakPointSetOrCleared:
0B00015E            6997          ds.b      32
                    6998   _InstructionSize:
0B00017E            6999          ds.b      4
                    7000   _WatchPointAddress:
0B000182            7001          ds.b      32
                    7002   _WatchPointSetOrCleared:
0B0001A2            7003          ds.b      32
                    7004   _WatchPointString:
0B0001C2            7005          ds.b      800
                    7006   _TempString:
0B0004E2            7007          ds.b      100
                    7008   _score:
0B000546            7009          ds.b      4
                    7010   _timer:
0B00054A            7011          ds.b      4
                    7012   _clock_counter:
0B00054E            7013          ds.b      4
                    7014   _vga_color:
0B000552            7015          ds.b      4
                    7016   _Snake:
0B000556            7017          ds.b      16406
                    7018   _waiting_for_direction_to_be_imp:
0B00456C            7019          ds.b      4
                    7020          section   heap
0B004570            7021                   align
          0B00 4570 7022   bssEnd          equ *                   end of storage space for unitialised variables
                    7023   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 4570 7024   heap   equ       *
0B004570            7025                    align
          0000 0000

Assembly errors: 0
