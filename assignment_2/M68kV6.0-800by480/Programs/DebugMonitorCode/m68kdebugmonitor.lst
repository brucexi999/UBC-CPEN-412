680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 05 Feb 2023      Time: 12:02:00          Source: C:\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2C32      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1FBA      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  30F2      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  3A42      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  3A46      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  3A5C      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  3A5E      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get1HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get1HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = xtod(_getch());
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  2400       950          move.l    D0,D2
                     951   ; if(CheckSumPtr)
00000C24  4AAE 0008  952          tst.l     8(A6)
00000C28  6706       953          beq.s     Get1HexDigits_1
                     954   ; *CheckSumPtr += i ;
00000C2A  206E 0008  955          move.l    8(A6),A0
00000C2E  D510       956          add.b     D2,(A0)
                     957   Get1HexDigits_1:
                     958   ; return i; 
00000C30  2002       959          move.l    D2,D0
00000C32  241F       960          move.l    (A7)+,D2
00000C34  4E5E       961          unlk      A6
00000C36  4E75       962          rts
                     963   ; }
                     964   ; int Get2HexDigits(char *CheckSumPtr)
                     965   ; {
                     966   _Get2HexDigits:
00000C38  4E56 0000  967          link      A6,#0
00000C3C  2F02       968          move.l    D2,-(A7)
                     969   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C3E  2F00       970          move.l    D0,-(A7)
00000C40  4EB8 0B68  971          jsr       __getch
00000C44  2200       972          move.l    D0,D1
00000C46  201F       973          move.l    (A7)+,D0
00000C48  2F01       974          move.l    D1,-(A7)
00000C4A  4EB8 0BD2  975          jsr       _xtod
00000C4E  584F       976          addq.w    #4,A7
00000C50  C0BC 0000  977          and.l     #255,D0
00000C54  00FF      
00000C56  E980       978          asl.l     #4,D0
00000C58  2F00       979          move.l    D0,-(A7)
00000C5A  2F01       980          move.l    D1,-(A7)
00000C5C  4EB8 0B68  981          jsr       __getch
00000C60  221F       982          move.l    (A7)+,D1
00000C62  2F00       983          move.l    D0,-(A7)
00000C64  4EB8 0BD2  984          jsr       _xtod
00000C68  584F       985          addq.w    #4,A7
00000C6A  2200       986          move.l    D0,D1
00000C6C  201F       987          move.l    (A7)+,D0
00000C6E  C2BC 0000  988          and.l     #255,D1
00000C72  00FF      
00000C74  8081       989          or.l      D1,D0
00000C76  2400       990          move.l    D0,D2
                     991   ; if(CheckSumPtr)
00000C78  4AAE 0008  992          tst.l     8(A6)
00000C7C  6706       993          beq.s     Get2HexDigits_1
                     994   ; *CheckSumPtr += i ;
00000C7E  206E 0008  995          move.l    8(A6),A0
00000C82  D510       996          add.b     D2,(A0)
                     997   Get2HexDigits_1:
                     998   ; return i ;
00000C84  2002       999          move.l    D2,D0
00000C86  241F      1000          move.l    (A7)+,D2
00000C88  4E5E      1001          unlk      A6
00000C8A  4E75      1002          rts
                    1003   ; }
                    1004   ; int Get4HexDigits(char *CheckSumPtr)
                    1005   ; {
                    1006   _Get4HexDigits:
00000C8C  4E56 0000 1007          link      A6,#0
                    1008   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C90  2F2E 0008 1009          move.l    8(A6),-(A7)
00000C94  4EB8 0C38 1010          jsr       _Get2HexDigits
00000C98  584F      1011          addq.w    #4,A7
00000C9A  E180      1012          asl.l     #8,D0
00000C9C  2F00      1013          move.l    D0,-(A7)
00000C9E  2F2E 0008 1014          move.l    8(A6),-(A7)
00000CA2  4EB8 0C38 1015          jsr       _Get2HexDigits
00000CA6  584F      1016          addq.w    #4,A7
00000CA8  2200      1017          move.l    D0,D1
00000CAA  201F      1018          move.l    (A7)+,D0
00000CAC  8081      1019          or.l      D1,D0
00000CAE  4E5E      1020          unlk      A6
00000CB0  4E75      1021          rts
                    1022   ; }
                    1023   ; int Get6HexDigits(char *CheckSumPtr)
                    1024   ; {
                    1025   _Get6HexDigits:
00000CB2  4E56 0000 1026          link      A6,#0
                    1027   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CB6  2F2E 0008 1028          move.l    8(A6),-(A7)
00000CBA  4EB8 0C8C 1029          jsr       _Get4HexDigits
00000CBE  584F      1030          addq.w    #4,A7
00000CC0  E180      1031          asl.l     #8,D0
00000CC2  2F00      1032          move.l    D0,-(A7)
00000CC4  2F2E 0008 1033          move.l    8(A6),-(A7)
00000CC8  4EB8 0C38 1034          jsr       _Get2HexDigits
00000CCC  584F      1035          addq.w    #4,A7
00000CCE  2200      1036          move.l    D0,D1
00000CD0  201F      1037          move.l    (A7)+,D0
00000CD2  8081      1038          or.l      D1,D0
00000CD4  4E5E      1039          unlk      A6
00000CD6  4E75      1040          rts
                    1041   ; }
                    1042   ; int Get8HexDigits(char *CheckSumPtr)
                    1043   ; {
                    1044   _Get8HexDigits:
00000CD8  4E56 0000 1045          link      A6,#0
                    1046   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CDC  2F2E 0008 1047          move.l    8(A6),-(A7)
00000CE0  4EB8 0C8C 1048          jsr       _Get4HexDigits
00000CE4  584F      1049          addq.w    #4,A7
00000CE6  E180      1050          asl.l     #8,D0
00000CE8  E180      1051          asl.l     #8,D0
00000CEA  2F00      1052          move.l    D0,-(A7)
00000CEC  2F2E 0008 1053          move.l    8(A6),-(A7)
00000CF0  4EB8 0C8C 1054          jsr       _Get4HexDigits
00000CF4  584F      1055          addq.w    #4,A7
00000CF6  2200      1056          move.l    D0,D1
00000CF8  201F      1057          move.l    (A7)+,D0
00000CFA  8081      1058          or.l      D1,D0
00000CFC  4E5E      1059          unlk      A6
00000CFE  4E75      1060          rts
                    1061   ; }
                    1062   ; void DumpMemory(void)   // simple dump memory fn
                    1063   ; {
                    1064   _DumpMemory:
00000D00  48E7 3C30 1065          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000D04  45F9 0000 1066          lea       _printf.L,A2
00000D08  30F2      
00000D0A  47F9 0000 1067          lea       _putch.L,A3
00000D0E  2FE4      
                    1068   ; int i, j ;
                    1069   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1070   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000D10  4879 0000 1071          pea       @m68kde~1_5.L
00000D14  3A60      
00000D16  4E92      1072          jsr       (A2)
00000D18  584F      1073          addq.w    #4,A7
                    1074   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1075          pea       @m68kde~1_6.L
00000D1E  3A9A      
00000D20  4E92      1076          jsr       (A2)
00000D22  584F      1077          addq.w    #4,A7
                    1078   ; RamPtr = Get8HexDigits(0) ;
00000D24  42A7      1079          clr.l     -(A7)
00000D26  4EB8 0CD8 1080          jsr       _Get8HexDigits
00000D2A  584F      1081          addq.w    #4,A7
00000D2C  2600      1082          move.l    D0,D3
                    1083   ; while(1)    {
                    1084   DumpMemory_1:
                    1085   ; for(i = 0; i < 16; i ++)    {
00000D2E  4285      1086          clr.l     D5
                    1087   DumpMemory_4:
00000D30  0C85 0000 1088          cmp.l     #16,D5
00000D34  0010      
00000D36  6C00 0096 1089          bge       DumpMemory_6
                    1090   ; printf("\r\n%08x ", RamPtr) ;
00000D3A  2F03      1091          move.l    D3,-(A7)
00000D3C  4879 0000 1092          pea       @m68kde~1_7.L
00000D40  3AB2      
00000D42  4E92      1093          jsr       (A2)
00000D44  504F      1094          addq.w    #8,A7
                    1095   ; for(j=0; j < 16; j ++)  {
00000D46  4282      1096          clr.l     D2
                    1097   DumpMemory_7:
00000D48  0C82 0000 1098          cmp.l     #16,D2
00000D4C  0010      
00000D4E  6C24      1099          bge.s     DumpMemory_9
                    1100   ; printf("%02X",RamPtr[j]) ;
00000D50  2043      1101          move.l    D3,A0
00000D52  1230 2800 1102          move.b    0(A0,D2.L),D1
00000D56  C2BC 0000 1103          and.l     #255,D1
00000D5A  00FF      
00000D5C  2F01      1104          move.l    D1,-(A7)
00000D5E  4879 0000 1105          pea       @m68kde~1_8.L
00000D62  3ABA      
00000D64  4E92      1106          jsr       (A2)
00000D66  504F      1107          addq.w    #8,A7
                    1108   ; putchar(' ') ;
00000D68  4878 0020 1109          pea       32
00000D6C  4E93      1110          jsr       (A3)
00000D6E  584F      1111          addq.w    #4,A7
00000D70  5282      1112          addq.l    #1,D2
00000D72  60D4      1113          bra       DumpMemory_7
                    1114   DumpMemory_9:
                    1115   ; }
                    1116   ; // now display the data as ASCII at the end
                    1117   ; printf("  ") ;
00000D74  4879 0000 1118          pea       @m68kde~1_9.L
00000D78  3AC0      
00000D7A  4E92      1119          jsr       (A2)
00000D7C  584F      1120          addq.w    #4,A7
                    1121   ; for(j = 0; j < 16; j++) {
00000D7E  4282      1122          clr.l     D2
                    1123   DumpMemory_10:
00000D80  0C82 0000 1124          cmp.l     #16,D2
00000D84  0010      
00000D86  6C00 003A 1125          bge       DumpMemory_12
                    1126   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D8A  2043      1127          move.l    D3,A0
00000D8C  1030 2800 1128          move.b    0(A0,D2.L),D0
00000D90  C03C 007F 1129          and.b     #127,D0
00000D94  1800      1130          move.b    D0,D4
                    1131   ; if((c > (char)(0x7f)) || (c < ' '))
00000D96  0C04 007F 1132          cmp.b     #127,D4
00000D9A  6206      1133          bhi.s     DumpMemory_15
00000D9C  0C04 0020 1134          cmp.b     #32,D4
00000DA0  640A      1135          bhs.s     DumpMemory_13
                    1136   DumpMemory_15:
                    1137   ; putchar('.') ;
00000DA2  4878 002E 1138          pea       46
00000DA6  4E93      1139          jsr       (A3)
00000DA8  584F      1140          addq.w    #4,A7
00000DAA  6012      1141          bra.s     DumpMemory_14
                    1142   DumpMemory_13:
                    1143   ; else
                    1144   ; putchar(RamPtr[j]) ;
00000DAC  2043      1145          move.l    D3,A0
00000DAE  1230 2800 1146          move.b    0(A0,D2.L),D1
00000DB2  C2BC 0000 1147          and.l     #255,D1
00000DB6  00FF      
00000DB8  2F01      1148          move.l    D1,-(A7)
00000DBA  4E93      1149          jsr       (A3)
00000DBC  584F      1150          addq.w    #4,A7
                    1151   DumpMemory_14:
00000DBE  5282      1152          addq.l    #1,D2
00000DC0  60BE      1153          bra       DumpMemory_10
                    1154   DumpMemory_12:
                    1155   ; }
                    1156   ; RamPtr = RamPtr + 16 ;
00000DC2  0683 0000 1157          add.l     #16,D3
00000DC6  0010      
00000DC8  5285      1158          addq.l    #1,D5
00000DCA  6000 FF64 1159          bra       DumpMemory_4
                    1160   DumpMemory_6:
                    1161   ; }
                    1162   ; printf("\r\n") ;
00000DCE  4879 0000 1163          pea       @m68kde~1_1.L
00000DD2  3A42      
00000DD4  4E92      1164          jsr       (A2)
00000DD6  584F      1165          addq.w    #4,A7
                    1166   ; c = _getch() ;
00000DD8  4EB8 0B68 1167          jsr       __getch
00000DDC  1800      1168          move.b    D0,D4
                    1169   ; if(c == 0x1b)          // break on ESC
00000DDE  0C04 001B 1170          cmp.b     #27,D4
00000DE2  6602      1171          bne.s     DumpMemory_16
                    1172   ; break ;
00000DE4  6004      1173          bra.s     DumpMemory_3
                    1174   DumpMemory_16:
00000DE6  6000 FF46 1175          bra       DumpMemory_1
                    1176   DumpMemory_3:
00000DEA  4CDF 0C3C 1177          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DEE  4E75      1178          rts
                    1179   ; }
                    1180   ; }
                    1181   ; void FillMemory()
                    1182   ; {
                    1183   _FillMemory:
00000DF0  48E7 3820 1184          movem.l   D2/D3/D4/A2,-(A7)
00000DF4  45F9 0000 1185          lea       _printf.L,A2
00000DF8  30F2      
                    1186   ; char *StartRamPtr, *EndRamPtr ;
                    1187   ; unsigned char FillData ;
                    1188   ; printf("\r\nFill Memory Block") ;
00000DFA  4879 0000 1189          pea       @m68kde~1_10.L
00000DFE  3AC4      
00000E00  4E92      1190          jsr       (A2)
00000E02  584F      1191          addq.w    #4,A7
                    1192   ; printf("\r\nEnter Start Address: ") ;
00000E04  4879 0000 1193          pea       @m68kde~1_6.L
00000E08  3A9A      
00000E0A  4E92      1194          jsr       (A2)
00000E0C  584F      1195          addq.w    #4,A7
                    1196   ; StartRamPtr = Get8HexDigits(0) ;
00000E0E  42A7      1197          clr.l     -(A7)
00000E10  4EB8 0CD8 1198          jsr       _Get8HexDigits
00000E14  584F      1199          addq.w    #4,A7
00000E16  2400      1200          move.l    D0,D2
                    1201   ; printf("\r\nEnter End Address: ") ;
00000E18  4879 0000 1202          pea       @m68kde~1_11.L
00000E1C  3AD8      
00000E1E  4E92      1203          jsr       (A2)
00000E20  584F      1204          addq.w    #4,A7
                    1205   ; EndRamPtr = Get8HexDigits(0) ;
00000E22  42A7      1206          clr.l     -(A7)
00000E24  4EB8 0CD8 1207          jsr       _Get8HexDigits
00000E28  584F      1208          addq.w    #4,A7
00000E2A  2800      1209          move.l    D0,D4
                    1210   ; printf("\r\nEnter Fill Data: ") ;
00000E2C  4879 0000 1211          pea       @m68kde~1_12.L
00000E30  3AEE      
00000E32  4E92      1212          jsr       (A2)
00000E34  584F      1213          addq.w    #4,A7
                    1214   ; FillData = Get2HexDigits(0) ;
00000E36  42A7      1215          clr.l     -(A7)
00000E38  4EB8 0C38 1216          jsr       _Get2HexDigits
00000E3C  584F      1217          addq.w    #4,A7
00000E3E  1600      1218          move.b    D0,D3
                    1219   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E40  C6BC 0000 1220          and.l     #255,D3
00000E44  00FF      
00000E46  2F03      1221          move.l    D3,-(A7)
00000E48  2F04      1222          move.l    D4,-(A7)
00000E4A  2F02      1223          move.l    D2,-(A7)
00000E4C  4879 0000 1224          pea       @m68kde~1_13.L
00000E50  3B02      
00000E52  4E92      1225          jsr       (A2)
00000E54  DEFC 0010 1226          add.w     #16,A7
                    1227   ; while(StartRamPtr < EndRamPtr)
                    1228   FillMemory_1:
00000E58  B484      1229          cmp.l     D4,D2
00000E5A  6408      1230          bhs.s     FillMemory_3
                    1231   ; *StartRamPtr++ = FillData ;
00000E5C  2042      1232          move.l    D2,A0
00000E5E  5282      1233          addq.l    #1,D2
00000E60  1083      1234          move.b    D3,(A0)
00000E62  60F4      1235          bra       FillMemory_1
                    1236   FillMemory_3:
00000E64  4CDF 041C 1237          movem.l   (A7)+,D2/D3/D4/A2
00000E68  4E75      1238          rts
                    1239   ; }
                    1240   ; void Load_SRecordFile()
                    1241   ; {
                    1242   _Load_SRecordFile:
00000E6A  4E56 FFDC 1243          link      A6,#-36
00000E6E  48E7 3F3C 1244          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E72  45EE FFFA 1245          lea       -6(A6),A2
00000E76  47F8 0C38 1246          lea       _Get2HexDigits.L,A3
00000E7A  49F9 0000 1247          lea       _printf.L,A4
00000E7E  30F2      
                    1248   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E80  42AE FFEE 1249          clr.l     -18(A6)
00000E84  3A7C 0000 1250          move.w    #0,A5
                    1251   ; int result, ByteCount ;
                    1252   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1253   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1254   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E88  7E00      1255          moveq     #0,D7
                    1256   ; AddressFail = 0 ;
00000E8A  42AE FFEA 1257          clr.l     -22(A6)
                    1258   ; Echo = 0 ;                              // don't echo S records during download
00000E8E  42B9 0B00 1259          clr.l     _Echo.L
00000E92  00E0      
                    1260   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E94  4879 0000 1261          pea       @m68kde~1_14.L
00000E98  3B32      
00000E9A  4E94      1262          jsr       (A4)
00000E9C  584F      1263          addq.w    #4,A7
                    1264   ; while(1)    {
                    1265   Load_SRecordFile_1:
                    1266   ; CheckSum = 0 ;
00000E9E  4212      1267          clr.b     (A2)
                    1268   ; do {
                    1269   Load_SRecordFile_4:
                    1270   ; c = toupper(_getch()) ;
00000EA0  2F00      1271          move.l    D0,-(A7)
00000EA2  4EB8 0B68 1272          jsr       __getch
00000EA6  2200      1273          move.l    D0,D1
00000EA8  201F      1274          move.l    (A7)+,D0
00000EAA  2F01      1275          move.l    D1,-(A7)
00000EAC  4EB9 0000 1276          jsr       _toupper
00000EB0  30C6      
00000EB2  584F      1277          addq.w    #4,A7
00000EB4  1C00      1278          move.b    D0,D6
                    1279   ; if(c == 0x1b )      // if break
00000EB6  0C06 001B 1280          cmp.b     #27,D6
00000EBA  6604      1281          bne.s     Load_SRecordFile_6
                    1282   ; return;
00000EBC  6000 0132 1283          bra       Load_SRecordFile_8
                    1284   Load_SRecordFile_6:
00000EC0  0C06 0053 1285          cmp.b     #83,D6
00000EC4  66DA      1286          bne       Load_SRecordFile_4
                    1287   ; }while(c != (char)('S'));   // wait for S start of header
                    1288   ; HeaderType = _getch() ;
00000EC6  4EB8 0B68 1289          jsr       __getch
00000ECA  1600      1290          move.b    D0,D3
                    1291   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000ECC  0C03 0030 1292          cmp.b     #48,D3
00000ED0  6706      1293          beq.s     Load_SRecordFile_11
00000ED2  0C03 0035 1294          cmp.b     #53,D3
00000ED6  6604      1295          bne.s     Load_SRecordFile_9
                    1296   Load_SRecordFile_11:
                    1297   ; continue ;
00000ED8  6000 00D2 1298          bra       Load_SRecordFile_23
                    1299   Load_SRecordFile_9:
                    1300   ; if(HeaderType >= (char)('7'))
00000EDC  0C03 0037 1301          cmp.b     #55,D3
00000EE0  6D04      1302          blt.s     Load_SRecordFile_12
                    1303   ; break ;                 // end load on s7,s8,s9 records
00000EE2  6000 00CC 1304          bra       Load_SRecordFile_3
                    1305   Load_SRecordFile_12:
                    1306   ; // get the bytecount
                    1307   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EE6  2F0A      1308          move.l    A2,-(A7)
00000EE8  4E93      1309          jsr       (A3)
00000EEA  584F      1310          addq.w    #4,A7
00000EEC  2D40 FFF6 1311          move.l    D0,-10(A6)
                    1312   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1313   ; if(HeaderType == (char)('1')) {
00000EF0  0C03 0031 1314          cmp.b     #49,D3
00000EF4  660E      1315          bne.s     Load_SRecordFile_14
                    1316   ; AddressSize = 2 ;       // 2 byte address
00000EF6  7A02      1317          moveq     #2,D5
                    1318   ; Address = Get4HexDigits(&CheckSum);
00000EF8  2F0A      1319          move.l    A2,-(A7)
00000EFA  4EB8 0C8C 1320          jsr       _Get4HexDigits
00000EFE  584F      1321          addq.w    #4,A7
00000F00  2800      1322          move.l    D0,D4
00000F02  6020      1323          bra.s     Load_SRecordFile_17
                    1324   Load_SRecordFile_14:
                    1325   ; }
                    1326   ; else if (HeaderType == (char)('2')) {
00000F04  0C03 0032 1327          cmp.b     #50,D3
00000F08  660E      1328          bne.s     Load_SRecordFile_16
                    1329   ; AddressSize = 3 ;       // 3 byte address
00000F0A  7A03      1330          moveq     #3,D5
                    1331   ; Address = Get6HexDigits(&CheckSum) ;
00000F0C  2F0A      1332          move.l    A2,-(A7)
00000F0E  4EB8 0CB2 1333          jsr       _Get6HexDigits
00000F12  584F      1334          addq.w    #4,A7
00000F14  2800      1335          move.l    D0,D4
00000F16  600C      1336          bra.s     Load_SRecordFile_17
                    1337   Load_SRecordFile_16:
                    1338   ; }
                    1339   ; else    {
                    1340   ; AddressSize = 4 ;       // 4 byte address
00000F18  7A04      1341          moveq     #4,D5
                    1342   ; Address = Get8HexDigits(&CheckSum) ;
00000F1A  2F0A      1343          move.l    A2,-(A7)
00000F1C  4EB8 0CD8 1344          jsr       _Get8HexDigits
00000F20  584F      1345          addq.w    #4,A7
00000F22  2800      1346          move.l    D0,D4
                    1347   Load_SRecordFile_17:
                    1348   ; }
                    1349   ; RamPtr = (char *)(Address) ;                            // point to download area
00000F24  2D44 FFFC 1350          move.l    D4,-4(A6)
                    1351   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000F28  202E FFF6 1352          move.l    -10(A6),D0
00000F2C  9085      1353          sub.l     D5,D0
00000F2E  5380      1354          subq.l    #1,D0
00000F30  2D40 FFE2 1355          move.l    D0,-30(A6)
                    1356   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F34  4282      1357          clr.l     D2
                    1358   Load_SRecordFile_18:
00000F36  B4AE FFE2 1359          cmp.l     -30(A6),D2
00000F3A  6C1E      1360          bge.s     Load_SRecordFile_20
                    1361   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F3C  2F0A      1362          move.l    A2,-(A7)
00000F3E  4E93      1363          jsr       (A3)
00000F40  584F      1364          addq.w    #4,A7
00000F42  2D40 FFDE 1365          move.l    D0,-34(A6)
                    1366   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F46  202E FFDE 1367          move.l    -34(A6),D0
00000F4A  206E FFFC 1368          move.l    -4(A6),A0
00000F4E  52AE FFFC 1369          addq.l    #1,-4(A6)
00000F52  1080      1370          move.b    D0,(A0)
                    1371   ; ByteTotal++;
00000F54  524D      1372          addq.w    #1,A5
00000F56  5282      1373          addq.l    #1,D2
00000F58  60DC      1374          bra       Load_SRecordFile_18
                    1375   Load_SRecordFile_20:
                    1376   ; }
                    1377   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1378   ; ReadCheckSum = Get2HexDigits(0) ;
00000F5A  42A7      1379          clr.l     -(A7)
00000F5C  4E93      1380          jsr       (A3)
00000F5E  584F      1381          addq.w    #4,A7
00000F60  1D40 FFFB 1382          move.b    D0,-5(A6)
                    1383   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F64  1012      1384          move.b    (A2),D0
00000F66  4600      1385          not.b     D0
00000F68  4880      1386          ext.w     D0
00000F6A  C07C 00FF 1387          and.w     #255,D0
00000F6E  122E FFFB 1388          move.b    -5(A6),D1
00000F72  4881      1389          ext.w     D1
00000F74  C27C 00FF 1390          and.w     #255,D1
00000F78  B041      1391          cmp.w     D1,D0
00000F7A  6708      1392          beq.s     Load_SRecordFile_21
                    1393   ; LoadFailed = 1 ;
00000F7C  7E01      1394          moveq     #1,D7
                    1395   ; FailedAddress = Address ;
00000F7E  2D44 FFE6 1396          move.l    D4,-26(A6)
                    1397   ; break;
00000F82  602C      1398          bra.s     Load_SRecordFile_3
                    1399   Load_SRecordFile_21:
                    1400   ; }
                    1401   ; SRecordCount++ ;
00000F84  52AE FFEE 1402          addq.l    #1,-18(A6)
                    1403   ; // display feedback on progress
                    1404   ; if(SRecordCount % 25 == 0)
00000F88  2F2E FFEE 1405          move.l    -18(A6),-(A7)
00000F8C  4878 0019 1406          pea       25
00000F90  4EB9 0000 1407          jsr       LDIV
00000F94  2F18      
00000F96  202F 0004 1408          move.l    4(A7),D0
00000F9A  504F      1409          addq.w    #8,A7
00000F9C  4A80      1410          tst.l     D0
00000F9E  660C      1411          bne.s     Load_SRecordFile_23
                    1412   ; putchar('.') ;
00000FA0  4878 002E 1413          pea       46
00000FA4  4EB9 0000 1414          jsr       _putch
00000FA8  2FE4      
00000FAA  584F      1415          addq.w    #4,A7
                    1416   Load_SRecordFile_23:
00000FAC  6000 FEF0 1417          bra       Load_SRecordFile_1
                    1418   Load_SRecordFile_3:
                    1419   ; }
                    1420   ; if(LoadFailed == 1) {
00000FB0  0C87 0000 1421          cmp.l     #1,D7
00000FB4  0001      
00000FB6  6610      1422          bne.s     Load_SRecordFile_25
                    1423   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000FB8  2F2E FFE6 1424          move.l    -26(A6),-(A7)
00000FBC  4879 0000 1425          pea       @m68kde~1_15.L
00000FC0  3B62      
00000FC2  4E94      1426          jsr       (A4)
00000FC4  504F      1427          addq.w    #8,A7
00000FC6  600C      1428          bra.s     Load_SRecordFile_26
                    1429   Load_SRecordFile_25:
                    1430   ; }
                    1431   ; else
                    1432   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000FC8  2F0D      1433          move.l    A5,-(A7)
00000FCA  4879 0000 1434          pea       @m68kde~1_16.L
00000FCE  3B88      
00000FD0  4E94      1435          jsr       (A4)
00000FD2  504F      1436          addq.w    #8,A7
                    1437   Load_SRecordFile_26:
                    1438   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1439   ; for(i = 0; i < 400000; i ++)
00000FD4  4282      1440          clr.l     D2
                    1441   Load_SRecordFile_27:
00000FD6  0C82 0006 1442          cmp.l     #400000,D2
00000FDA  1A80      
00000FDC  6C04      1443          bge.s     Load_SRecordFile_29
00000FDE  5282      1444          addq.l    #1,D2
00000FE0  60F4      1445          bra       Load_SRecordFile_27
                    1446   Load_SRecordFile_29:
                    1447   ; ;
                    1448   ; FlushKeyboard() ;
00000FE2  4EB8 0BA6 1449          jsr       _FlushKeyboard
                    1450   ; Echo = 1;
00000FE6  23FC 0000 1451          move.l    #1,_Echo.L
00000FEA  0001 0B00 
00000FEE  00E0      
                    1452   Load_SRecordFile_8:
00000FF0  4CDF 3CFC 1453          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FF4  4E5E      1454          unlk      A6
00000FF6  4E75      1455          rts
                    1456   ; }
                    1457   ; void MemoryChange(void)
                    1458   ; {
                    1459   _MemoryChange:
00000FF8  48E7 3820 1460          movem.l   D2/D3/D4/A2,-(A7)
00000FFC  45F9 0000 1461          lea       _printf.L,A2
00001000  30F2      
                    1462   ; unsigned char *RamPtr,c ; // pointer to memory
                    1463   ; int Data ;
                    1464   ; printf("\r\nExamine and Change Memory") ;
00001002  4879 0000 1465          pea       @m68kde~1_17.L
00001006  3BAA      
00001008  4E92      1466          jsr       (A2)
0000100A  584F      1467          addq.w    #4,A7
                    1468   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
0000100C  4879 0000 1469          pea       @m68kde~1_18.L
00001010  3BC6      
00001012  4E92      1470          jsr       (A2)
00001014  584F      1471          addq.w    #4,A7
                    1472   ; printf("\r\nEnter Address: ") ;
00001016  4879 0000 1473          pea       @m68kde~1_19.L
0000101A  3C0C      
0000101C  4E92      1474          jsr       (A2)
0000101E  584F      1475          addq.w    #4,A7
                    1476   ; RamPtr = Get8HexDigits(0) ;
00001020  42A7      1477          clr.l     -(A7)
00001022  4EB8 0CD8 1478          jsr       _Get8HexDigits
00001026  584F      1479          addq.w    #4,A7
00001028  2600      1480          move.l    D0,D3
                    1481   ; while(1)    {
                    1482   MemoryChange_1:
                    1483   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000102A  2043      1484          move.l    D3,A0
0000102C  1210      1485          move.b    (A0),D1
0000102E  C2BC 0000 1486          and.l     #255,D1
00001032  00FF      
00001034  2F01      1487          move.l    D1,-(A7)
00001036  2F03      1488          move.l    D3,-(A7)
00001038  4879 0000 1489          pea       @m68kde~1_20.L
0000103C  3C1E      
0000103E  4E92      1490          jsr       (A2)
00001040  DEFC 000C 1491          add.w     #12,A7
                    1492   ; c = tolower(_getch()) ;
00001044  2F00      1493          move.l    D0,-(A7)
00001046  4EB8 0B68 1494          jsr       __getch
0000104A  2200      1495          move.l    D0,D1
0000104C  201F      1496          move.l    (A7)+,D0
0000104E  2F01      1497          move.l    D1,-(A7)
00001050  4EB9 0000 1498          jsr       _tolower
00001054  3050      
00001056  584F      1499          addq.w    #4,A7
00001058  1400      1500          move.b    D0,D2
                    1501   ; if(c == (char)(0x1b))
0000105A  0C02 001B 1502          cmp.b     #27,D2
0000105E  6604      1503          bne.s     MemoryChange_4
                    1504   ; return ;                                // abort on escape
00001060  6000 0090 1505          bra       MemoryChange_6
                    1506   MemoryChange_4:
                    1507   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001064  0C02 0030 1508          cmp.b     #48,D2
00001068  6506      1509          blo.s     MemoryChange_10
0000106A  0C02 0039 1510          cmp.b     #57,D2
0000106E  6310      1511          bls.s     MemoryChange_9
                    1512   MemoryChange_10:
00001070  0C02 0061 1513          cmp.b     #97,D2
00001074  6500 006E 1514          blo       MemoryChange_7
00001078  0C02 0066 1515          cmp.b     #102,D2
0000107C  6200 0066 1516          bhi       MemoryChange_7
                    1517   MemoryChange_9:
                    1518   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001080  C4BC 0000 1519          and.l     #255,D2
00001084  00FF      
00001086  2F02      1520          move.l    D2,-(A7)
00001088  4EB8 0BD2 1521          jsr       _xtod
0000108C  584F      1522          addq.w    #4,A7
0000108E  C0BC 0000 1523          and.l     #255,D0
00001092  00FF      
00001094  E980      1524          asl.l     #4,D0
00001096  2F00      1525          move.l    D0,-(A7)
00001098  2F01      1526          move.l    D1,-(A7)
0000109A  4EB8 0B68 1527          jsr       __getch
0000109E  221F      1528          move.l    (A7)+,D1
000010A0  2F00      1529          move.l    D0,-(A7)
000010A2  4EB8 0BD2 1530          jsr       _xtod
000010A6  584F      1531          addq.w    #4,A7
000010A8  2200      1532          move.l    D0,D1
000010AA  201F      1533          move.l    (A7)+,D0
000010AC  C2BC 0000 1534          and.l     #255,D1
000010B0  00FF      
000010B2  8081      1535          or.l      D1,D0
000010B4  2800      1536          move.l    D0,D4
                    1537   ; *RamPtr = (char)(Data) ;
000010B6  2043      1538          move.l    D3,A0
000010B8  1084      1539          move.b    D4,(A0)
                    1540   ; if(*RamPtr != Data) {
000010BA  2043      1541          move.l    D3,A0
000010BC  1010      1542          move.b    (A0),D0
000010BE  C0BC 0000 1543          and.l     #255,D0
000010C2  00FF      
000010C4  B084      1544          cmp.l     D4,D0
000010C6  671A      1545          beq.s     MemoryChange_11
                    1546   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000010C8  2043      1547          move.l    D3,A0
000010CA  1210      1548          move.b    (A0),D1
000010CC  C2BC 0000 1549          and.l     #255,D1
000010D0  00FF      
000010D2  2F01      1550          move.l    D1,-(A7)
000010D4  2F04      1551          move.l    D4,-(A7)
000010D6  4879 0000 1552          pea       @m68kde~1_21.L
000010DA  3C30      
000010DC  4E92      1553          jsr       (A2)
000010DE  DEFC 000C 1554          add.w     #12,A7
                    1555   MemoryChange_11:
000010E2  6008      1556          bra.s     MemoryChange_13
                    1557   MemoryChange_7:
                    1558   ; }
                    1559   ; }
                    1560   ; else if(c == (char)('-'))
000010E4  0C02 002D 1561          cmp.b     #45,D2
000010E8  6602      1562          bne.s     MemoryChange_13
                    1563   ; RamPtr -= 2 ; ;
000010EA  5583      1564          subq.l    #2,D3
                    1565   MemoryChange_13:
                    1566   ; RamPtr ++ ;
000010EC  5283      1567          addq.l    #1,D3
000010EE  6000 FF3A 1568          bra       MemoryChange_1
                    1569   MemoryChange_6:
000010F2  4CDF 041C 1570          movem.l   (A7)+,D2/D3/D4/A2
000010F6  4E75      1571          rts
                    1572   ; }
                    1573   ; }
                    1574   ; /*******************************************************************
                    1575   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1576   ; ********************************************************************/
                    1577   ; void ProgramFlashChip(void)
                    1578   ; {
                    1579   _ProgramFlashChip:
000010F8  4E75      1580          rts
                    1581   ; //
                    1582   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1583   ; // TODO : then verify by reading it back and comparing to memory
                    1584   ; //
                    1585   ; }
                    1586   ; /*************************************************************************
                    1587   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1588   ; **************************************************************************/
                    1589   ; void LoadFromFlashChip(void)
                    1590   ; {
                    1591   _LoadFromFlashChip:
                    1592   ; printf("\r\nLoading Program From SPI Flash....") ;
000010FA  4879 0000 1593          pea       @m68kde~1_22.L
000010FE  3C64      
00001100  4EB9 0000 1594          jsr       _printf
00001104  30F2      
00001106  584F      1595          addq.w    #4,A7
00001108  4E75      1596          rts
                    1597   ; //
                    1598   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1599   ; //
                    1600   ; }
                    1601   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1602   ; // IMPORTANT
                    1603   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1604   ; // has to be done with an interrupt (IRQ Level 6)
                    1605   ; //
                    1606   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1607   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1608   ; //
                    1609   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1610   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1611   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1612   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1613   ; // program area
                    1614   ; //
                    1615   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1616   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1617   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1618   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1619   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1620   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1621   ; void DumpRegisters()
                    1622   ; {
                    1623   _DumpRegisters:
0000110A  48E7 3F3C 1624          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000110E  45F9 0000 1625          lea       _putch.L,A2
00001112  2FE4      
00001114  47F9 0000 1626          lea       _printf.L,A3
00001118  30F2      
0000111A  49F9 0B00 1627          lea       _SR.L,A4
0000111E  012C      
00001120  4BF9 0B00 1628          lea       _WatchPointString.L,A5
00001124  01C2      
                    1629   ; short i, x, j, k ;
                    1630   ; unsigned char c, *BytePointer;
                    1631   ; // buld up strings for displaying watchpoints
                    1632   ; for(x = 0; x < (short)(8); x++)
00001126  4242      1633          clr.w     D2
                    1634   DumpRegisters_1:
00001128  0C42 0008 1635          cmp.w     #8,D2
0000112C  6C00 01C6 1636          bge       DumpRegisters_3
                    1637   ; {
                    1638   ; if(WatchPointSetOrCleared[x] == 1)
00001130  48C2      1639          ext.l     D2
00001132  2002      1640          move.l    D2,D0
00001134  E588      1641          lsl.l     #2,D0
00001136  41F9 0B00 1642          lea       _WatchPointSetOrCleared.L,A0
0000113A  01A2      
0000113C  2030 0800 1643          move.l    0(A0,D0.L),D0
00001140  0C80 0000 1644          cmp.l     #1,D0
00001144  0001      
00001146  6600 0186 1645          bne       DumpRegisters_4
                    1646   ; {
                    1647   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000114A  48C2      1648          ext.l     D2
0000114C  2202      1649          move.l    D2,D1
0000114E  E589      1650          lsl.l     #2,D1
00001150  41F9 0B00 1651          lea       _WatchPointAddress.L,A0
00001154  0182      
00001156  2F30 1800 1652          move.l    0(A0,D1.L),-(A7)
0000115A  4879 0000 1653          pea       @m68kde~1_23.L
0000115E  3C8A      
00001160  220D      1654          move.l    A5,D1
00001162  48C2      1655          ext.l     D2
00001164  2F00      1656          move.l    D0,-(A7)
00001166  2002      1657          move.l    D2,D0
00001168  C1FC 0064 1658          muls      #100,D0
0000116C  D280      1659          add.l     D0,D1
0000116E  201F      1660          move.l    (A7)+,D0
00001170  2F01      1661          move.l    D1,-(A7)
00001172  4EB9 0000 1662          jsr       _sprintf
00001176  307C      
00001178  DEFC 000C 1663          add.w     #12,A7
                    1664   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000117C  48C2      1665          ext.l     D2
0000117E  2002      1666          move.l    D2,D0
00001180  E588      1667          lsl.l     #2,D0
00001182  41F9 0B00 1668          lea       _WatchPointAddress.L,A0
00001186  0182      
00001188  2A30 0800 1669          move.l    0(A0,D0.L),D5
                    1670   ; for(j = 0; j < (short)(16); j+=2)
0000118C  4243      1671          clr.w     D3
                    1672   DumpRegisters_6:
0000118E  0C43 0010 1673          cmp.w     #16,D3
00001192  6C00 0082 1674          bge       DumpRegisters_8
                    1675   ; {
                    1676   ; for(k = 0; k < (short)(2); k++)
00001196  4246      1677          clr.w     D6
                    1678   DumpRegisters_9:
00001198  0C46 0002 1679          cmp.w     #2,D6
0000119C  6C00 0052 1680          bge       DumpRegisters_11
                    1681   ; {
                    1682   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000011A0  2045      1683          move.l    D5,A0
000011A2  48C3      1684          ext.l     D3
000011A4  2203      1685          move.l    D3,D1
000011A6  48C6      1686          ext.l     D6
000011A8  D286      1687          add.l     D6,D1
000011AA  1230 1800 1688          move.b    0(A0,D1.L),D1
000011AE  C2BC 0000 1689          and.l     #255,D1
000011B2  00FF      
000011B4  2F01      1690          move.l    D1,-(A7)
000011B6  4879 0000 1691          pea       @m68kde~1_8.L
000011BA  3ABA      
000011BC  4879 0B00 1692          pea       _TempString.L
000011C0  04E2      
000011C2  4EB9 0000 1693          jsr       _sprintf
000011C6  307C      
000011C8  DEFC 000C 1694          add.w     #12,A7
                    1695   ; strcat(WatchPointString[x], TempString) ;
000011CC  4879 0B00 1696          pea       _TempString.L
000011D0  04E2      
000011D2  220D      1697          move.l    A5,D1
000011D4  48C2      1698          ext.l     D2
000011D6  2F00      1699          move.l    D0,-(A7)
000011D8  2002      1700          move.l    D2,D0
000011DA  C1FC 0064 1701          muls      #100,D0
000011DE  D280      1702          add.l     D0,D1
000011E0  201F      1703          move.l    (A7)+,D0
000011E2  2F01      1704          move.l    D1,-(A7)
000011E4  4EB9 0000 1705          jsr       _strcat
000011E8  30B0      
000011EA  504F      1706          addq.w    #8,A7
000011EC  5246      1707          addq.w    #1,D6
000011EE  60A8      1708          bra       DumpRegisters_9
                    1709   DumpRegisters_11:
                    1710   ; }
                    1711   ; strcat(WatchPointString[x]," ") ;
000011F0  4879 0000 1712          pea       @m68kde~1_24.L
000011F4  3C92      
000011F6  220D      1713          move.l    A5,D1
000011F8  48C2      1714          ext.l     D2
000011FA  2F00      1715          move.l    D0,-(A7)
000011FC  2002      1716          move.l    D2,D0
000011FE  C1FC 0064 1717          muls      #100,D0
00001202  D280      1718          add.l     D0,D1
00001204  201F      1719          move.l    (A7)+,D0
00001206  2F01      1720          move.l    D1,-(A7)
00001208  4EB9 0000 1721          jsr       _strcat
0000120C  30B0      
0000120E  504F      1722          addq.w    #8,A7
00001210  5443      1723          addq.w    #2,D3
00001212  6000 FF7A 1724          bra       DumpRegisters_6
                    1725   DumpRegisters_8:
                    1726   ; }
                    1727   ; strcat(WatchPointString[x], "  ") ;
00001216  4879 0000 1728          pea       @m68kde~1_9.L
0000121A  3AC0      
0000121C  220D      1729          move.l    A5,D1
0000121E  48C2      1730          ext.l     D2
00001220  2F00      1731          move.l    D0,-(A7)
00001222  2002      1732          move.l    D2,D0
00001224  C1FC 0064 1733          muls      #100,D0
00001228  D280      1734          add.l     D0,D1
0000122A  201F      1735          move.l    (A7)+,D0
0000122C  2F01      1736          move.l    D1,-(A7)
0000122E  4EB9 0000 1737          jsr       _strcat
00001232  30B0      
00001234  504F      1738          addq.w    #8,A7
                    1739   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001236  48C2      1740          ext.l     D2
00001238  2002      1741          move.l    D2,D0
0000123A  E588      1742          lsl.l     #2,D0
0000123C  41F9 0B00 1743          lea       _WatchPointAddress.L,A0
00001240  0182      
00001242  2A30 0800 1744          move.l    0(A0,D0.L),D5
                    1745   ; for(j = 0; j < (short)(16); j++)
00001246  4243      1746          clr.w     D3
                    1747   DumpRegisters_12:
00001248  0C43 0010 1748          cmp.w     #16,D3
0000124C  6C00 007E 1749          bge       DumpRegisters_14
                    1750   ; {
                    1751   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001250  2045      1752          move.l    D5,A0
00001252  48C3      1753          ext.l     D3
00001254  1030 3800 1754          move.b    0(A0,D3.L),D0
00001258  C03C 007F 1755          and.b     #127,D0
0000125C  1E00      1756          move.b    D0,D7
                    1757   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000125E  0C07 007F 1758          cmp.b     #127,D7
00001262  6206      1759          bhi.s     DumpRegisters_17
00001264  0C07 0020 1760          cmp.b     #32,D7
00001268  6416      1761          bhs.s     DumpRegisters_15
                    1762   DumpRegisters_17:
                    1763   ; sprintf(TempString, ".") ;
0000126A  4879 0000 1764          pea       @m68kde~1_25.L
0000126E  3C94      
00001270  4879 0B00 1765          pea       _TempString.L
00001274  04E2      
00001276  4EB9 0000 1766          jsr       _sprintf
0000127A  307C      
0000127C  504F      1767          addq.w    #8,A7
0000127E  6026      1768          bra.s     DumpRegisters_16
                    1769   DumpRegisters_15:
                    1770   ; else
                    1771   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001280  2045      1772          move.l    D5,A0
00001282  48C3      1773          ext.l     D3
00001284  1230 3800 1774          move.b    0(A0,D3.L),D1
00001288  C2BC 0000 1775          and.l     #255,D1
0000128C  00FF      
0000128E  2F01      1776          move.l    D1,-(A7)
00001290  4879 0000 1777          pea       @m68kde~1_26.L
00001294  3C96      
00001296  4879 0B00 1778          pea       _TempString.L
0000129A  04E2      
0000129C  4EB9 0000 1779          jsr       _sprintf
000012A0  307C      
000012A2  DEFC 000C 1780          add.w     #12,A7
                    1781   DumpRegisters_16:
                    1782   ; strcat(WatchPointString[x], TempString) ;
000012A6  4879 0B00 1783          pea       _TempString.L
000012AA  04E2      
000012AC  220D      1784          move.l    A5,D1
000012AE  48C2      1785          ext.l     D2
000012B0  2F00      1786          move.l    D0,-(A7)
000012B2  2002      1787          move.l    D2,D0
000012B4  C1FC 0064 1788          muls      #100,D0
000012B8  D280      1789          add.l     D0,D1
000012BA  201F      1790          move.l    (A7)+,D0
000012BC  2F01      1791          move.l    D1,-(A7)
000012BE  4EB9 0000 1792          jsr       _strcat
000012C2  30B0      
000012C4  504F      1793          addq.w    #8,A7
000012C6  5243      1794          addq.w    #1,D3
000012C8  6000 FF7E 1795          bra       DumpRegisters_12
                    1796   DumpRegisters_14:
000012CC  6020      1797          bra.s     DumpRegisters_5
                    1798   DumpRegisters_4:
                    1799   ; }
                    1800   ; }
                    1801   ; else
                    1802   ; strcpy(WatchPointString[x], "") ;
000012CE  4879 0000 1803          pea       @m68kde~1_27.L
000012D2  3C9A      
000012D4  220D      1804          move.l    A5,D1
000012D6  48C2      1805          ext.l     D2
000012D8  2F00      1806          move.l    D0,-(A7)
000012DA  2002      1807          move.l    D2,D0
000012DC  C1FC 0064 1808          muls      #100,D0
000012E0  D280      1809          add.l     D0,D1
000012E2  201F      1810          move.l    (A7)+,D0
000012E4  2F01      1811          move.l    D1,-(A7)
000012E6  4EB9 0000 1812          jsr       _strcpy
000012EA  2EF6      
000012EC  504F      1813          addq.w    #8,A7
                    1814   DumpRegisters_5:
000012EE  5242      1815          addq.w    #1,D2
000012F0  6000 FE36 1816          bra       DumpRegisters_1
                    1817   DumpRegisters_3:
                    1818   ; }
                    1819   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012F4  2F39 0B00 1820          move.l    _a0.L,-(A7)
000012F8  0104      
000012FA  2F39 0B00 1821          move.l    _d0.L,-(A7)
000012FE  00E4      
00001300  4879 0000 1822          pea       @m68kde~1_28.L
00001304  3C9C      
00001306  4E93      1823          jsr       (A3)
00001308  DEFC 000C 1824          add.w     #12,A7
                    1825   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
0000130C  2F39 0B00 1826          move.l    _a1.L,-(A7)
00001310  0108      
00001312  2F39 0B00 1827          move.l    _d1.L,-(A7)
00001316  00E8      
00001318  4879 0000 1828          pea       @m68kde~1_29.L
0000131C  3CB8      
0000131E  4E93      1829          jsr       (A3)
00001320  DEFC 000C 1830          add.w     #12,A7
                    1831   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001324  2F39 0B00 1832          move.l    _a2.L,-(A7)
00001328  010C      
0000132A  2F39 0B00 1833          move.l    _d2.L,-(A7)
0000132E  00EC      
00001330  4879 0000 1834          pea       @m68kde~1_30.L
00001334  3CD2      
00001336  4E93      1835          jsr       (A3)
00001338  DEFC 000C 1836          add.w     #12,A7
                    1837   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000133C  2F39 0B00 1838          move.l    _a3.L,-(A7)
00001340  0110      
00001342  2F39 0B00 1839          move.l    _d3.L,-(A7)
00001346  00F0      
00001348  4879 0000 1840          pea       @m68kde~1_31.L
0000134C  3CEC      
0000134E  4E93      1841          jsr       (A3)
00001350  DEFC 000C 1842          add.w     #12,A7
                    1843   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001354  2F39 0B00 1844          move.l    _a4.L,-(A7)
00001358  0114      
0000135A  2F39 0B00 1845          move.l    _d4.L,-(A7)
0000135E  00F4      
00001360  4879 0000 1846          pea       @m68kde~1_32.L
00001364  3D06      
00001366  4E93      1847          jsr       (A3)
00001368  DEFC 000C 1848          add.w     #12,A7
                    1849   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000136C  2F39 0B00 1850          move.l    _a5.L,-(A7)
00001370  0118      
00001372  2F39 0B00 1851          move.l    _d5.L,-(A7)
00001376  00F8      
00001378  4879 0000 1852          pea       @m68kde~1_33.L
0000137C  3D20      
0000137E  4E93      1853          jsr       (A3)
00001380  DEFC 000C 1854          add.w     #12,A7
                    1855   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001384  2F39 0B00 1856          move.l    _a6.L,-(A7)
00001388  011C      
0000138A  2F39 0B00 1857          move.l    _d6.L,-(A7)
0000138E  00FC      
00001390  4879 0000 1858          pea       @m68kde~1_34.L
00001394  3D3A      
00001396  4E93      1859          jsr       (A3)
00001398  DEFC 000C 1860          add.w     #12,A7
                    1861   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000139C  3214      1862          move.w    (A4),D1
0000139E  C27C 2000 1863          and.w     #8192,D1
000013A2  0C41 2000 1864          cmp.w     #8192,D1
000013A6  6608      1865          bne.s     DumpRegisters_18
000013A8  2239 0B00 1866          move.l    _SSP.L,D1
000013AC  0124      
000013AE  6006      1867          bra.s     DumpRegisters_19
                    1868   DumpRegisters_18:
000013B0  2239 0B00 1869          move.l    _USP.L,D1
000013B4  0128      
                    1870   DumpRegisters_19:
000013B6  2F01      1871          move.l    D1,-(A7)
000013B8  2F39 0B00 1872          move.l    _d7.L,-(A7)
000013BC  0100      
000013BE  4879 0000 1873          pea       @m68kde~1_35.L
000013C2  3D54      
000013C4  4E93      1874          jsr       (A3)
000013C6  DEFC 000C 1875          add.w     #12,A7
                    1876   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000013CA  2F39 0B00 1877          move.l    _USP.L,-(A7)
000013CE  0128      
000013D0  4879 0000 1878          pea       @m68kde~1_36.L
000013D4  3D6E      
000013D6  4E93      1879          jsr       (A3)
000013D8  504F      1880          addq.w    #8,A7
                    1881   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013DA  2F39 0B00 1882          move.l    _SSP.L,-(A7)
000013DE  0124      
000013E0  4879 0000 1883          pea       @m68kde~1_37.L
000013E4  3D8C      
000013E6  4E93      1884          jsr       (A3)
000013E8  504F      1885          addq.w    #8,A7
                    1886   ; printf("\r\n SR = $%04X   ",SR) ;
000013EA  3214      1887          move.w    (A4),D1
000013EC  C2BC 0000 1888          and.l     #65535,D1
000013F0  FFFF      
000013F2  2F01      1889          move.l    D1,-(A7)
000013F4  4879 0000 1890          pea       @m68kde~1_38.L
000013F8  3DAE      
000013FA  4E93      1891          jsr       (A3)
000013FC  504F      1892          addq.w    #8,A7
                    1893   ; // display the status word in characters etc.
                    1894   ; printf("   [") ;
000013FE  4879 0000 1895          pea       @m68kde~1_39.L
00001402  3DC0      
00001404  4E93      1896          jsr       (A3)
00001406  584F      1897          addq.w    #4,A7
                    1898   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001408  3014      1899          move.w    (A4),D0
0000140A  C07C 8000 1900          and.w     #32768,D0
0000140E  0C40 8000 1901          cmp.w     #32768,D0
00001412  660A      1902          bne.s     DumpRegisters_20
00001414  4878 0054 1903          pea       84
00001418  4E92      1904          jsr       (A2)
0000141A  584F      1905          addq.w    #4,A7
0000141C  6008      1906          bra.s     DumpRegisters_21
                    1907   DumpRegisters_20:
0000141E  4878 002D 1908          pea       45
00001422  4E92      1909          jsr       (A2)
00001424  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_21:
                    1912   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001426  3014      1913          move.w    (A4),D0
00001428  C07C 2000 1914          and.w     #8192,D0
0000142C  0C40 2000 1915          cmp.w     #8192,D0
00001430  660A      1916          bne.s     DumpRegisters_22
00001432  4878 0053 1917          pea       83
00001436  4E92      1918          jsr       (A2)
00001438  584F      1919          addq.w    #4,A7
0000143A  6008      1920          bra.s     DumpRegisters_23
                    1921   DumpRegisters_22:
0000143C  4878 0055 1922          pea       85
00001440  4E92      1923          jsr       (A2)
00001442  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_23:
                    1926   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001444  3014      1927          move.w    (A4),D0
00001446  C07C 0400 1928          and.w     #1024,D0
0000144A  0C40 0400 1929          cmp.w     #1024,D0
0000144E  660A      1930          bne.s     DumpRegisters_24
00001450  4878 0031 1931          pea       49
00001454  4E92      1932          jsr       (A2)
00001456  584F      1933          addq.w    #4,A7
00001458  6008      1934          bra.s     DumpRegisters_25
                    1935   DumpRegisters_24:
0000145A  4878 0030 1936          pea       48
0000145E  4E92      1937          jsr       (A2)
00001460  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_25:
                    1940   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001462  3014      1941          move.w    (A4),D0
00001464  C07C 0200 1942          and.w     #512,D0
00001468  0C40 0200 1943          cmp.w     #512,D0
0000146C  660A      1944          bne.s     DumpRegisters_26
0000146E  4878 0031 1945          pea       49
00001472  4E92      1946          jsr       (A2)
00001474  584F      1947          addq.w    #4,A7
00001476  6008      1948          bra.s     DumpRegisters_27
                    1949   DumpRegisters_26:
00001478  4878 0030 1950          pea       48
0000147C  4E92      1951          jsr       (A2)
0000147E  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_27:
                    1954   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001480  3014      1955          move.w    (A4),D0
00001482  C07C 0100 1956          and.w     #256,D0
00001486  0C40 0100 1957          cmp.w     #256,D0
0000148A  660A      1958          bne.s     DumpRegisters_28
0000148C  4878 0031 1959          pea       49
00001490  4E92      1960          jsr       (A2)
00001492  584F      1961          addq.w    #4,A7
00001494  6008      1962          bra.s     DumpRegisters_29
                    1963   DumpRegisters_28:
00001496  4878 0030 1964          pea       48
0000149A  4E92      1965          jsr       (A2)
0000149C  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_29:
                    1968   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000149E  3014      1969          move.w    (A4),D0
000014A0  C07C 0010 1970          and.w     #16,D0
000014A4  0C40 0010 1971          cmp.w     #16,D0
000014A8  660A      1972          bne.s     DumpRegisters_30
000014AA  4878 0058 1973          pea       88
000014AE  4E92      1974          jsr       (A2)
000014B0  584F      1975          addq.w    #4,A7
000014B2  6008      1976          bra.s     DumpRegisters_31
                    1977   DumpRegisters_30:
000014B4  4878 002D 1978          pea       45
000014B8  4E92      1979          jsr       (A2)
000014BA  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_31:
                    1982   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000014BC  3014      1983          move.w    (A4),D0
000014BE  C07C 0008 1984          and.w     #8,D0
000014C2  0C40 0008 1985          cmp.w     #8,D0
000014C6  660A      1986          bne.s     DumpRegisters_32
000014C8  4878 004E 1987          pea       78
000014CC  4E92      1988          jsr       (A2)
000014CE  584F      1989          addq.w    #4,A7
000014D0  6008      1990          bra.s     DumpRegisters_33
                    1991   DumpRegisters_32:
000014D2  4878 002D 1992          pea       45
000014D6  4E92      1993          jsr       (A2)
000014D8  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_33:
                    1996   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014DA  3014      1997          move.w    (A4),D0
000014DC  C07C 0004 1998          and.w     #4,D0
000014E0  0C40 0004 1999          cmp.w     #4,D0
000014E4  660A      2000          bne.s     DumpRegisters_34
000014E6  4878 005A 2001          pea       90
000014EA  4E92      2002          jsr       (A2)
000014EC  584F      2003          addq.w    #4,A7
000014EE  6008      2004          bra.s     DumpRegisters_35
                    2005   DumpRegisters_34:
000014F0  4878 002D 2006          pea       45
000014F4  4E92      2007          jsr       (A2)
000014F6  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_35:
                    2010   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014F8  3014      2011          move.w    (A4),D0
000014FA  C07C 0002 2012          and.w     #2,D0
000014FE  0C40 0002 2013          cmp.w     #2,D0
00001502  660A      2014          bne.s     DumpRegisters_36
00001504  4878 0056 2015          pea       86
00001508  4E92      2016          jsr       (A2)
0000150A  584F      2017          addq.w    #4,A7
0000150C  6008      2018          bra.s     DumpRegisters_37
                    2019   DumpRegisters_36:
0000150E  4878 002D 2020          pea       45
00001512  4E92      2021          jsr       (A2)
00001514  584F      2022          addq.w    #4,A7
                    2023   DumpRegisters_37:
                    2024   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001516  3014      2025          move.w    (A4),D0
00001518  C07C 0001 2026          and.w     #1,D0
0000151C  0C40 0001 2027          cmp.w     #1,D0
00001520  660A      2028          bne.s     DumpRegisters_38
00001522  4878 0043 2029          pea       67
00001526  4E92      2030          jsr       (A2)
00001528  584F      2031          addq.w    #4,A7
0000152A  6008      2032          bra.s     DumpRegisters_39
                    2033   DumpRegisters_38:
0000152C  4878 002D 2034          pea       45
00001530  4E92      2035          jsr       (A2)
00001532  584F      2036          addq.w    #4,A7
                    2037   DumpRegisters_39:
                    2038   ; putchar(']') ;
00001534  4878 005D 2039          pea       93
00001538  4E92      2040          jsr       (A2)
0000153A  584F      2041          addq.w    #4,A7
                    2042   ; printf("\r\n PC = $%08X  ", PC) ;
0000153C  2F39 0B00 2043          move.l    _PC.L,-(A7)
00001540  0120      
00001542  4879 0000 2044          pea       @m68kde~1_40.L
00001546  3DC6      
00001548  4E93      2045          jsr       (A3)
0000154A  504F      2046          addq.w    #8,A7
                    2047   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000154C  2039 0B00 2048          move.l    _PC.L,D0
00001550  0120      
00001552  2040      2049          move.l    D0,A0
00001554  3010      2050          move.w    (A0),D0
00001556  0C40 4E4E 2051          cmp.w     #20046,D0
0000155A  660A      2052          bne.s     DumpRegisters_40
                    2053   ; printf("[@ BREAKPOINT]") ;
0000155C  4879 0000 2054          pea       @m68kde~1_41.L
00001560  3DD6      
00001562  4E93      2055          jsr       (A3)
00001564  584F      2056          addq.w    #4,A7
                    2057   DumpRegisters_40:
                    2058   ; printf("\r\n") ;
00001566  4879 0000 2059          pea       @m68kde~1_1.L
0000156A  3A42      
0000156C  4E93      2060          jsr       (A3)
0000156E  584F      2061          addq.w    #4,A7
                    2062   ; for(i=0; i < 8; i++)    {
00001570  4244      2063          clr.w     D4
                    2064   DumpRegisters_42:
00001572  0C44 0008 2065          cmp.w     #8,D4
00001576  6C00 0040 2066          bge       DumpRegisters_44
                    2067   ; if(WatchPointSetOrCleared[i] == 1)
0000157A  48C4      2068          ext.l     D4
0000157C  2004      2069          move.l    D4,D0
0000157E  E588      2070          lsl.l     #2,D0
00001580  41F9 0B00 2071          lea       _WatchPointSetOrCleared.L,A0
00001584  01A2      
00001586  2030 0800 2072          move.l    0(A0,D0.L),D0
0000158A  0C80 0000 2073          cmp.l     #1,D0
0000158E  0001      
00001590  6622      2074          bne.s     DumpRegisters_45
                    2075   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001592  220D      2076          move.l    A5,D1
00001594  48C4      2077          ext.l     D4
00001596  2F00      2078          move.l    D0,-(A7)
00001598  2004      2079          move.l    D4,D0
0000159A  C1FC 0064 2080          muls      #100,D0
0000159E  D280      2081          add.l     D0,D1
000015A0  201F      2082          move.l    (A7)+,D0
000015A2  2F01      2083          move.l    D1,-(A7)
000015A4  48C4      2084          ext.l     D4
000015A6  2F04      2085          move.l    D4,-(A7)
000015A8  4879 0000 2086          pea       @m68kde~1_42.L
000015AC  3DE6      
000015AE  4E93      2087          jsr       (A3)
000015B0  DEFC 000C 2088          add.w     #12,A7
                    2089   DumpRegisters_45:
000015B4  5244      2090          addq.w    #1,D4
000015B6  60BA      2091          bra       DumpRegisters_42
                    2092   DumpRegisters_44:
000015B8  4CDF 3CFC 2093          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000015BC  4E75      2094          rts
                    2095   ; }
                    2096   ; }
                    2097   ; // Trace Exception Handler
                    2098   ; void DumpRegistersandPause(void)
                    2099   ; {
                    2100   _DumpRegistersandPause:
000015BE  2F0A      2101          move.l    A2,-(A7)
000015C0  45F9 0000 2102          lea       _printf.L,A2
000015C4  30F2      
                    2103   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000015C6  4879 0000 2104          pea       @m68kde~1_43.L
000015CA  3DF2      
000015CC  4E92      2105          jsr       (A2)
000015CE  584F      2106          addq.w    #4,A7
                    2107   ; printf("\r\nBreak Points :[Disabled]") ;
000015D0  4879 0000 2108          pea       @m68kde~1_44.L
000015D4  3E12      
000015D6  4E92      2109          jsr       (A2)
000015D8  584F      2110          addq.w    #4,A7
                    2111   ; DumpRegisters() ;
000015DA  4EB8 110A 2112          jsr       _DumpRegisters
                    2113   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015DE  4879 0000 2114          pea       @m68kde~1_45.L
000015E2  3E2E      
000015E4  4E92      2115          jsr       (A2)
000015E6  584F      2116          addq.w    #4,A7
                    2117   ; printf("\r\nPress <ESC> to Resume Program") ;
000015E8  4879 0000 2118          pea       @m68kde~1_46.L
000015EC  3E5A      
000015EE  4E92      2119          jsr       (A2)
000015F0  584F      2120          addq.w    #4,A7
                    2121   ; menu() ;
000015F2  4EB9 0000 2122          jsr       _menu
000015F6  21A2      
000015F8  245F      2123          move.l    (A7)+,A2
000015FA  4E75      2124          rts
                    2125   ; }
                    2126   ; void ChangeRegisters(void)
                    2127   ; {
                    2128   _ChangeRegisters:
000015FC  4E56 FFFC 2129          link      A6,#-4
00001600  48E7 303C 2130          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001604  45F9 0000 2131          lea       _printf.L,A2
00001608  30F2      
0000160A  47EE FFFC 2132          lea       -4(A6),A3
0000160E  49F8 0CD8 2133          lea       _Get8HexDigits.L,A4
00001612  4BF8 0B68 2134          lea       __getch.L,A5
                    2135   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2136   ; int reg_val ;
                    2137   ; char c, reg[3] ;
                    2138   ; reg[0] = tolower(_getch()) ;
00001616  2F00      2139          move.l    D0,-(A7)
00001618  4E95      2140          jsr       (A5)
0000161A  2200      2141          move.l    D0,D1
0000161C  201F      2142          move.l    (A7)+,D0
0000161E  2F01      2143          move.l    D1,-(A7)
00001620  4EB9 0000 2144          jsr       _tolower
00001624  3050      
00001626  584F      2145          addq.w    #4,A7
00001628  1680      2146          move.b    D0,(A3)
                    2147   ; reg[1] = c = tolower(_getch()) ;
0000162A  2F00      2148          move.l    D0,-(A7)
0000162C  4E95      2149          jsr       (A5)
0000162E  2200      2150          move.l    D0,D1
00001630  201F      2151          move.l    (A7)+,D0
00001632  2F01      2152          move.l    D1,-(A7)
00001634  4EB9 0000 2153          jsr       _tolower
00001638  3050      
0000163A  584F      2154          addq.w    #4,A7
0000163C  1400      2155          move.b    D0,D2
0000163E  1740 0001 2156          move.b    D0,1(A3)
                    2157   ; if(reg[0] == (char)('d'))  {    // change data register
00001642  1013      2158          move.b    (A3),D0
00001644  0C00 0064 2159          cmp.b     #100,D0
00001648  6600 00AE 2160          bne       ChangeRegisters_1
                    2161   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000164C  102B 0001 2162          move.b    1(A3),D0
00001650  0C00 0037 2163          cmp.b     #55,D0
00001654  6E0A      2164          bgt.s     ChangeRegisters_5
00001656  102B 0001 2165          move.b    1(A3),D0
0000165A  0C00 0030 2166          cmp.b     #48,D0
0000165E  6C0E      2167          bge.s     ChangeRegisters_3
                    2168   ChangeRegisters_5:
                    2169   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001660  4879 0000 2170          pea       @m68kde~1_47.L
00001664  3E7A      
00001666  4E92      2171          jsr       (A2)
00001668  584F      2172          addq.w    #4,A7
                    2173   ; return ;
0000166A  6000 0244 2174          bra       ChangeRegisters_6
                    2175   ChangeRegisters_3:
                    2176   ; }
                    2177   ; else {
                    2178   ; printf("\r\nD%c = ", c) ;
0000166E  4882      2179          ext.w     D2
00001670  48C2      2180          ext.l     D2
00001672  2F02      2181          move.l    D2,-(A7)
00001674  4879 0000 2182          pea       @m68kde~1_48.L
00001678  3EA6      
0000167A  4E92      2183          jsr       (A2)
0000167C  504F      2184          addq.w    #8,A7
                    2185   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000167E  42A7      2186          clr.l     -(A7)
00001680  4E94      2187          jsr       (A4)
00001682  584F      2188          addq.w    #4,A7
00001684  2600      2189          move.l    D0,D3
                    2190   ; }
                    2191   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2192   ; if(c == (char)('0'))
00001686  0C02 0030 2193          cmp.b     #48,D2
0000168A  660A      2194          bne.s     ChangeRegisters_7
                    2195   ; d0 = reg_val ;
0000168C  23C3 0B00 2196          move.l    D3,_d0.L
00001690  00E4      
00001692  6000 0060 2197          bra       ChangeRegisters_20
                    2198   ChangeRegisters_7:
                    2199   ; else if(c == (char)('1'))
00001696  0C02 0031 2200          cmp.b     #49,D2
0000169A  660A      2201          bne.s     ChangeRegisters_9
                    2202   ; d1 = reg_val ;
0000169C  23C3 0B00 2203          move.l    D3,_d1.L
000016A0  00E8      
000016A2  6000 0050 2204          bra       ChangeRegisters_20
                    2205   ChangeRegisters_9:
                    2206   ; else if(c == (char)('2'))
000016A6  0C02 0032 2207          cmp.b     #50,D2
000016AA  660A      2208          bne.s     ChangeRegisters_11
                    2209   ; d2 = reg_val ;
000016AC  23C3 0B00 2210          move.l    D3,_d2.L
000016B0  00EC      
000016B2  6000 0040 2211          bra       ChangeRegisters_20
                    2212   ChangeRegisters_11:
                    2213   ; else if(c == (char)('3'))
000016B6  0C02 0033 2214          cmp.b     #51,D2
000016BA  6608      2215          bne.s     ChangeRegisters_13
                    2216   ; d3 = reg_val ;
000016BC  23C3 0B00 2217          move.l    D3,_d3.L
000016C0  00F0      
000016C2  6030      2218          bra.s     ChangeRegisters_20
                    2219   ChangeRegisters_13:
                    2220   ; else if(c == (char)('4'))
000016C4  0C02 0034 2221          cmp.b     #52,D2
000016C8  6608      2222          bne.s     ChangeRegisters_15
                    2223   ; d4 = reg_val ;
000016CA  23C3 0B00 2224          move.l    D3,_d4.L
000016CE  00F4      
000016D0  6022      2225          bra.s     ChangeRegisters_20
                    2226   ChangeRegisters_15:
                    2227   ; else if(c == (char)('5'))
000016D2  0C02 0035 2228          cmp.b     #53,D2
000016D6  6608      2229          bne.s     ChangeRegisters_17
                    2230   ; d5 = reg_val ;
000016D8  23C3 0B00 2231          move.l    D3,_d5.L
000016DC  00F8      
000016DE  6014      2232          bra.s     ChangeRegisters_20
                    2233   ChangeRegisters_17:
                    2234   ; else if(c == (char)('6'))
000016E0  0C02 0036 2235          cmp.b     #54,D2
000016E4  6608      2236          bne.s     ChangeRegisters_19
                    2237   ; d6 = reg_val ;
000016E6  23C3 0B00 2238          move.l    D3,_d6.L
000016EA  00FC      
000016EC  6006      2239          bra.s     ChangeRegisters_20
                    2240   ChangeRegisters_19:
                    2241   ; else
                    2242   ; d7 = reg_val ;
000016EE  23C3 0B00 2243          move.l    D3,_d7.L
000016F2  0100      
                    2244   ChangeRegisters_20:
000016F4  6000 01B6 2245          bra       ChangeRegisters_51
                    2246   ChangeRegisters_1:
                    2247   ; }
                    2248   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016F8  1013      2249          move.b    (A3),D0
000016FA  0C00 0061 2250          cmp.b     #97,D0
000016FE  6600 00A6 2251          bne       ChangeRegisters_21
                    2252   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001702  0C02 0037 2253          cmp.b     #55,D2
00001706  6E06      2254          bgt.s     ChangeRegisters_25
00001708  0C02 0030 2255          cmp.b     #48,D2
0000170C  6C0E      2256          bge.s     ChangeRegisters_23
                    2257   ChangeRegisters_25:
                    2258   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
0000170E  4879 0000 2259          pea       @m68kde~1_49.L
00001712  3EB0      
00001714  4E92      2260          jsr       (A2)
00001716  584F      2261          addq.w    #4,A7
                    2262   ; return ;
00001718  6000 0196 2263          bra       ChangeRegisters_6
                    2264   ChangeRegisters_23:
                    2265   ; }
                    2266   ; else {
                    2267   ; printf("\r\nA%c = ", c) ;
0000171C  4882      2268          ext.w     D2
0000171E  48C2      2269          ext.l     D2
00001720  2F02      2270          move.l    D2,-(A7)
00001722  4879 0000 2271          pea       @m68kde~1_50.L
00001726  3EDE      
00001728  4E92      2272          jsr       (A2)
0000172A  504F      2273          addq.w    #8,A7
                    2274   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000172C  42A7      2275          clr.l     -(A7)
0000172E  4E94      2276          jsr       (A4)
00001730  584F      2277          addq.w    #4,A7
00001732  2600      2278          move.l    D0,D3
                    2279   ; }
                    2280   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2281   ; if(c == (char)('0'))
00001734  0C02 0030 2282          cmp.b     #48,D2
00001738  660A      2283          bne.s     ChangeRegisters_26
                    2284   ; a0 = reg_val ;
0000173A  23C3 0B00 2285          move.l    D3,_a0.L
0000173E  0104      
00001740  6000 0060 2286          bra       ChangeRegisters_39
                    2287   ChangeRegisters_26:
                    2288   ; else if(c == (char)('1'))
00001744  0C02 0031 2289          cmp.b     #49,D2
00001748  660A      2290          bne.s     ChangeRegisters_28
                    2291   ; a1 = reg_val ;
0000174A  23C3 0B00 2292          move.l    D3,_a1.L
0000174E  0108      
00001750  6000 0050 2293          bra       ChangeRegisters_39
                    2294   ChangeRegisters_28:
                    2295   ; else if(c == (char)('2'))
00001754  0C02 0032 2296          cmp.b     #50,D2
00001758  660A      2297          bne.s     ChangeRegisters_30
                    2298   ; a2 = reg_val ;
0000175A  23C3 0B00 2299          move.l    D3,_a2.L
0000175E  010C      
00001760  6000 0040 2300          bra       ChangeRegisters_39
                    2301   ChangeRegisters_30:
                    2302   ; else if(c == (char)('3'))
00001764  0C02 0033 2303          cmp.b     #51,D2
00001768  6608      2304          bne.s     ChangeRegisters_32
                    2305   ; a3 = reg_val ;
0000176A  23C3 0B00 2306          move.l    D3,_a3.L
0000176E  0110      
00001770  6030      2307          bra.s     ChangeRegisters_39
                    2308   ChangeRegisters_32:
                    2309   ; else if(c == (char)('4'))
00001772  0C02 0034 2310          cmp.b     #52,D2
00001776  6608      2311          bne.s     ChangeRegisters_34
                    2312   ; a4 = reg_val ;
00001778  23C3 0B00 2313          move.l    D3,_a4.L
0000177C  0114      
0000177E  6022      2314          bra.s     ChangeRegisters_39
                    2315   ChangeRegisters_34:
                    2316   ; else if(c == (char)('5'))
00001780  0C02 0035 2317          cmp.b     #53,D2
00001784  6608      2318          bne.s     ChangeRegisters_36
                    2319   ; a5 = reg_val ;
00001786  23C3 0B00 2320          move.l    D3,_a5.L
0000178A  0118      
0000178C  6014      2321          bra.s     ChangeRegisters_39
                    2322   ChangeRegisters_36:
                    2323   ; else if(c == (char)('6'))
0000178E  0C02 0036 2324          cmp.b     #54,D2
00001792  6608      2325          bne.s     ChangeRegisters_38
                    2326   ; a6 = reg_val ;
00001794  23C3 0B00 2327          move.l    D3,_a6.L
00001798  011C      
0000179A  6006      2328          bra.s     ChangeRegisters_39
                    2329   ChangeRegisters_38:
                    2330   ; else
                    2331   ; USP = reg_val ;
0000179C  23C3 0B00 2332          move.l    D3,_USP.L
000017A0  0128      
                    2333   ChangeRegisters_39:
000017A2  6000 0108 2334          bra       ChangeRegisters_51
                    2335   ChangeRegisters_21:
                    2336   ; }
                    2337   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
000017A6  1013      2338          move.b    (A3),D0
000017A8  0C00 0075 2339          cmp.b     #117,D0
000017AC  6600 004E 2340          bne       ChangeRegisters_40
000017B0  0C02 0073 2341          cmp.b     #115,D2
000017B4  6600 0046 2342          bne       ChangeRegisters_40
                    2343   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000017B8  2F00      2344          move.l    D0,-(A7)
000017BA  4E95      2345          jsr       (A5)
000017BC  2200      2346          move.l    D0,D1
000017BE  201F      2347          move.l    (A7)+,D0
000017C0  2F01      2348          move.l    D1,-(A7)
000017C2  4EB9 0000 2349          jsr       _tolower
000017C6  3050      
000017C8  584F      2350          addq.w    #4,A7
000017CA  0C80 0000 2351          cmp.l     #112,D0
000017CE  0070      
000017D0  6618      2352          bne.s     ChangeRegisters_42
                    2353   ; printf("\r\nUser SP = ") ;
000017D2  4879 0000 2354          pea       @m68kde~1_51.L
000017D6  3EE8      
000017D8  4E92      2355          jsr       (A2)
000017DA  584F      2356          addq.w    #4,A7
                    2357   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017DC  42A7      2358          clr.l     -(A7)
000017DE  4E94      2359          jsr       (A4)
000017E0  584F      2360          addq.w    #4,A7
000017E2  23C0 0B00 2361          move.l    D0,_USP.L
000017E6  0128      
000017E8  600E      2362          bra.s     ChangeRegisters_43
                    2363   ChangeRegisters_42:
                    2364   ; }
                    2365   ; else {
                    2366   ; printf("\r\nIllegal Register....") ;
000017EA  4879 0000 2367          pea       @m68kde~1_52.L
000017EE  3EF6      
000017F0  4E92      2368          jsr       (A2)
000017F2  584F      2369          addq.w    #4,A7
                    2370   ; return ;
000017F4  6000 00BA 2371          bra       ChangeRegisters_6
                    2372   ChangeRegisters_43:
000017F8  6000 00B2 2373          bra       ChangeRegisters_51
                    2374   ChangeRegisters_40:
                    2375   ; }
                    2376   ; }
                    2377   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017FC  1013      2378          move.b    (A3),D0
000017FE  0C00 0073 2379          cmp.b     #115,D0
00001802  6600 004E 2380          bne       ChangeRegisters_44
00001806  0C02 0073 2381          cmp.b     #115,D2
0000180A  6600 0046 2382          bne       ChangeRegisters_44
                    2383   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
0000180E  2F00      2384          move.l    D0,-(A7)
00001810  4E95      2385          jsr       (A5)
00001812  2200      2386          move.l    D0,D1
00001814  201F      2387          move.l    (A7)+,D0
00001816  2F01      2388          move.l    D1,-(A7)
00001818  4EB9 0000 2389          jsr       _tolower
0000181C  3050      
0000181E  584F      2390          addq.w    #4,A7
00001820  0C80 0000 2391          cmp.l     #112,D0
00001824  0070      
00001826  6618      2392          bne.s     ChangeRegisters_46
                    2393   ; printf("\r\nSystem SP = ") ;
00001828  4879 0000 2394          pea       @m68kde~1_53.L
0000182C  3F0E      
0000182E  4E92      2395          jsr       (A2)
00001830  584F      2396          addq.w    #4,A7
                    2397   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001832  42A7      2398          clr.l     -(A7)
00001834  4E94      2399          jsr       (A4)
00001836  584F      2400          addq.w    #4,A7
00001838  23C0 0B00 2401          move.l    D0,_SSP.L
0000183C  0124      
0000183E  600E      2402          bra.s     ChangeRegisters_47
                    2403   ChangeRegisters_46:
                    2404   ; }
                    2405   ; else {
                    2406   ; printf("\r\nIllegal Register....") ;
00001840  4879 0000 2407          pea       @m68kde~1_52.L
00001844  3EF6      
00001846  4E92      2408          jsr       (A2)
00001848  584F      2409          addq.w    #4,A7
                    2410   ; return ;
0000184A  6000 0064 2411          bra       ChangeRegisters_6
                    2412   ChangeRegisters_47:
0000184E  6000 005C 2413          bra       ChangeRegisters_51
                    2414   ChangeRegisters_44:
                    2415   ; }
                    2416   ; }
                    2417   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001852  1013      2418          move.b    (A3),D0
00001854  0C00 0070 2419          cmp.b     #112,D0
00001858  6620      2420          bne.s     ChangeRegisters_48
0000185A  0C02 0063 2421          cmp.b     #99,D2
0000185E  661A      2422          bne.s     ChangeRegisters_48
                    2423   ; printf("\r\nPC = ") ;
00001860  4879 0000 2424          pea       @m68kde~1_54.L
00001864  3F1E      
00001866  4E92      2425          jsr       (A2)
00001868  584F      2426          addq.w    #4,A7
                    2427   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000186A  42A7      2428          clr.l     -(A7)
0000186C  4E94      2429          jsr       (A4)
0000186E  584F      2430          addq.w    #4,A7
00001870  23C0 0B00 2431          move.l    D0,_PC.L
00001874  0120      
00001876  6000 0034 2432          bra       ChangeRegisters_51
                    2433   ChangeRegisters_48:
                    2434   ; }
                    2435   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000187A  1013      2436          move.b    (A3),D0
0000187C  0C00 0073 2437          cmp.b     #115,D0
00001880  6620      2438          bne.s     ChangeRegisters_50
00001882  0C02 0072 2439          cmp.b     #114,D2
00001886  661A      2440          bne.s     ChangeRegisters_50
                    2441   ; printf("\r\nSR = ") ;
00001888  4879 0000 2442          pea       @m68kde~1_55.L
0000188C  3F26      
0000188E  4E92      2443          jsr       (A2)
00001890  584F      2444          addq.w    #4,A7
                    2445   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001892  42A7      2446          clr.l     -(A7)
00001894  4EB8 0C8C 2447          jsr       _Get4HexDigits
00001898  584F      2448          addq.w    #4,A7
0000189A  33C0 0B00 2449          move.w    D0,_SR.L
0000189E  012C      
000018A0  600A      2450          bra.s     ChangeRegisters_51
                    2451   ChangeRegisters_50:
                    2452   ; }
                    2453   ; else
                    2454   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
000018A2  4879 0000 2455          pea       @m68kde~1_56.L
000018A6  3F2E      
000018A8  4E92      2456          jsr       (A2)
000018AA  584F      2457          addq.w    #4,A7
                    2458   ChangeRegisters_51:
                    2459   ; DumpRegisters() ;
000018AC  4EB8 110A 2460          jsr       _DumpRegisters
                    2461   ChangeRegisters_6:
000018B0  4CDF 3C0C 2462          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000018B4  4E5E      2463          unlk      A6
000018B6  4E75      2464          rts
                    2465   ; }
                    2466   ; void BreakPointDisplay(void)
                    2467   ; {
                    2468   _BreakPointDisplay:
000018B8  48E7 3030 2469          movem.l   D2/D3/A2/A3,-(A7)
000018BC  45F9 0000 2470          lea       _printf.L,A2
000018C0  30F2      
000018C2  47F9 0B00 2471          lea       _BreakPointAddress.L,A3
000018C6  012E      
                    2472   ; int i, BreakPointsSet = 0 ;
000018C8  4283      2473          clr.l     D3
                    2474   ; // any break points  set
                    2475   ; for(i = 0; i < 8; i++)  {
000018CA  4282      2476          clr.l     D2
                    2477   BreakPointDisplay_1:
000018CC  0C82 0000 2478          cmp.l     #8,D2
000018D0  0008      
000018D2  6C1C      2479          bge.s     BreakPointDisplay_3
                    2480   ; if(BreakPointSetOrCleared[i] == 1)
000018D4  2002      2481          move.l    D2,D0
000018D6  E588      2482          lsl.l     #2,D0
000018D8  41F9 0B00 2483          lea       _BreakPointSetOrCleared.L,A0
000018DC  015E      
000018DE  2030 0800 2484          move.l    0(A0,D0.L),D0
000018E2  0C80 0000 2485          cmp.l     #1,D0
000018E6  0001      
000018E8  6602      2486          bne.s     BreakPointDisplay_4
                    2487   ; BreakPointsSet = 1;
000018EA  7601      2488          moveq     #1,D3
                    2489   BreakPointDisplay_4:
000018EC  5282      2490          addq.l    #1,D2
000018EE  60DC      2491          bra       BreakPointDisplay_1
                    2492   BreakPointDisplay_3:
                    2493   ; }
                    2494   ; if(BreakPointsSet == 1) {
000018F0  0C83 0000 2495          cmp.l     #1,D3
000018F4  0001      
000018F6  6616      2496          bne.s     BreakPointDisplay_6
                    2497   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018F8  4879 0000 2498          pea       @m68kde~1_57.L
000018FC  3F6A      
000018FE  4E92      2499          jsr       (A2)
00001900  584F      2500          addq.w    #4,A7
                    2501   ; printf("\r\n---     ---------    -----------") ;
00001902  4879 0000 2502          pea       @m68kde~1_58.L
00001906  3F90      
00001908  4E92      2503          jsr       (A2)
0000190A  584F      2504          addq.w    #4,A7
0000190C  600A      2505          bra.s     BreakPointDisplay_7
                    2506   BreakPointDisplay_6:
                    2507   ; }
                    2508   ; else
                    2509   ; printf("\r\nNo BreakPoints Set") ;
0000190E  4879 0000 2510          pea       @m68kde~1_59.L
00001912  3FB4      
00001914  4E92      2511          jsr       (A2)
00001916  584F      2512          addq.w    #4,A7
                    2513   BreakPointDisplay_7:
                    2514   ; for(i = 0; i < 8; i++)  {
00001918  4282      2515          clr.l     D2
                    2516   BreakPointDisplay_8:
0000191A  0C82 0000 2517          cmp.l     #8,D2
0000191E  0008      
00001920  6C00 005A 2518          bge       BreakPointDisplay_10
                    2519   ; // put opcode back, then put break point back
                    2520   ; if(BreakPointSetOrCleared[i] == 1)  {
00001924  2002      2521          move.l    D2,D0
00001926  E588      2522          lsl.l     #2,D0
00001928  41F9 0B00 2523          lea       _BreakPointSetOrCleared.L,A0
0000192C  015E      
0000192E  2030 0800 2524          move.l    0(A0,D0.L),D0
00001932  0C80 0000 2525          cmp.l     #1,D0
00001936  0001      
00001938  6600 003E 2526          bne       BreakPointDisplay_11
                    2527   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000193C  2002      2528          move.l    D2,D0
0000193E  E388      2529          lsl.l     #1,D0
00001940  41F9 0B00 2530          lea       _BreakPointInstruction.L,A0
00001944  014E      
00001946  2202      2531          move.l    D2,D1
00001948  E589      2532          lsl.l     #2,D1
0000194A  2233 1800 2533          move.l    0(A3,D1.L),D1
0000194E  2241      2534          move.l    D1,A1
00001950  32B0 0800 2535          move.w    0(A0,D0.L),(A1)
                    2536   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001954  2002      2537          move.l    D2,D0
00001956  E588      2538          lsl.l     #2,D0
00001958  2033 0800 2539          move.l    0(A3,D0.L),D0
0000195C  2040      2540          move.l    D0,A0
0000195E  30BC 4E4E 2541          move.w    #20046,(A0)
                    2542   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001962  2202      2543          move.l    D2,D1
00001964  E589      2544          lsl.l     #2,D1
00001966  2F33 1800 2545          move.l    0(A3,D1.L),-(A7)
0000196A  2F02      2546          move.l    D2,-(A7)
0000196C  4879 0000 2547          pea       @m68kde~1_60.L
00001970  3FCA      
00001972  4E92      2548          jsr       (A2)
00001974  DEFC 000C 2549          add.w     #12,A7
                    2550   BreakPointDisplay_11:
00001978  5282      2551          addq.l    #1,D2
0000197A  609E      2552          bra       BreakPointDisplay_8
                    2553   BreakPointDisplay_10:
                    2554   ; }
                    2555   ; }
                    2556   ; printf("\r\n") ;
0000197C  4879 0000 2557          pea       @m68kde~1_1.L
00001980  3A42      
00001982  4E92      2558          jsr       (A2)
00001984  584F      2559          addq.w    #4,A7
00001986  4CDF 0C0C 2560          movem.l   (A7)+,D2/D3/A2/A3
0000198A  4E75      2561          rts
                    2562   ; }
                    2563   ; void WatchPointDisplay(void)
                    2564   ; {
                    2565   _WatchPointDisplay:
0000198C  48E7 3020 2566          movem.l   D2/D3/A2,-(A7)
00001990  45F9 0000 2567          lea       _printf.L,A2
00001994  30F2      
                    2568   ; int i ;
                    2569   ; int WatchPointsSet = 0 ;
00001996  4283      2570          clr.l     D3
                    2571   ; // any watchpoints set
                    2572   ; for(i = 0; i < 8; i++)  {
00001998  4282      2573          clr.l     D2
                    2574   WatchPointDisplay_1:
0000199A  0C82 0000 2575          cmp.l     #8,D2
0000199E  0008      
000019A0  6C1C      2576          bge.s     WatchPointDisplay_3
                    2577   ; if(WatchPointSetOrCleared[i] == 1)
000019A2  2002      2578          move.l    D2,D0
000019A4  E588      2579          lsl.l     #2,D0
000019A6  41F9 0B00 2580          lea       _WatchPointSetOrCleared.L,A0
000019AA  01A2      
000019AC  2030 0800 2581          move.l    0(A0,D0.L),D0
000019B0  0C80 0000 2582          cmp.l     #1,D0
000019B4  0001      
000019B6  6602      2583          bne.s     WatchPointDisplay_4
                    2584   ; WatchPointsSet = 1;
000019B8  7601      2585          moveq     #1,D3
                    2586   WatchPointDisplay_4:
000019BA  5282      2587          addq.l    #1,D2
000019BC  60DC      2588          bra       WatchPointDisplay_1
                    2589   WatchPointDisplay_3:
                    2590   ; }
                    2591   ; if(WatchPointsSet == 1) {
000019BE  0C83 0000 2592          cmp.l     #1,D3
000019C2  0001      
000019C4  6616      2593          bne.s     WatchPointDisplay_6
                    2594   ; printf("\r\nNum     Address") ;
000019C6  4879 0000 2595          pea       @m68kde~1_61.L
000019CA  3FDA      
000019CC  4E92      2596          jsr       (A2)
000019CE  584F      2597          addq.w    #4,A7
                    2598   ; printf("\r\n---     ---------") ;
000019D0  4879 0000 2599          pea       @m68kde~1_62.L
000019D4  3FEC      
000019D6  4E92      2600          jsr       (A2)
000019D8  584F      2601          addq.w    #4,A7
000019DA  600A      2602          bra.s     WatchPointDisplay_7
                    2603   WatchPointDisplay_6:
                    2604   ; }
                    2605   ; else
                    2606   ; printf("\r\nNo WatchPoints Set") ;
000019DC  4879 0000 2607          pea       @m68kde~1_63.L
000019E0  4000      
000019E2  4E92      2608          jsr       (A2)
000019E4  584F      2609          addq.w    #4,A7
                    2610   WatchPointDisplay_7:
                    2611   ; for(i = 0; i < 8; i++)  {
000019E6  4282      2612          clr.l     D2
                    2613   WatchPointDisplay_8:
000019E8  0C82 0000 2614          cmp.l     #8,D2
000019EC  0008      
000019EE  6C00 0038 2615          bge       WatchPointDisplay_10
                    2616   ; if(WatchPointSetOrCleared[i] == 1)
000019F2  2002      2617          move.l    D2,D0
000019F4  E588      2618          lsl.l     #2,D0
000019F6  41F9 0B00 2619          lea       _WatchPointSetOrCleared.L,A0
000019FA  01A2      
000019FC  2030 0800 2620          move.l    0(A0,D0.L),D0
00001A00  0C80 0000 2621          cmp.l     #1,D0
00001A04  0001      
00001A06  661C      2622          bne.s     WatchPointDisplay_11
                    2623   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001A08  2202      2624          move.l    D2,D1
00001A0A  E589      2625          lsl.l     #2,D1
00001A0C  41F9 0B00 2626          lea       _WatchPointAddress.L,A0
00001A10  0182      
00001A12  2F30 1800 2627          move.l    0(A0,D1.L),-(A7)
00001A16  2F02      2628          move.l    D2,-(A7)
00001A18  4879 0000 2629          pea       @m68kde~1_60.L
00001A1C  3FCA      
00001A1E  4E92      2630          jsr       (A2)
00001A20  DEFC 000C 2631          add.w     #12,A7
                    2632   WatchPointDisplay_11:
00001A24  5282      2633          addq.l    #1,D2
00001A26  60C0      2634          bra       WatchPointDisplay_8
                    2635   WatchPointDisplay_10:
                    2636   ; }
                    2637   ; printf("\r\n") ;
00001A28  4879 0000 2638          pea       @m68kde~1_1.L
00001A2C  3A42      
00001A2E  4E92      2639          jsr       (A2)
00001A30  584F      2640          addq.w    #4,A7
00001A32  4CDF 040C 2641          movem.l   (A7)+,D2/D3/A2
00001A36  4E75      2642          rts
                    2643   ; }
                    2644   ; void BreakPointClear(void)
                    2645   ; {
                    2646   _BreakPointClear:
00001A38  4E56 FFFC 2647          link      A6,#-4
00001A3C  48E7 2020 2648          movem.l   D2/A2,-(A7)
00001A40  45F9 0000 2649          lea       _printf.L,A2
00001A44  30F2      
                    2650   ; unsigned int i ;
                    2651   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2652   ; BreakPointDisplay() ;
00001A46  4EB8 18B8 2653          jsr       _BreakPointDisplay
                    2654   ; printf("\r\nEnter Break Point Number: ") ;
00001A4A  4879 0000 2655          pea       @m68kde~1_64.L
00001A4E  4016      
00001A50  4E92      2656          jsr       (A2)
00001A52  584F      2657          addq.w    #4,A7
                    2658   ; i = xtod(_getch()) ;           // get break pointer number
00001A54  2F00      2659          move.l    D0,-(A7)
00001A56  4EB8 0B68 2660          jsr       __getch
00001A5A  2200      2661          move.l    D0,D1
00001A5C  201F      2662          move.l    (A7)+,D0
00001A5E  2F01      2663          move.l    D1,-(A7)
00001A60  4EB8 0BD2 2664          jsr       _xtod
00001A64  584F      2665          addq.w    #4,A7
00001A66  C0BC 0000 2666          and.l     #255,D0
00001A6A  00FF      
00001A6C  2400      2667          move.l    D0,D2
                    2668   ; if((i < 0) || (i > 7))   {
00001A6E  0C82 0000 2669          cmp.l     #0,D2
00001A72  0000      
00001A74  6508      2670          blo.s     BreakPointClear_3
00001A76  0C82 0000 2671          cmp.l     #7,D2
00001A7A  0007      
00001A7C  630E      2672          bls.s     BreakPointClear_1
                    2673   BreakPointClear_3:
                    2674   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A7E  4879 0000 2675          pea       @m68kde~1_65.L
00001A82  4034      
00001A84  4E92      2676          jsr       (A2)
00001A86  584F      2677          addq.w    #4,A7
                    2678   ; return ;
00001A88  6000 0080 2679          bra       BreakPointClear_4
                    2680   BreakPointClear_1:
                    2681   ; }
                    2682   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A8C  2002      2683          move.l    D2,D0
00001A8E  E588      2684          lsl.l     #2,D0
00001A90  41F9 0B00 2685          lea       _BreakPointSetOrCleared.L,A0
00001A94  015E      
00001A96  2030 0800 2686          move.l    0(A0,D0.L),D0
00001A9A  0C80 0000 2687          cmp.l     #1,D0
00001A9E  0001      
00001AA0  6600 005A 2688          bne       BreakPointClear_5
                    2689   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001AA4  2002      2690          move.l    D2,D0
00001AA6  E588      2691          lsl.l     #2,D0
00001AA8  41F9 0B00 2692          lea       _BreakPointAddress.L,A0
00001AAC  012E      
00001AAE  2D70 0800 2693          move.l    0(A0,D0.L),-4(A6)
00001AB2  FFFC      
                    2694   ; BreakPointAddress[i] = 0 ;
00001AB4  2002      2695          move.l    D2,D0
00001AB6  E588      2696          lsl.l     #2,D0
00001AB8  41F9 0B00 2697          lea       _BreakPointAddress.L,A0
00001ABC  012E      
00001ABE  42B0 0800 2698          clr.l     0(A0,D0.L)
                    2699   ; BreakPointSetOrCleared[i] = 0 ;
00001AC2  2002      2700          move.l    D2,D0
00001AC4  E588      2701          lsl.l     #2,D0
00001AC6  41F9 0B00 2702          lea       _BreakPointSetOrCleared.L,A0
00001ACA  015E      
00001ACC  42B0 0800 2703          clr.l     0(A0,D0.L)
                    2704   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001AD0  2002      2705          move.l    D2,D0
00001AD2  E388      2706          lsl.l     #1,D0
00001AD4  41F9 0B00 2707          lea       _BreakPointInstruction.L,A0
00001AD8  014E      
00001ADA  226E FFFC 2708          move.l    -4(A6),A1
00001ADE  32B0 0800 2709          move.w    0(A0,D0.L),(A1)
                    2710   ; BreakPointInstruction[i] = 0 ;
00001AE2  2002      2711          move.l    D2,D0
00001AE4  E388      2712          lsl.l     #1,D0
00001AE6  41F9 0B00 2713          lea       _BreakPointInstruction.L,A0
00001AEA  014E      
00001AEC  4270 0800 2714          clr.w     0(A0,D0.L)
                    2715   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001AF0  4879 0000 2716          pea       @m68kde~1_66.L
00001AF4  4050      
00001AF6  4E92      2717          jsr       (A2)
00001AF8  584F      2718          addq.w    #4,A7
00001AFA  600A      2719          bra.s     BreakPointClear_6
                    2720   BreakPointClear_5:
                    2721   ; }
                    2722   ; else
                    2723   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AFC  4879 0000 2724          pea       @m68kde~1_67.L
00001B00  406E      
00001B02  4E92      2725          jsr       (A2)
00001B04  584F      2726          addq.w    #4,A7
                    2727   BreakPointClear_6:
                    2728   ; BreakPointDisplay() ;
00001B06  4EB8 18B8 2729          jsr       _BreakPointDisplay
                    2730   ; return ;
                    2731   BreakPointClear_4:
00001B0A  4CDF 0404 2732          movem.l   (A7)+,D2/A2
00001B0E  4E5E      2733          unlk      A6
00001B10  4E75      2734          rts
                    2735   ; }
                    2736   ; void WatchPointClear(void)
                    2737   ; {
                    2738   _WatchPointClear:
00001B12  48E7 2020 2739          movem.l   D2/A2,-(A7)
00001B16  45F9 0000 2740          lea       _printf.L,A2
00001B1A  30F2      
                    2741   ; unsigned int i ;
                    2742   ; WatchPointDisplay() ;
00001B1C  4EB8 198C 2743          jsr       _WatchPointDisplay
                    2744   ; printf("\r\nEnter Watch Point Number: ") ;
00001B20  4879 0000 2745          pea       @m68kde~1_68.L
00001B24  408C      
00001B26  4E92      2746          jsr       (A2)
00001B28  584F      2747          addq.w    #4,A7
                    2748   ; i = xtod(_getch()) ;           // get watch pointer number
00001B2A  2F00      2749          move.l    D0,-(A7)
00001B2C  4EB8 0B68 2750          jsr       __getch
00001B30  2200      2751          move.l    D0,D1
00001B32  201F      2752          move.l    (A7)+,D0
00001B34  2F01      2753          move.l    D1,-(A7)
00001B36  4EB8 0BD2 2754          jsr       _xtod
00001B3A  584F      2755          addq.w    #4,A7
00001B3C  C0BC 0000 2756          and.l     #255,D0
00001B40  00FF      
00001B42  2400      2757          move.l    D0,D2
                    2758   ; if((i < 0) || (i > 7))   {
00001B44  0C82 0000 2759          cmp.l     #0,D2
00001B48  0000      
00001B4A  6508      2760          blo.s     WatchPointClear_3
00001B4C  0C82 0000 2761          cmp.l     #7,D2
00001B50  0007      
00001B52  630E      2762          bls.s     WatchPointClear_1
                    2763   WatchPointClear_3:
                    2764   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B54  4879 0000 2765          pea       @m68kde~1_65.L
00001B58  4034      
00001B5A  4E92      2766          jsr       (A2)
00001B5C  584F      2767          addq.w    #4,A7
                    2768   ; return ;
00001B5E  6000 004E 2769          bra       WatchPointClear_4
                    2770   WatchPointClear_1:
                    2771   ; }
                    2772   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B62  2002      2773          move.l    D2,D0
00001B64  E588      2774          lsl.l     #2,D0
00001B66  41F9 0B00 2775          lea       _WatchPointSetOrCleared.L,A0
00001B6A  01A2      
00001B6C  2030 0800 2776          move.l    0(A0,D0.L),D0
00001B70  0C80 0000 2777          cmp.l     #1,D0
00001B74  0001      
00001B76  6628      2778          bne.s     WatchPointClear_5
                    2779   ; WatchPointAddress[i] = 0 ;
00001B78  2002      2780          move.l    D2,D0
00001B7A  E588      2781          lsl.l     #2,D0
00001B7C  41F9 0B00 2782          lea       _WatchPointAddress.L,A0
00001B80  0182      
00001B82  42B0 0800 2783          clr.l     0(A0,D0.L)
                    2784   ; WatchPointSetOrCleared[i] = 0 ;
00001B86  2002      2785          move.l    D2,D0
00001B88  E588      2786          lsl.l     #2,D0
00001B8A  41F9 0B00 2787          lea       _WatchPointSetOrCleared.L,A0
00001B8E  01A2      
00001B90  42B0 0800 2788          clr.l     0(A0,D0.L)
                    2789   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B94  4879 0000 2790          pea       @m68kde~1_69.L
00001B98  40AA      
00001B9A  4E92      2791          jsr       (A2)
00001B9C  584F      2792          addq.w    #4,A7
00001B9E  600A      2793          bra.s     WatchPointClear_6
                    2794   WatchPointClear_5:
                    2795   ; }
                    2796   ; else
                    2797   ; printf("\r\nWatch Point Was not Set.....") ;
00001BA0  4879 0000 2798          pea       @m68kde~1_70.L
00001BA4  40C8      
00001BA6  4E92      2799          jsr       (A2)
00001BA8  584F      2800          addq.w    #4,A7
                    2801   WatchPointClear_6:
                    2802   ; WatchPointDisplay() ;
00001BAA  4EB8 198C 2803          jsr       _WatchPointDisplay
                    2804   ; return ;
                    2805   WatchPointClear_4:
00001BAE  4CDF 0404 2806          movem.l   (A7)+,D2/A2
00001BB2  4E75      2807          rts
                    2808   ; }
                    2809   ; void DisableBreakPoints(void)
                    2810   ; {
                    2811   _DisableBreakPoints:
00001BB4  4E56 FFFC 2812          link      A6,#-4
00001BB8  2F02      2813          move.l    D2,-(A7)
                    2814   ; int i ;
                    2815   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2816   ; for(i = 0; i < 8; i++)  {
00001BBA  4282      2817          clr.l     D2
                    2818   DisableBreakPoints_1:
00001BBC  0C82 0000 2819          cmp.l     #8,D2
00001BC0  0008      
00001BC2  6C00 003E 2820          bge       DisableBreakPoints_3
                    2821   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001BC6  2002      2822          move.l    D2,D0
00001BC8  E588      2823          lsl.l     #2,D0
00001BCA  41F9 0B00 2824          lea       _BreakPointSetOrCleared.L,A0
00001BCE  015E      
00001BD0  2030 0800 2825          move.l    0(A0,D0.L),D0
00001BD4  0C80 0000 2826          cmp.l     #1,D0
00001BD8  0001      
00001BDA  6622      2827          bne.s     DisableBreakPoints_4
                    2828   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BDC  2002      2829          move.l    D2,D0
00001BDE  E588      2830          lsl.l     #2,D0
00001BE0  41F9 0B00 2831          lea       _BreakPointAddress.L,A0
00001BE4  012E      
00001BE6  2D70 0800 2832          move.l    0(A0,D0.L),-4(A6)
00001BEA  FFFC      
                    2833   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BEC  2002      2834          move.l    D2,D0
00001BEE  E388      2835          lsl.l     #1,D0
00001BF0  41F9 0B00 2836          lea       _BreakPointInstruction.L,A0
00001BF4  014E      
00001BF6  226E FFFC 2837          move.l    -4(A6),A1
00001BFA  32B0 0800 2838          move.w    0(A0,D0.L),(A1)
                    2839   DisableBreakPoints_4:
00001BFE  5282      2840          addq.l    #1,D2
00001C00  60BA      2841          bra       DisableBreakPoints_1
                    2842   DisableBreakPoints_3:
00001C02  241F      2843          move.l    (A7)+,D2
00001C04  4E5E      2844          unlk      A6
00001C06  4E75      2845          rts
                    2846   ; }
                    2847   ; }
                    2848   ; }
                    2849   ; void EnableBreakPoints(void)
                    2850   ; {
                    2851   _EnableBreakPoints:
00001C08  4E56 FFFC 2852          link      A6,#-4
00001C0C  2F02      2853          move.l    D2,-(A7)
                    2854   ; int i ;
                    2855   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2856   ; for(i = 0; i < 8; i++)  {
00001C0E  4282      2857          clr.l     D2
                    2858   EnableBreakPoints_1:
00001C10  0C82 0000 2859          cmp.l     #8,D2
00001C14  0008      
00001C16  6C32      2860          bge.s     EnableBreakPoints_3
                    2861   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001C18  2002      2862          move.l    D2,D0
00001C1A  E588      2863          lsl.l     #2,D0
00001C1C  41F9 0B00 2864          lea       _BreakPointSetOrCleared.L,A0
00001C20  015E      
00001C22  2030 0800 2865          move.l    0(A0,D0.L),D0
00001C26  0C80 0000 2866          cmp.l     #1,D0
00001C2A  0001      
00001C2C  6618      2867          bne.s     EnableBreakPoints_4
                    2868   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2869          move.l    D2,D0
00001C30  E588      2870          lsl.l     #2,D0
00001C32  41F9 0B00 2871          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2872          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2873   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C3E  206E FFFC 2874          move.l    -4(A6),A0
00001C42  30BC 4E4E 2875          move.w    #20046,(A0)
                    2876   EnableBreakPoints_4:
00001C46  5282      2877          addq.l    #1,D2
00001C48  60C6      2878          bra       EnableBreakPoints_1
                    2879   EnableBreakPoints_3:
00001C4A  241F      2880          move.l    (A7)+,D2
00001C4C  4E5E      2881          unlk      A6
00001C4E  4E75      2882          rts
                    2883   ; }
                    2884   ; }
                    2885   ; }
                    2886   ; void KillAllBreakPoints(void)
                    2887   ; {
                    2888   _KillAllBreakPoints:
00001C50  4E56 FFFC 2889          link      A6,#-4
00001C54  2F02      2890          move.l    D2,-(A7)
                    2891   ; int i ;
                    2892   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2893   ; for(i = 0; i < 8; i++)  {
00001C56  4282      2894          clr.l     D2
                    2895   KillAllBreakPoints_1:
00001C58  0C82 0000 2896          cmp.l     #8,D2
00001C5C  0008      
00001C5E  6C00 0052 2897          bge       KillAllBreakPoints_3
                    2898   ; // clear BP
                    2899   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C62  2002      2900          move.l    D2,D0
00001C64  E588      2901          lsl.l     #2,D0
00001C66  41F9 0B00 2902          lea       _BreakPointAddress.L,A0
00001C6A  012E      
00001C6C  2D70 0800 2903          move.l    0(A0,D0.L),-4(A6)
00001C70  FFFC      
                    2904   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C72  2002      2905          move.l    D2,D0
00001C74  E388      2906          lsl.l     #1,D0
00001C76  41F9 0B00 2907          lea       _BreakPointInstruction.L,A0
00001C7A  014E      
00001C7C  226E FFFC 2908          move.l    -4(A6),A1
00001C80  32B0 0800 2909          move.w    0(A0,D0.L),(A1)
                    2910   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C84  2002      2911          move.l    D2,D0
00001C86  E588      2912          lsl.l     #2,D0
00001C88  41F9 0B00 2913          lea       _BreakPointAddress.L,A0
00001C8C  012E      
00001C8E  42B0 0800 2914          clr.l     0(A0,D0.L)
                    2915   ; BreakPointInstruction[i] = 0 ;
00001C92  2002      2916          move.l    D2,D0
00001C94  E388      2917          lsl.l     #1,D0
00001C96  41F9 0B00 2918          lea       _BreakPointInstruction.L,A0
00001C9A  014E      
00001C9C  4270 0800 2919          clr.w     0(A0,D0.L)
                    2920   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001CA0  2002      2921          move.l    D2,D0
00001CA2  E588      2922          lsl.l     #2,D0
00001CA4  41F9 0B00 2923          lea       _BreakPointSetOrCleared.L,A0
00001CA8  015E      
00001CAA  42B0 0800 2924          clr.l     0(A0,D0.L)
00001CAE  5282      2925          addq.l    #1,D2
00001CB0  60A6      2926          bra       KillAllBreakPoints_1
                    2927   KillAllBreakPoints_3:
00001CB2  241F      2928          move.l    (A7)+,D2
00001CB4  4E5E      2929          unlk      A6
00001CB6  4E75      2930          rts
                    2931   ; }
                    2932   ; //BreakPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void KillAllWatchPoints(void)
                    2935   ; {
                    2936   _KillAllWatchPoints:
00001CB8  2F02      2937          move.l    D2,-(A7)
                    2938   ; int i ;
                    2939   ; for(i = 0; i < 8; i++)  {
00001CBA  4282      2940          clr.l     D2
                    2941   KillAllWatchPoints_1:
00001CBC  0C82 0000 2942          cmp.l     #8,D2
00001CC0  0008      
00001CC2  6C20      2943          bge.s     KillAllWatchPoints_3
                    2944   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001CC4  2002      2945          move.l    D2,D0
00001CC6  E588      2946          lsl.l     #2,D0
00001CC8  41F9 0B00 2947          lea       _WatchPointAddress.L,A0
00001CCC  0182      
00001CCE  42B0 0800 2948          clr.l     0(A0,D0.L)
                    2949   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001CD2  2002      2950          move.l    D2,D0
00001CD4  E588      2951          lsl.l     #2,D0
00001CD6  41F9 0B00 2952          lea       _WatchPointSetOrCleared.L,A0
00001CDA  01A2      
00001CDC  42B0 0800 2953          clr.l     0(A0,D0.L)
00001CE0  5282      2954          addq.l    #1,D2
00001CE2  60D8      2955          bra       KillAllWatchPoints_1
                    2956   KillAllWatchPoints_3:
00001CE4  241F      2957          move.l    (A7)+,D2
00001CE6  4E75      2958          rts
                    2959   ; }
                    2960   ; //WatchPointDisplay() ;       // display the break points
                    2961   ; }
                    2962   ; void SetBreakPoint(void)
                    2963   ; {
                    2964   _SetBreakPoint:
00001CE8  4E56 FFFC 2965          link      A6,#-4
00001CEC  48E7 3830 2966          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CF0  45F9 0000 2967          lea       _printf.L,A2
00001CF4  30F2      
00001CF6  47F9 0B00 2968          lea       _BreakPointSetOrCleared.L,A3
00001CFA  015E      
                    2969   ; int i ;
                    2970   ; int BPNumber;
                    2971   ; int BPAddress;
                    2972   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2973   ; // see if any free break points
                    2974   ; for(i = 0; i < 8; i ++) {
00001CFC  4282      2975          clr.l     D2
                    2976   SetBreakPoint_1:
00001CFE  0C82 0000 2977          cmp.l     #8,D2
00001D02  0008      
00001D04  6C10      2978          bge.s     SetBreakPoint_3
                    2979   ; if( BreakPointSetOrCleared[i] == 0)
00001D06  2002      2980          move.l    D2,D0
00001D08  E588      2981          lsl.l     #2,D0
00001D0A  2033 0800 2982          move.l    0(A3,D0.L),D0
00001D0E  6602      2983          bne.s     SetBreakPoint_4
                    2984   ; break ;         // if spare BP found allow user to set it
00001D10  6004      2985          bra.s     SetBreakPoint_3
                    2986   SetBreakPoint_4:
00001D12  5282      2987          addq.l    #1,D2
00001D14  60E8      2988          bra       SetBreakPoint_1
                    2989   SetBreakPoint_3:
                    2990   ; }
                    2991   ; if(i == 8) {
00001D16  0C82 0000 2992          cmp.l     #8,D2
00001D1A  0008      
00001D1C  660E      2993          bne.s     SetBreakPoint_6
                    2994   ; printf("\r\nNo FREE Break Points.....") ;
00001D1E  4879 0000 2995          pea       @m68kde~1_71.L
00001D22  40E8      
00001D24  4E92      2996          jsr       (A2)
00001D26  584F      2997          addq.w    #4,A7
                    2998   ; return ;
00001D28  6000 00D6 2999          bra       SetBreakPoint_15
                    3000   SetBreakPoint_6:
                    3001   ; }
                    3002   ; printf("\r\nBreak Point Address: ") ;
00001D2C  4879 0000 3003          pea       @m68kde~1_72.L
00001D30  4104      
00001D32  4E92      3004          jsr       (A2)
00001D34  584F      3005          addq.w    #4,A7
                    3006   ; BPAddress = Get8HexDigits(0) ;
00001D36  42A7      3007          clr.l     -(A7)
00001D38  4EB8 0CD8 3008          jsr       _Get8HexDigits
00001D3C  584F      3009          addq.w    #4,A7
00001D3E  2600      3010          move.l    D0,D3
                    3011   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D40  2803      3012          move.l    D3,D4
                    3013   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D42  2003      3014          move.l    D3,D0
00001D44  C0BC 0000 3015          and.l     #1,D0
00001D48  0001      
00001D4A  0C80 0000 3016          cmp.l     #1,D0
00001D4E  0001      
00001D50  660E      3017          bne.s     SetBreakPoint_9
                    3018   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D52  4879 0000 3019          pea       @m68kde~1_73.L
00001D56  411C      
00001D58  4E92      3020          jsr       (A2)
00001D5A  584F      3021          addq.w    #4,A7
                    3022   ; return ;
00001D5C  6000 00A2 3023          bra       SetBreakPoint_15
                    3024   SetBreakPoint_9:
                    3025   ; }
                    3026   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D60  0C83 0000 3027          cmp.l     #32768,D3
00001D64  8000      
00001D66  640E      3028          bhs.s     SetBreakPoint_11
                    3029   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D68  4879 0000 3030          pea       @m68kde~1_74.L
00001D6C  4152      
00001D6E  4E92      3031          jsr       (A2)
00001D70  584F      3032          addq.w    #4,A7
                    3033   ; return ;
00001D72  6000 008C 3034          bra       SetBreakPoint_15
                    3035   SetBreakPoint_11:
                    3036   ; }
                    3037   ; // search for first free bp or existing same BP
                    3038   ; for(i = 0; i < 8; i++)  {
00001D76  4282      3039          clr.l     D2
                    3040   SetBreakPoint_13:
00001D78  0C82 0000 3041          cmp.l     #8,D2
00001D7C  0008      
00001D7E  6C00 0080 3042          bge       SetBreakPoint_15
                    3043   ; if(BreakPointAddress[i] == BPAddress)   {
00001D82  2002      3044          move.l    D2,D0
00001D84  E588      3045          lsl.l     #2,D0
00001D86  41F9 0B00 3046          lea       _BreakPointAddress.L,A0
00001D8A  012E      
00001D8C  B6B0 0800 3047          cmp.l     0(A0,D0.L),D3
00001D90  6610      3048          bne.s     SetBreakPoint_16
                    3049   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D92  2F03      3050          move.l    D3,-(A7)
00001D94  4879 0000 3051          pea       @m68kde~1_75.L
00001D98  419A      
00001D9A  4E92      3052          jsr       (A2)
00001D9C  504F      3053          addq.w    #8,A7
                    3054   ; return ;
00001D9E  6000 0060 3055          bra       SetBreakPoint_15
                    3056   SetBreakPoint_16:
                    3057   ; }
                    3058   ; if(BreakPointSetOrCleared[i] == 0) {
00001DA2  2002      3059          move.l    D2,D0
00001DA4  E588      3060          lsl.l     #2,D0
00001DA6  2033 0800 3061          move.l    0(A3,D0.L),D0
00001DAA  6600 004E 3062          bne       SetBreakPoint_18
                    3063   ; // set BP here
                    3064   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001DAE  2002      3065          move.l    D2,D0
00001DB0  E588      3066          lsl.l     #2,D0
00001DB2  27BC 0000 3067          move.l    #1,0(A3,D0.L)
00001DB6  0001 0800 
                    3068   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001DBA  2044      3069          move.l    D4,A0
00001DBC  2002      3070          move.l    D2,D0
00001DBE  E388      3071          lsl.l     #1,D0
00001DC0  43F9 0B00 3072          lea       _BreakPointInstruction.L,A1
00001DC4  014E      
00001DC6  3390 0800 3073          move.w    (A0),0(A1,D0.L)
                    3074   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001DCA  2F04      3075          move.l    D4,-(A7)
00001DCC  4879 0000 3076          pea       @m68kde~1_76.L
00001DD0  41D2      
00001DD2  4E92      3077          jsr       (A2)
00001DD4  504F      3078          addq.w    #8,A7
                    3079   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DD6  2044      3080          move.l    D4,A0
00001DD8  30BC 4E4E 3081          move.w    #20046,(A0)
                    3082   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DDC  2002      3083          move.l    D2,D0
00001DDE  E588      3084          lsl.l     #2,D0
00001DE0  41F9 0B00 3085          lea       _BreakPointAddress.L,A0
00001DE4  012E      
00001DE6  2183 0800 3086          move.l    D3,0(A0,D0.L)
                    3087   ; printf("\r\n") ;
00001DEA  4879 0000 3088          pea       @m68kde~1_1.L
00001DEE  3A42      
00001DF0  4E92      3089          jsr       (A2)
00001DF2  584F      3090          addq.w    #4,A7
                    3091   ; BreakPointDisplay() ;       // display the break points
00001DF4  4EB8 18B8 3092          jsr       _BreakPointDisplay
                    3093   ; return ;
00001DF8  6006      3094          bra.s     SetBreakPoint_15
                    3095   SetBreakPoint_18:
00001DFA  5282      3096          addq.l    #1,D2
00001DFC  6000 FF7A 3097          bra       SetBreakPoint_13
                    3098   SetBreakPoint_15:
00001E00  4CDF 0C1C 3099          movem.l   (A7)+,D2/D3/D4/A2/A3
00001E04  4E5E      3100          unlk      A6
00001E06  4E75      3101          rts
                    3102   ; }
                    3103   ; }
                    3104   ; }
                    3105   ; void SetWatchPoint(void)
                    3106   ; {
                    3107   _SetWatchPoint:
00001E08  4E56 FFF8 3108          link      A6,#-8
00001E0C  48E7 3030 3109          movem.l   D2/D3/A2/A3,-(A7)
00001E10  45F9 0000 3110          lea       _printf.L,A2
00001E14  30F2      
00001E16  47F9 0B00 3111          lea       _WatchPointSetOrCleared.L,A3
00001E1A  01A2      
                    3112   ; int i ;
                    3113   ; int WPNumber;
                    3114   ; int WPAddress;
                    3115   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3116   ; // see if any free break points
                    3117   ; for(i = 0; i < 8; i ++) {
00001E1C  4282      3118          clr.l     D2
                    3119   SetWatchPoint_1:
00001E1E  0C82 0000 3120          cmp.l     #8,D2
00001E22  0008      
00001E24  6C10      3121          bge.s     SetWatchPoint_3
                    3122   ; if( WatchPointSetOrCleared[i] == 0)
00001E26  2002      3123          move.l    D2,D0
00001E28  E588      3124          lsl.l     #2,D0
00001E2A  2033 0800 3125          move.l    0(A3,D0.L),D0
00001E2E  6602      3126          bne.s     SetWatchPoint_4
                    3127   ; break ;         // if spare WP found allow user to set it
00001E30  6004      3128          bra.s     SetWatchPoint_3
                    3129   SetWatchPoint_4:
00001E32  5282      3130          addq.l    #1,D2
00001E34  60E8      3131          bra       SetWatchPoint_1
                    3132   SetWatchPoint_3:
                    3133   ; }
                    3134   ; if(i == 8) {
00001E36  0C82 0000 3135          cmp.l     #8,D2
00001E3A  0008      
00001E3C  660E      3136          bne.s     SetWatchPoint_6
                    3137   ; printf("\r\nNo FREE Watch Points.....") ;
00001E3E  4879 0000 3138          pea       @m68kde~1_77.L
00001E42  41F8      
00001E44  4E92      3139          jsr       (A2)
00001E46  584F      3140          addq.w    #4,A7
                    3141   ; return ;
00001E48  6000 008C 3142          bra       SetWatchPoint_11
                    3143   SetWatchPoint_6:
                    3144   ; }
                    3145   ; printf("\r\nWatch Point Address: ") ;
00001E4C  4879 0000 3146          pea       @m68kde~1_78.L
00001E50  4214      
00001E52  4E92      3147          jsr       (A2)
00001E54  584F      3148          addq.w    #4,A7
                    3149   ; WPAddress = Get8HexDigits(0) ;
00001E56  42A7      3150          clr.l     -(A7)
00001E58  4EB8 0CD8 3151          jsr       _Get8HexDigits
00001E5C  584F      3152          addq.w    #4,A7
00001E5E  2600      3153          move.l    D0,D3
                    3154   ; // search for first free wp or existing same wp
                    3155   ; for(i = 0; i < 8; i++)  {
00001E60  4282      3156          clr.l     D2
                    3157   SetWatchPoint_9:
00001E62  0C82 0000 3158          cmp.l     #8,D2
00001E66  0008      
00001E68  6C00 006C 3159          bge       SetWatchPoint_11
                    3160   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E6C  2002      3161          move.l    D2,D0
00001E6E  E588      3162          lsl.l     #2,D0
00001E70  41F9 0B00 3163          lea       _WatchPointAddress.L,A0
00001E74  0182      
00001E76  B6B0 0800 3164          cmp.l     0(A0,D0.L),D3
00001E7A  6614      3165          bne.s     SetWatchPoint_12
00001E7C  4A83      3166          tst.l     D3
00001E7E  6710      3167          beq.s     SetWatchPoint_12
                    3168   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E80  2F03      3169          move.l    D3,-(A7)
00001E82  4879 0000 3170          pea       @m68kde~1_79.L
00001E86  422C      
00001E88  4E92      3171          jsr       (A2)
00001E8A  504F      3172          addq.w    #8,A7
                    3173   ; return ;
00001E8C  6000 0048 3174          bra       SetWatchPoint_11
                    3175   SetWatchPoint_12:
                    3176   ; }
                    3177   ; if(WatchPointSetOrCleared[i] == 0) {
00001E90  2002      3178          move.l    D2,D0
00001E92  E588      3179          lsl.l     #2,D0
00001E94  2033 0800 3180          move.l    0(A3,D0.L),D0
00001E98  6600 0038 3181          bne       SetWatchPoint_14
                    3182   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E9C  2002      3183          move.l    D2,D0
00001E9E  E588      3184          lsl.l     #2,D0
00001EA0  27BC 0000 3185          move.l    #1,0(A3,D0.L)
00001EA4  0001 0800 
                    3186   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001EA8  2F03      3187          move.l    D3,-(A7)
00001EAA  4879 0000 3188          pea       @m68kde~1_80.L
00001EAE  4262      
00001EB0  4E92      3189          jsr       (A2)
00001EB2  504F      3190          addq.w    #8,A7
                    3191   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001EB4  2002      3192          move.l    D2,D0
00001EB6  E588      3193          lsl.l     #2,D0
00001EB8  41F9 0B00 3194          lea       _WatchPointAddress.L,A0
00001EBC  0182      
00001EBE  2183 0800 3195          move.l    D3,0(A0,D0.L)
                    3196   ; printf("\r\n") ;
00001EC2  4879 0000 3197          pea       @m68kde~1_1.L
00001EC6  3A42      
00001EC8  4E92      3198          jsr       (A2)
00001ECA  584F      3199          addq.w    #4,A7
                    3200   ; WatchPointDisplay() ;       // display the break points
00001ECC  4EB8 198C 3201          jsr       _WatchPointDisplay
                    3202   ; return ;
00001ED0  6004      3203          bra.s     SetWatchPoint_11
                    3204   SetWatchPoint_14:
00001ED2  5282      3205          addq.l    #1,D2
00001ED4  608C      3206          bra       SetWatchPoint_9
                    3207   SetWatchPoint_11:
00001ED6  4CDF 0C0C 3208          movem.l   (A7)+,D2/D3/A2/A3
00001EDA  4E5E      3209          unlk      A6
00001EDC  4E75      3210          rts
                    3211   ; }
                    3212   ; }
                    3213   ; }
                    3214   ; void HandleBreakPoint(void)
                    3215   ; {
                    3216   _HandleBreakPoint:
00001EDE  4E56 FFFC 3217          link      A6,#-4
00001EE2  48E7 0038 3218          movem.l   A2/A3/A4,-(A7)
00001EE6  45F9 0B00 3219          lea       _i.L,A2
00001EEA  00C4      
00001EEC  47F9 0000 3220          lea       _printf.L,A3
00001EF0  30F2      
00001EF2  49F9 0B00 3221          lea       _PC.L,A4
00001EF6  0120      
                    3222   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3223   ; // now we have to put the break point back to run the instruction
                    3224   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3225   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EF8  5594      3226          subq.l    #2,(A4)
                    3227   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EFA  4879 0000 3228          pea       @m68kde~1_81.L
00001EFE  4288      
00001F00  4E93      3229          jsr       (A3)
00001F02  584F      3230          addq.w    #4,A7
                    3231   ; printf("\r\nSingle Step : [ON]") ;
00001F04  4879 0000 3232          pea       @m68kde~1_82.L
00001F08  429C      
00001F0A  4E93      3233          jsr       (A3)
00001F0C  584F      3234          addq.w    #4,A7
                    3235   ; printf("\r\nBreakPoints : [Enabled]") ;
00001F0E  4879 0000 3236          pea       @m68kde~1_83.L
00001F12  42B2      
00001F14  4E93      3237          jsr       (A3)
00001F16  584F      3238          addq.w    #4,A7
                    3239   ; // now clear the break point (put original instruction back)
                    3240   ; ProgramBreakPointAddress = PC ;
00001F18  2D54 FFFC 3241          move.l    (A4),-4(A6)
                    3242   ; for(i = 0; i < 8; i ++) {
00001F1C  4292      3243          clr.l     (A2)
                    3244   HandleBreakPoint_1:
00001F1E  2012      3245          move.l    (A2),D0
00001F20  0C80 0000 3246          cmp.l     #8,D0
00001F24  0008      
00001F26  6400 0056 3247          bhs       HandleBreakPoint_3
                    3248   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001F2A  2012      3249          move.l    (A2),D0
00001F2C  E588      3250          lsl.l     #2,D0
00001F2E  41F9 0B00 3251          lea       _BreakPointAddress.L,A0
00001F32  012E      
00001F34  2230 0800 3252          move.l    0(A0,D0.L),D1
00001F38  B294      3253          cmp.l     (A4),D1
00001F3A  6600 003E 3254          bne       HandleBreakPoint_4
                    3255   ; BreakPointAddress[i] = 0 ;
00001F3E  2012      3256          move.l    (A2),D0
00001F40  E588      3257          lsl.l     #2,D0
00001F42  41F9 0B00 3258          lea       _BreakPointAddress.L,A0
00001F46  012E      
00001F48  42B0 0800 3259          clr.l     0(A0,D0.L)
                    3260   ; BreakPointSetOrCleared[i] = 0 ;
00001F4C  2012      3261          move.l    (A2),D0
00001F4E  E588      3262          lsl.l     #2,D0
00001F50  41F9 0B00 3263          lea       _BreakPointSetOrCleared.L,A0
00001F54  015E      
00001F56  42B0 0800 3264          clr.l     0(A0,D0.L)
                    3265   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F5A  2012      3266          move.l    (A2),D0
00001F5C  E388      3267          lsl.l     #1,D0
00001F5E  41F9 0B00 3268          lea       _BreakPointInstruction.L,A0
00001F62  014E      
00001F64  226E FFFC 3269          move.l    -4(A6),A1
00001F68  32B0 0800 3270          move.w    0(A0,D0.L),(A1)
                    3271   ; BreakPointInstruction[i] = 0 ;
00001F6C  2012      3272          move.l    (A2),D0
00001F6E  E388      3273          lsl.l     #1,D0
00001F70  41F9 0B00 3274          lea       _BreakPointInstruction.L,A0
00001F74  014E      
00001F76  4270 0800 3275          clr.w     0(A0,D0.L)
                    3276   HandleBreakPoint_4:
00001F7A  5292      3277          addq.l    #1,(A2)
00001F7C  60A0      3278          bra       HandleBreakPoint_1
                    3279   HandleBreakPoint_3:
                    3280   ; }
                    3281   ; }
                    3282   ; DumpRegisters() ;
00001F7E  4EB8 110A 3283          jsr       _DumpRegisters
                    3284   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F82  4879 0000 3285          pea       @m68kde~1_45.L
00001F86  3E2E      
00001F88  4E93      3286          jsr       (A3)
00001F8A  584F      3287          addq.w    #4,A7
                    3288   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F8C  4879 0000 3289          pea       @m68kde~1_84.L
00001F90  42CC      
00001F92  4E93      3290          jsr       (A3)
00001F94  584F      3291          addq.w    #4,A7
                    3292   ; menu() ;
00001F96  4EB9 0000 3293          jsr       _menu
00001F9A  21A2      
00001F9C  4CDF 1C00 3294          movem.l   (A7)+,A2/A3/A4
00001FA0  4E5E      3295          unlk      A6
00001FA2  4E75      3296          rts
                    3297   ; }
                    3298   ; void UnknownCommand()
                    3299   ; {
                    3300   _UnknownCommand:
                    3301   ; printf("\r\nUnknown Command.....\r\n") ;
00001FA4  4879 0000 3302          pea       @m68kde~1_85.L
00001FA8  42F4      
00001FAA  4EB9 0000 3303          jsr       _printf
00001FAE  30F2      
00001FB0  584F      3304          addq.w    #4,A7
                    3305   ; Help() ;
00001FB2  4EB9 0000 3306          jsr       _Help
00001FB6  20C8      
00001FB8  4E75      3307          rts
                    3308   ; }
                    3309   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3310   ; void CallDebugMonitor(void)
                    3311   ; {
                    3312   _CallDebugMonitor:
                    3313   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001FBA  4879 0000 3314          pea       @m68kde~1_86.L
00001FBE  430E      
00001FC0  4EB9 0000 3315          jsr       _printf
00001FC4  30F2      
00001FC6  584F      3316          addq.w    #4,A7
                    3317   ; menu();
00001FC8  4EB9 0000 3318          jsr       _menu
00001FCC  21A2      
00001FCE  4E75      3319          rts
                    3320   ; }
                    3321   ; void Breakpoint(void)
                    3322   ; {
                    3323   _Breakpoint:
00001FD0  2F02      3324          move.l    D2,-(A7)
                    3325   ; char c;
                    3326   ; c = toupper(_getch());
00001FD2  2F00      3327          move.l    D0,-(A7)
00001FD4  4EB8 0B68 3328          jsr       __getch
00001FD8  2200      3329          move.l    D0,D1
00001FDA  201F      3330          move.l    (A7)+,D0
00001FDC  2F01      3331          move.l    D1,-(A7)
00001FDE  4EB9 0000 3332          jsr       _toupper
00001FE2  30C6      
00001FE4  584F      3333          addq.w    #4,A7
00001FE6  1400      3334          move.b    D0,D2
                    3335   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FE8  0C02 0044 3336          cmp.b     #68,D2
00001FEC  6608      3337          bne.s     Breakpoint_1
                    3338   ; BreakPointDisplay() ;
00001FEE  4EB8 18B8 3339          jsr       _BreakPointDisplay
00001FF2  6000 0054 3340          bra       Breakpoint_10
                    3341   Breakpoint_1:
                    3342   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FF6  0C02 004B 3343          cmp.b     #75,D2
00001FFA  6630      3344          bne.s     Breakpoint_3
                    3345   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FFC  4879 0000 3346          pea       @m68kde~1_87.L
00002000  432E      
00002002  4EB9 0000 3347          jsr       _printf
00002006  30F2      
00002008  584F      3348          addq.w    #4,A7
                    3349   ; c = toupper(_getch());
0000200A  2F00      3350          move.l    D0,-(A7)
0000200C  4EB8 0B68 3351          jsr       __getch
00002010  2200      3352          move.l    D0,D1
00002012  201F      3353          move.l    (A7)+,D0
00002014  2F01      3354          move.l    D1,-(A7)
00002016  4EB9 0000 3355          jsr       _toupper
0000201A  30C6      
0000201C  584F      3356          addq.w    #4,A7
0000201E  1400      3357          move.b    D0,D2
                    3358   ; if(c == (char)('Y'))
00002020  0C02 0059 3359          cmp.b     #89,D2
00002024  6604      3360          bne.s     Breakpoint_5
                    3361   ; KillAllBreakPoints() ;
00002026  4EB8 1C50 3362          jsr       _KillAllBreakPoints
                    3363   Breakpoint_5:
0000202A  601C      3364          bra.s     Breakpoint_10
                    3365   Breakpoint_3:
                    3366   ; }
                    3367   ; else if(c == (char)('S')) {
0000202C  0C02 0053 3368          cmp.b     #83,D2
00002030  6606      3369          bne.s     Breakpoint_7
                    3370   ; SetBreakPoint() ;
00002032  4EB8 1CE8 3371          jsr       _SetBreakPoint
00002036  6010      3372          bra.s     Breakpoint_10
                    3373   Breakpoint_7:
                    3374   ; }
                    3375   ; else if(c == (char)('C')) {
00002038  0C02 0043 3376          cmp.b     #67,D2
0000203C  6606      3377          bne.s     Breakpoint_9
                    3378   ; BreakPointClear() ;
0000203E  4EB8 1A38 3379          jsr       _BreakPointClear
00002042  6004      3380          bra.s     Breakpoint_10
                    3381   Breakpoint_9:
                    3382   ; }
                    3383   ; else
                    3384   ; UnknownCommand() ;
00002044  4EB8 1FA4 3385          jsr       _UnknownCommand
                    3386   Breakpoint_10:
00002048  241F      3387          move.l    (A7)+,D2
0000204A  4E75      3388          rts
                    3389   ; }
                    3390   ; void Watchpoint(void)
                    3391   ; {
                    3392   _Watchpoint:
0000204C  2F02      3393          move.l    D2,-(A7)
                    3394   ; char c;
                    3395   ; c = toupper(_getch());
0000204E  2F00      3396          move.l    D0,-(A7)
00002050  4EB8 0B68 3397          jsr       __getch
00002054  2200      3398          move.l    D0,D1
00002056  201F      3399          move.l    (A7)+,D0
00002058  2F01      3400          move.l    D1,-(A7)
0000205A  4EB9 0000 3401          jsr       _toupper
0000205E  30C6      
00002060  584F      3402          addq.w    #4,A7
00002062  1400      3403          move.b    D0,D2
                    3404   ; if( c == (char)('D'))                                      // WatchPoint Display
00002064  0C02 0044 3405          cmp.b     #68,D2
00002068  6608      3406          bne.s     Watchpoint_1
                    3407   ; WatchPointDisplay() ;
0000206A  4EB8 198C 3408          jsr       _WatchPointDisplay
0000206E  6000 0054 3409          bra       Watchpoint_10
                    3410   Watchpoint_1:
                    3411   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002072  0C02 004B 3412          cmp.b     #75,D2
00002076  6630      3413          bne.s     Watchpoint_3
                    3414   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002078  4879 0000 3415          pea       @m68kde~1_88.L
0000207C  4350      
0000207E  4EB9 0000 3416          jsr       _printf
00002082  30F2      
00002084  584F      3417          addq.w    #4,A7
                    3418   ; c = toupper(_getch());
00002086  2F00      3419          move.l    D0,-(A7)
00002088  4EB8 0B68 3420          jsr       __getch
0000208C  2200      3421          move.l    D0,D1
0000208E  201F      3422          move.l    (A7)+,D0
00002090  2F01      3423          move.l    D1,-(A7)
00002092  4EB9 0000 3424          jsr       _toupper
00002096  30C6      
00002098  584F      3425          addq.w    #4,A7
0000209A  1400      3426          move.b    D0,D2
                    3427   ; if(c == (char)('Y'))
0000209C  0C02 0059 3428          cmp.b     #89,D2
000020A0  6604      3429          bne.s     Watchpoint_5
                    3430   ; KillAllWatchPoints() ;
000020A2  4EB8 1CB8 3431          jsr       _KillAllWatchPoints
                    3432   Watchpoint_5:
000020A6  601C      3433          bra.s     Watchpoint_10
                    3434   Watchpoint_3:
                    3435   ; }
                    3436   ; else if(c == (char)('S')) {
000020A8  0C02 0053 3437          cmp.b     #83,D2
000020AC  6606      3438          bne.s     Watchpoint_7
                    3439   ; SetWatchPoint() ;
000020AE  4EB8 1E08 3440          jsr       _SetWatchPoint
000020B2  6010      3441          bra.s     Watchpoint_10
                    3442   Watchpoint_7:
                    3443   ; }
                    3444   ; else if(c == (char)('C')) {
000020B4  0C02 0043 3445          cmp.b     #67,D2
000020B8  6606      3446          bne.s     Watchpoint_9
                    3447   ; WatchPointClear() ;
000020BA  4EB8 1B12 3448          jsr       _WatchPointClear
000020BE  6004      3449          bra.s     Watchpoint_10
                    3450   Watchpoint_9:
                    3451   ; }
                    3452   ; else
                    3453   ; UnknownCommand() ;
000020C0  4EB8 1FA4 3454          jsr       _UnknownCommand
                    3455   Watchpoint_10:
000020C4  241F      3456          move.l    (A7)+,D2
000020C6  4E75      3457          rts
                    3458   ; }
                    3459   ; void Help(void)
                    3460   ; {
                    3461   _Help:
000020C8  48E7 2020 3462          movem.l   D2/A2,-(A7)
000020CC  45F9 0000 3463          lea       _printf.L,A2
000020D0  30F2      
                    3464   ; char *banner = "\r\n----------------------------------------------------------------" ;
000020D2  41F9 0000 3465          lea       @m68kde~1_89.L,A0
000020D6  4372      
000020D8  2408      3466          move.l    A0,D2
                    3467   ; printf(banner) ;
000020DA  2F02      3468          move.l    D2,-(A7)
000020DC  4E92      3469          jsr       (A2)
000020DE  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  Debugger Command Summary") ;
000020E0  4879 0000 3472          pea       @m68kde~1_90.L
000020E4  43B6      
000020E6  4E92      3473          jsr       (A2)
000020E8  584F      3474          addq.w    #4,A7
                    3475   ; printf(banner) ;
000020EA  2F02      3476          move.l    D2,-(A7)
000020EC  4E92      3477          jsr       (A2)
000020EE  584F      3478          addq.w    #4,A7
                    3479   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020F0  4879 0000 3480          pea       @m68kde~1_91.L
000020F4  43D4      
000020F6  4E92      3481          jsr       (A2)
000020F8  584F      3482          addq.w    #4,A7
                    3483   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020FA  4879 0000 3484          pea       @m68kde~1_92.L
000020FE  4418      
00002100  4E92      3485          jsr       (A2)
00002102  584F      3486          addq.w    #4,A7
                    3487   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002104  4879 0000 3488          pea       @m68kde~1_93.L
00002108  4450      
0000210A  4E92      3489          jsr       (A2)
0000210C  584F      3490          addq.w    #4,A7
                    3491   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
0000210E  4879 0000 3492          pea       @m68kde~1_94.L
00002112  448A      
00002114  4E92      3493          jsr       (A2)
00002116  584F      3494          addq.w    #4,A7
                    3495   ; printf("\r\n  E            - Enter String into Memory") ;
00002118  4879 0000 3496          pea       @m68kde~1_95.L
0000211C  44BC      
0000211E  4E92      3497          jsr       (A2)
00002120  584F      3498          addq.w    #4,A7
                    3499   ; printf("\r\n  F            - Fill Memory with Data") ;
00002122  4879 0000 3500          pea       @m68kde~1_96.L
00002126  44E8      
00002128  4E92      3501          jsr       (A2)
0000212A  584F      3502          addq.w    #4,A7
                    3503   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000212C  2F39 0B00 3504          move.l    _PC.L,-(A7)
00002130  0120      
00002132  4879 0000 3505          pea       @m68kde~1_97.L
00002136  4512      
00002138  4E92      3506          jsr       (A2)
0000213A  504F      3507          addq.w    #8,A7
                    3508   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000213C  4879 0000 3509          pea       @m68kde~1_98.L
00002140  454C      
00002142  4E92      3510          jsr       (A2)
00002144  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  M            - Memory Examine and Change");
00002146  4879 0000 3513          pea       @m68kde~1_99.L
0000214A  4584      
0000214C  4E92      3514          jsr       (A2)
0000214E  584F      3515          addq.w    #4,A7
                    3516   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002150  4879 0000 3517          pea       @m68kde~1_100.L
00002154  45B2      
00002156  4E92      3518          jsr       (A2)
00002158  584F      3519          addq.w    #4,A7
                    3520   ; printf("\r\n  R            - Display 68000 Registers") ;
0000215A  4879 0000 3521          pea       @m68kde~1_101.L
0000215E  45EC      
00002160  4E92      3522          jsr       (A2)
00002162  584F      3523          addq.w    #4,A7
                    3524   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002164  4879 0000 3525          pea       @m68kde~1_102.L
00002168  4618      
0000216A  4E92      3526          jsr       (A2)
0000216C  584F      3527          addq.w    #4,A7
                    3528   ; printf("\r\n  TM           - Test Memory") ;
0000216E  4879 0000 3529          pea       @m68kde~1_103.L
00002172  464A      
00002174  4E92      3530          jsr       (A2)
00002176  584F      3531          addq.w    #4,A7
                    3532   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002178  4879 0000 3533          pea       @m68kde~1_104.L
0000217C  466A      
0000217E  4E92      3534          jsr       (A2)
00002180  584F      3535          addq.w    #4,A7
                    3536   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002182  4879 0000 3537          pea       @m68kde~1_105.L
00002186  4692      
00002188  4E92      3538          jsr       (A2)
0000218A  584F      3539          addq.w    #4,A7
                    3540   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000218C  4879 0000 3541          pea       @m68kde~1_106.L
00002190  46C8      
00002192  4E92      3542          jsr       (A2)
00002194  584F      3543          addq.w    #4,A7
                    3544   ; printf(banner) ;
00002196  2F02      3545          move.l    D2,-(A7)
00002198  4E92      3546          jsr       (A2)
0000219A  584F      3547          addq.w    #4,A7
0000219C  4CDF 0404 3548          movem.l   (A7)+,D2/A2
000021A0  4E75      3549          rts
                    3550   ; }
                    3551   ; void menu(void)
                    3552   ; {
                    3553   _menu:
000021A2  48E7 303C 3554          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000021A6  45F9 0000 3555          lea       _printf.L,A2
000021AA  30F2      
000021AC  47F9 0B00 3556          lea       _Trace.L,A3
000021B0  00D8      
000021B2  49F9 0B00 3557          lea       _x.L,A4
000021B6  00C8      
000021B8  4BF9 0B00 3558          lea       _SR.L,A5
000021BC  012C      
                    3559   ; char c,c1 ;
                    3560   ; while(1)    {
                    3561   menu_1:
                    3562   ; FlushKeyboard() ;               // dump unread characters from keyboard
000021BE  4EB8 0BA6 3563          jsr       _FlushKeyboard
                    3564   ; printf("\r\n#") ;
000021C2  4879 0000 3565          pea       @m68kde~1_107.L
000021C6  4700      
000021C8  4E92      3566          jsr       (A2)
000021CA  584F      3567          addq.w    #4,A7
                    3568   ; c = toupper(_getch());
000021CC  2F00      3569          move.l    D0,-(A7)
000021CE  4EB8 0B68 3570          jsr       __getch
000021D2  2200      3571          move.l    D0,D1
000021D4  201F      3572          move.l    (A7)+,D0
000021D6  2F01      3573          move.l    D1,-(A7)
000021D8  4EB9 0000 3574          jsr       _toupper
000021DC  30C6      
000021DE  584F      3575          addq.w    #4,A7
000021E0  1400      3576          move.b    D0,D2
                    3577   ; if( c == (char)('L'))                  // load s record file
000021E2  0C02 004C 3578          cmp.b     #76,D2
000021E6  6608      3579          bne.s     menu_4
                    3580   ; Load_SRecordFile() ;
000021E8  4EB8 0E6A 3581          jsr       _Load_SRecordFile
000021EC  6000 021E 3582          bra       menu_46
                    3583   menu_4:
                    3584   ; else if( c == (char)('D'))             // dump memory
000021F0  0C02 0044 3585          cmp.b     #68,D2
000021F4  6608      3586          bne.s     menu_6
                    3587   ; DumpMemory() ;
000021F6  4EB8 0D00 3588          jsr       _DumpMemory
000021FA  6000 0210 3589          bra       menu_46
                    3590   menu_6:
                    3591   ; else if( c == (char)('E'))             // Enter String into memory
000021FE  0C02 0045 3592          cmp.b     #69,D2
00002202  660A      3593          bne.s     menu_8
                    3594   ; EnterString() ;
00002204  4EB9 0000 3595          jsr       _EnterString
00002208  2554      
0000220A  6000 0200 3596          bra       menu_46
                    3597   menu_8:
                    3598   ; else if( c == (char)('F'))             // fill memory
0000220E  0C02 0046 3599          cmp.b     #70,D2
00002212  6608      3600          bne.s     menu_10
                    3601   ; FillMemory() ;
00002214  4EB8 0DF0 3602          jsr       _FillMemory
00002218  6000 01F2 3603          bra       menu_46
                    3604   menu_10:
                    3605   ; else if( c == (char)('G'))  {           // go user program
0000221C  0C02 0047 3606          cmp.b     #71,D2
00002220  6626      3607          bne.s     menu_12
                    3608   ; printf("\r\nProgram Running.....") ;
00002222  4879 0000 3609          pea       @m68kde~1_108.L
00002226  4704      
00002228  4E92      3610          jsr       (A2)
0000222A  584F      3611          addq.w    #4,A7
                    3612   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000222C  4879 0000 3613          pea       @m68kde~1_109.L
00002230  471C      
00002232  4E92      3614          jsr       (A2)
00002234  584F      3615          addq.w    #4,A7
                    3616   ; GoFlag = 1 ;
00002236  23FC 0000 3617          move.l    #1,_GoFlag.L
0000223A  0001 0B00 
0000223E  00DC      
                    3618   ; go() ;
00002240  4EB8 08B8 3619          jsr       _go
00002244  6000 01C6 3620          bra       menu_46
                    3621   menu_12:
                    3622   ; }
                    3623   ; else if( c == (char)('M'))           // memory examine and modify
00002248  0C02 004D 3624          cmp.b     #77,D2
0000224C  6608      3625          bne.s     menu_14
                    3626   ; MemoryChange() ;
0000224E  4EB8 0FF8 3627          jsr       _MemoryChange
00002252  6000 01B8 3628          bra       menu_46
                    3629   menu_14:
                    3630   ; else if( c == (char)('P'))            // Program Flash Chip
00002256  0C02 0050 3631          cmp.b     #80,D2
0000225A  6608      3632          bne.s     menu_16
                    3633   ; ProgramFlashChip() ;
0000225C  4EB8 10F8 3634          jsr       _ProgramFlashChip
00002260  6000 01AA 3635          bra       menu_46
                    3636   menu_16:
                    3637   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002264  0C02 0043 3638          cmp.b     #67,D2
00002268  6608      3639          bne.s     menu_18
                    3640   ; LoadFromFlashChip();
0000226A  4EB8 10FA 3641          jsr       _LoadFromFlashChip
0000226E  6000 019C 3642          bra       menu_46
                    3643   menu_18:
                    3644   ; else if( c == (char)('R'))             // dump registers
00002272  0C02 0052 3645          cmp.b     #82,D2
00002276  6608      3646          bne.s     menu_20
                    3647   ; DumpRegisters() ;
00002278  4EB8 110A 3648          jsr       _DumpRegisters
0000227C  6000 018E 3649          bra       menu_46
                    3650   menu_20:
                    3651   ; else if( c == (char)('.'))           // change registers
00002280  0C02 002E 3652          cmp.b     #46,D2
00002284  6608      3653          bne.s     menu_22
                    3654   ; ChangeRegisters() ;
00002286  4EB8 15FC 3655          jsr       _ChangeRegisters
0000228A  6000 0180 3656          bra       menu_46
                    3657   menu_22:
                    3658   ; else if( c == (char)('B'))              // breakpoint command
0000228E  0C02 0042 3659          cmp.b     #66,D2
00002292  6608      3660          bne.s     menu_24
                    3661   ; Breakpoint() ;
00002294  4EB8 1FD0 3662          jsr       _Breakpoint
00002298  6000 0172 3663          bra       menu_46
                    3664   menu_24:
                    3665   ; else if( c == (char)('T'))  {          // Test command
0000229C  0C02 0054 3666          cmp.b     #84,D2
000022A0  6600 0046 3667          bne       menu_26
                    3668   ; c1 = toupper(_getch()) ;
000022A4  2F00      3669          move.l    D0,-(A7)
000022A6  4EB8 0B68 3670          jsr       __getch
000022AA  2200      3671          move.l    D0,D1
000022AC  201F      3672          move.l    (A7)+,D0
000022AE  2F01      3673          move.l    D1,-(A7)
000022B0  4EB9 0000 3674          jsr       _toupper
000022B4  30C6      
000022B6  584F      3675          addq.w    #4,A7
000022B8  1600      3676          move.b    D0,D3
                    3677   ; if(c1 == (char)('M'))                    // memory test
000022BA  0C03 004D 3678          cmp.b     #77,D3
000022BE  6608      3679          bne.s     menu_28
                    3680   ; MemoryTest() ;
000022C0  4EB9 0000 3681          jsr       _MemoryTest
000022C4  2AD4      
000022C6  601C      3682          bra.s     menu_33
                    3683   menu_28:
                    3684   ; else if( c1 == (char)('S'))              // Switch Test command
000022C8  0C03 0053 3685          cmp.b     #83,D3
000022CC  6606      3686          bne.s     menu_30
                    3687   ; SwitchTest() ;
000022CE  4EB8 0AA4 3688          jsr       _SwitchTest
000022D2  6010      3689          bra.s     menu_33
                    3690   menu_30:
                    3691   ; else if( c1 == (char)('D'))              // display Test command
000022D4  0C03 0044 3692          cmp.b     #68,D3
000022D8  6606      3693          bne.s     menu_32
                    3694   ; TestLEDS() ;
000022DA  4EB8 0A50 3695          jsr       _TestLEDS
000022DE  6004      3696          bra.s     menu_33
                    3697   menu_32:
                    3698   ; else
                    3699   ; UnknownCommand() ;
000022E0  4EB8 1FA4 3700          jsr       _UnknownCommand
                    3701   menu_33:
000022E4  6000 0126 3702          bra       menu_46
                    3703   menu_26:
                    3704   ; }
                    3705   ; else if( c == (char)(' ')) {             // Next instruction command
000022E8  0C02 0020 3706          cmp.b     #32,D2
000022EC  6636      3707          bne.s     menu_34
                    3708   ; DisableBreakPoints() ;
000022EE  4EB8 1BB4 3709          jsr       _DisableBreakPoints
                    3710   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022F2  2013      3711          move.l    (A3),D0
000022F4  0C80 0000 3712          cmp.l     #1,D0
000022F8  0001      
000022FA  661A      3713          bne.s     menu_36
000022FC  2039 0B00 3714          move.l    _GoFlag.L,D0
00002300  00DC      
00002302  0C80 0000 3715          cmp.l     #1,D0
00002306  0001      
00002308  660C      3716          bne.s     menu_36
                    3717   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000230A  13FC 0001 3718          move.b    #1,4194314
0000230E  0040 000A 
                    3719   ; return ;
00002312  6000 00FC 3720          bra       menu_38
                    3721   menu_36:
                    3722   ; }
                    3723   ; else
                    3724   ; printf("\r\nError: Press 'G' first to start program") ;
00002316  4879 0000 3725          pea       @m68kde~1_110.L
0000231A  474A      
0000231C  4E92      3726          jsr       (A2)
0000231E  584F      3727          addq.w    #4,A7
00002320  6000 00EA 3728          bra       menu_46
                    3729   menu_34:
                    3730   ; }
                    3731   ; else if( c == (char)('S')) {             // single step
00002324  0C02 0053 3732          cmp.b     #83,D2
00002328  6600 008C 3733          bne       menu_39
                    3734   ; if(Trace == 0) {
0000232C  2013      3735          move.l    (A3),D0
0000232E  6600 0050 3736          bne       menu_41
                    3737   ; DisableBreakPoints() ;
00002332  4EB8 1BB4 3738          jsr       _DisableBreakPoints
                    3739   ; printf("\r\nSingle Step  :[ON]") ;
00002336  4879 0000 3740          pea       @m68kde~1_111.L
0000233A  4774      
0000233C  4E92      3741          jsr       (A2)
0000233E  584F      3742          addq.w    #4,A7
                    3743   ; printf("\r\nBreak Points :[Disabled]") ;
00002340  4879 0000 3744          pea       @m68kde~1_44.L
00002344  3E12      
00002346  4E92      3745          jsr       (A2)
00002348  584F      3746          addq.w    #4,A7
                    3747   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000234A  0055 8000 3748          or.w      #32768,(A5)
                    3749   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000234E  2F39 0B00 3750          move.l    _PC.L,-(A7)
00002352  0120      
00002354  4879 0000 3751          pea       @m68kde~1_112.L
00002358  478A      
0000235A  4E92      3752          jsr       (A2)
0000235C  504F      3753          addq.w    #8,A7
                    3754   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000235E  4879 0000 3755          pea       @m68kde~1_113.L
00002362  47BE      
00002364  4E92      3756          jsr       (A2)
00002366  584F      3757          addq.w    #4,A7
                    3758   ; DumpRegisters() ;
00002368  4EB8 110A 3759          jsr       _DumpRegisters
                    3760   ; Trace = 1;
0000236C  26BC 0000 3761          move.l    #1,(A3)
00002370  0001      
                    3762   ; TraceException = 1;
00002372  13FC 0001 3763          move.b    #1,4194314
00002376  0040 000A 
                    3764   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000237A  28B8 0074 3765          move.l    116,(A4)
0000237E  6032      3766          bra.s     menu_42
                    3767   menu_41:
                    3768   ; }
                    3769   ; else {
                    3770   ; Trace = 0 ;
00002380  4293      3771          clr.l     (A3)
                    3772   ; TraceException = 0 ;
00002382  4239 0040 3773          clr.b     4194314
00002386  000A      
                    3774   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002388  28B8 0074 3775          move.l    116,(A4)
                    3776   ; EnableBreakPoints() ;
0000238C  4EB8 1C08 3777          jsr       _EnableBreakPoints
                    3778   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002390  0255 7FFF 3779          and.w     #32767,(A5)
                    3780   ; printf("\r\nSingle Step : [OFF]") ;
00002394  4879 0000 3781          pea       @m68kde~1_114.L
00002398  47E2      
0000239A  4E92      3782          jsr       (A2)
0000239C  584F      3783          addq.w    #4,A7
                    3784   ; printf("\r\nBreak Points :[Enabled]") ;
0000239E  4879 0000 3785          pea       @m68kde~1_115.L
000023A2  47F8      
000023A4  4E92      3786          jsr       (A2)
000023A6  584F      3787          addq.w    #4,A7
                    3788   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000023A8  4879 0000 3789          pea       @m68kde~1_116.L
000023AC  4812      
000023AE  4E92      3790          jsr       (A2)
000023B0  584F      3791          addq.w    #4,A7
                    3792   menu_42:
000023B2  6000 0058 3793          bra       menu_46
                    3794   menu_39:
                    3795   ; }
                    3796   ; }
                    3797   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000023B6  0C02 001B 3798          cmp.b     #27,D2
000023BA  6600 0040 3799          bne       menu_43
                    3800   ; Trace = 0;
000023BE  4293      3801          clr.l     (A3)
                    3802   ; TraceException = 0;
000023C0  4239 0040 3803          clr.b     4194314
000023C4  000A      
                    3804   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000023C6  28B8 0074 3805          move.l    116,(A4)
                    3806   ; EnableBreakPoints() ;
000023CA  4EB8 1C08 3807          jsr       _EnableBreakPoints
                    3808   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000023CE  0255 7FFF 3809          and.w     #32767,(A5)
                    3810   ; printf("\r\nSingle Step  :[OFF]") ;
000023D2  4879 0000 3811          pea       @m68kde~1_117.L
000023D6  483C      
000023D8  4E92      3812          jsr       (A2)
000023DA  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\nBreak Points :[Enabled]");
000023DC  4879 0000 3815          pea       @m68kde~1_115.L
000023E0  47F8      
000023E2  4E92      3816          jsr       (A2)
000023E4  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\nProgram Running.....") ;
000023E6  4879 0000 3819          pea       @m68kde~1_108.L
000023EA  4704      
000023EC  4E92      3820          jsr       (A2)
000023EE  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023F0  4879 0000 3823          pea       @m68kde~1_109.L
000023F4  471C      
000023F6  4E92      3824          jsr       (A2)
000023F8  584F      3825          addq.w    #4,A7
                    3826   ; return ;
000023FA  6014      3827          bra.s     menu_38
                    3828   menu_43:
                    3829   ; }
                    3830   ; else if( c == (char)('W'))              // Watchpoint command
000023FC  0C02 0057 3831          cmp.b     #87,D2
00002400  6606      3832          bne.s     menu_45
                    3833   ; Watchpoint() ;
00002402  4EB8 204C 3834          jsr       _Watchpoint
00002406  6004      3835          bra.s     menu_46
                    3836   menu_45:
                    3837   ; else
                    3838   ; UnknownCommand() ;
00002408  4EB8 1FA4 3839          jsr       _UnknownCommand
                    3840   menu_46:
0000240C  6000 FDB0 3841          bra       menu_1
                    3842   menu_38:
00002410  4CDF 3C0C 3843          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002414  4E75      3844          rts
                    3845   ; }
                    3846   ; }
                    3847   ; void PrintErrorMessageandAbort(char *string) {
                    3848   _PrintErrorMessageandAbort:
00002416  4E56 0000 3849          link      A6,#0
                    3850   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
0000241A  4879 0000 3851          pea       @m68kde~1_118.L
0000241E  4852      
00002420  4EB9 0000 3852          jsr       _printf
00002424  30F2      
00002426  584F      3853          addq.w    #4,A7
                    3854   ; printf("%s\r\n", string) ;
00002428  2F2E 0008 3855          move.l    8(A6),-(A7)
0000242C  4879 0000 3856          pea       @m68kde~1_119.L
00002430  486E      
00002432  4EB9 0000 3857          jsr       _printf
00002436  30F2      
00002438  504F      3858          addq.w    #8,A7
                    3859   ; menu() ;
0000243A  4EB8 21A2 3860          jsr       _menu
0000243E  4E5E      3861          unlk      A6
00002440  4E75      3862          rts
                    3863   ; }
                    3864   ; void IRQMessage(int level) {
                    3865   _IRQMessage:
00002442  4E56 0000 3866          link      A6,#0
                    3867   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002446  4879 0000 3868          pea       @m68kde~1_120.L
0000244A  4874      
0000244C  4EB9 0000 3869          jsr       _printf
00002450  30F2      
00002452  584F      3870          addq.w    #4,A7
                    3871   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002454  2F2E 0008 3872          move.l    8(A6),-(A7)
00002458  4879 0000 3873          pea       @m68kde~1_121.L
0000245C  488C      
0000245E  4EB9 0000 3874          jsr       _printf
00002462  30F2      
00002464  504F      3875          addq.w    #8,A7
                    3876   ; menu() ;
00002466  4EB8 21A2 3877          jsr       _menu
0000246A  4E5E      3878          unlk      A6
0000246C  4E75      3879          rts
                    3880   ; }
                    3881   ; void UnhandledIRQ1(void) {
                    3882   _UnhandledIRQ1:
                    3883   ; IRQMessage(1);
0000246E  4878 0001 3884          pea       1
00002472  4EB8 2442 3885          jsr       _IRQMessage
00002476  584F      3886          addq.w    #4,A7
00002478  4E75      3887          rts
                    3888   ; }
                    3889   ; void UnhandledIRQ2(void) {
                    3890   _UnhandledIRQ2:
                    3891   ; IRQMessage(2);
0000247A  4878 0002 3892          pea       2
0000247E  4EB8 2442 3893          jsr       _IRQMessage
00002482  584F      3894          addq.w    #4,A7
00002484  4E75      3895          rts
                    3896   ; }
                    3897   ; void UnhandledIRQ3(void){
                    3898   _UnhandledIRQ3:
                    3899   ; IRQMessage(3);
00002486  4878 0003 3900          pea       3
0000248A  4EB8 2442 3901          jsr       _IRQMessage
0000248E  584F      3902          addq.w    #4,A7
00002490  4E75      3903          rts
                    3904   ; }
                    3905   ; void UnhandledIRQ4(void) {
                    3906   _UnhandledIRQ4:
                    3907   ; IRQMessage(4);
00002492  4878 0004 3908          pea       4
00002496  4EB8 2442 3909          jsr       _IRQMessage
0000249A  584F      3910          addq.w    #4,A7
0000249C  4E75      3911          rts
                    3912   ; }
                    3913   ; void UnhandledIRQ5(void) {
                    3914   _UnhandledIRQ5:
                    3915   ; IRQMessage(5);
0000249E  4878 0005 3916          pea       5
000024A2  4EB8 2442 3917          jsr       _IRQMessage
000024A6  584F      3918          addq.w    #4,A7
000024A8  4E75      3919          rts
                    3920   ; }
                    3921   ; void UnhandledIRQ6(void) {
                    3922   _UnhandledIRQ6:
                    3923   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000024AA  4879 0000 3924          pea       @m68kde~1_122.L
000024AE  48B0      
000024B0  4EB8 2416 3925          jsr       _PrintErrorMessageandAbort
000024B4  584F      3926          addq.w    #4,A7
                    3927   ; menu() ;
000024B6  4EB8 21A2 3928          jsr       _menu
000024BA  4E75      3929          rts
                    3930   ; }
                    3931   ; void UnhandledIRQ7(void) {
                    3932   _UnhandledIRQ7:
                    3933   ; IRQMessage(7);
000024BC  4878 0007 3934          pea       7
000024C0  4EB8 2442 3935          jsr       _IRQMessage
000024C4  584F      3936          addq.w    #4,A7
000024C6  4E75      3937          rts
                    3938   ; }
                    3939   ; void UnhandledTrap(void) {
                    3940   _UnhandledTrap:
                    3941   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000024C8  4879 0000 3942          pea       @m68kde~1_123.L
000024CC  48F0      
000024CE  4EB8 2416 3943          jsr       _PrintErrorMessageandAbort
000024D2  584F      3944          addq.w    #4,A7
000024D4  4E75      3945          rts
                    3946   ; }
                    3947   ; void BusError() {
                    3948   _BusError:
                    3949   ; PrintErrorMessageandAbort("BUS Error!") ;
000024D6  4879 0000 3950          pea       @m68kde~1_124.L
000024DA  4906      
000024DC  4EB8 2416 3951          jsr       _PrintErrorMessageandAbort
000024E0  584F      3952          addq.w    #4,A7
000024E2  4E75      3953          rts
                    3954   ; }
                    3955   ; void AddressError() {
                    3956   _AddressError:
                    3957   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024E4  4879 0000 3958          pea       @m68kde~1_125.L
000024E8  4912      
000024EA  4EB8 2416 3959          jsr       _PrintErrorMessageandAbort
000024EE  584F      3960          addq.w    #4,A7
000024F0  4E75      3961          rts
                    3962   ; }
                    3963   ; void IllegalInstruction() {
                    3964   _IllegalInstruction:
                    3965   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024F2  4879 0000 3966          pea       @m68kde~1_126.L
000024F6  4922      
000024F8  4EB8 2416 3967          jsr       _PrintErrorMessageandAbort
000024FC  584F      3968          addq.w    #4,A7
000024FE  4E75      3969          rts
                    3970   ; }
                    3971   ; void Dividebyzero() {
                    3972   _Dividebyzero:
                    3973   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002500  4879 0000 3974          pea       @m68kde~1_127.L
00002504  4936      
00002506  4EB8 2416 3975          jsr       _PrintErrorMessageandAbort
0000250A  584F      3976          addq.w    #4,A7
0000250C  4E75      3977          rts
                    3978   ; }
                    3979   ; void Check() {
                    3980   _Check:
                    3981   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000250E  4879 0000 3982          pea       @m68kde~1_128.L
00002512  4946      
00002514  4EB8 2416 3983          jsr       _PrintErrorMessageandAbort
00002518  584F      3984          addq.w    #4,A7
0000251A  4E75      3985          rts
                    3986   ; }
                    3987   ; void Trapv() {
                    3988   _Trapv:
                    3989   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000251C  4879 0000 3990          pea       @m68kde~1_129.L
00002520  4958      
00002522  4EB8 2416 3991          jsr       _PrintErrorMessageandAbort
00002526  584F      3992          addq.w    #4,A7
00002528  4E75      3993          rts
                    3994   ; }
                    3995   ; void PrivError() {
                    3996   _PrivError:
                    3997   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000252A  4879 0000 3998          pea       @m68kde~1_130.L
0000252E  496A      
00002530  4EB8 2416 3999          jsr       _PrintErrorMessageandAbort
00002534  584F      4000          addq.w    #4,A7
00002536  4E75      4001          rts
                    4002   ; }
                    4003   ; void UnitIRQ() {
                    4004   _UnitIRQ:
                    4005   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002538  4879 0000 4006          pea       @m68kde~1_131.L
0000253C  497E      
0000253E  4EB8 2416 4007          jsr       _PrintErrorMessageandAbort
00002542  584F      4008          addq.w    #4,A7
00002544  4E75      4009          rts
                    4010   ; }
                    4011   ; void Spurious() {
                    4012   _Spurious:
                    4013   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002546  4879 0000 4014          pea       @m68kde~1_132.L
0000254A  4990      
0000254C  4EB8 2416 4015          jsr       _PrintErrorMessageandAbort
00002550  584F      4016          addq.w    #4,A7
00002552  4E75      4017          rts
                    4018   ; }
                    4019   ; void EnterString(void)
                    4020   ; {
                    4021   _EnterString:
00002554  4E56 FFFC 4022          link      A6,#-4
00002558  2F02      4023          move.l    D2,-(A7)
                    4024   ; unsigned char *Start;
                    4025   ; unsigned char c;
                    4026   ; printf("\r\nStart Address in Memory: ") ;
0000255A  4879 0000 4027          pea       @m68kde~1_133.L
0000255E  499E      
00002560  4EB9 0000 4028          jsr       _printf
00002564  30F2      
00002566  584F      4029          addq.w    #4,A7
                    4030   ; Start = Get8HexDigits(0) ;
00002568  42A7      4031          clr.l     -(A7)
0000256A  4EB8 0CD8 4032          jsr       _Get8HexDigits
0000256E  584F      4033          addq.w    #4,A7
00002570  2400      4034          move.l    D0,D2
                    4035   ; printf("\r\nEnter String (ESC to end) :") ;
00002572  4879 0000 4036          pea       @m68kde~1_134.L
00002576  49BA      
00002578  4EB9 0000 4037          jsr       _printf
0000257C  30F2      
0000257E  584F      4038          addq.w    #4,A7
                    4039   ; while((c = getchar()) != 0x1b)
                    4040   EnterString_1:
00002580  4EB9 0000 4041          jsr       _getch
00002584  3014      
00002586  1D40 FFFF 4042          move.b    D0,-1(A6)
0000258A  0C00 001B 4043          cmp.b     #27,D0
0000258E  670A      4044          beq.s     EnterString_3
                    4045   ; *Start++ = c ;
00002590  2042      4046          move.l    D2,A0
00002592  5282      4047          addq.l    #1,D2
00002594  10AE FFFF 4048          move.b    -1(A6),(A0)
00002598  60E6      4049          bra       EnterString_1
                    4050   EnterString_3:
                    4051   ; *Start = 0x00;  // terminate with a null
0000259A  2042      4052          move.l    D2,A0
0000259C  4210      4053          clr.b     (A0)
0000259E  241F      4054          move.l    (A7)+,D2
000025A0  4E5E      4055          unlk      A6
000025A2  4E75      4056          rts
                    4057   ; }
                    4058   ; // Returning an array containing the start and the end address of the test (two hex numbers)
                    4059   ; void ask_addr_range_sram (unsigned int* addr_array, int data_length) {
                    4060   _ask_addr_range_sram:
000025A4  4E56 0000 4061          link      A6,#0
000025A8  48E7 3820 4062          movem.l   D2/D3/D4/A2,-(A7)
000025AC  45F9 0000 4063          lea       _printf.L,A2
000025B0  30F2      
000025B2  242E 0008 4064          move.l    8(A6),D2
                    4065   ; int start_addr_valid = 0;
000025B6  4284      4066          clr.l     D4
                    4067   ; int end_addr_valid = 0;
000025B8  4283      4068          clr.l     D3
                    4069   ; while (!start_addr_valid) {
                    4070   ask_addr_range_sram_1:
000025BA  4A84      4071          tst.l     D4
000025BC  6600 008C 4072          bne       ask_addr_range_sram_3
                    4073   ; printf("\r\nProvide the start address of the test.\n");
000025C0  4879 0000 4074          pea       @m68kde~1_135.L
000025C4  49D8      
000025C6  4E92      4075          jsr       (A2)
000025C8  584F      4076          addq.w    #4,A7
                    4077   ; //scanf("%x", addr_array);
                    4078   ; addr_array[0] = Get8HexDigits(0);
000025CA  42A7      4079          clr.l     -(A7)
000025CC  4EB8 0CD8 4080          jsr       _Get8HexDigits
000025D0  584F      4081          addq.w    #4,A7
000025D2  2042      4082          move.l    D2,A0
000025D4  2080      4083          move.l    D0,(A0)
                    4084   ; if (addr_array[0] < 4026531840) {
000025D6  2042      4085          move.l    D2,A0
000025D8  2010      4086          move.l    (A0),D0
000025DA  0C80 F000 4087          cmp.l     #-268435456,D0
000025DE  0000      
000025E0  640E      4088          bhs.s     ask_addr_range_sram_4
                    4089   ; printf ("The start address is smaller than 0xf0000000, invalid!\n");
000025E2  4879 0000 4090          pea       @m68kde~1_136.L
000025E6  4A02      
000025E8  4E92      4091          jsr       (A2)
000025EA  584F      4092          addq.w    #4,A7
000025EC  6000 0058 4093          bra       ask_addr_range_sram_9
                    4094   ask_addr_range_sram_4:
                    4095   ; } else if (addr_array[0] > 4026793983) {
000025F0  2042      4096          move.l    D2,A0
000025F2  2010      4097          move.l    (A0),D0
000025F4  0C80 F003 4098          cmp.l     #-268173313,D0
000025F8  FFFF      
000025FA  630E      4099          bls.s     ask_addr_range_sram_6
                    4100   ; printf ("The start address is bigger than 0xf003ffff, invalid!\n");
000025FC  4879 0000 4101          pea       @m68kde~1_137.L
00002600  4A3A      
00002602  4E92      4102          jsr       (A2)
00002604  584F      4103          addq.w    #4,A7
00002606  6000 003E 4104          bra       ask_addr_range_sram_9
                    4105   ask_addr_range_sram_6:
                    4106   ; } else { // If the data length is words or long words, check whether the start address is odd 
                    4107   ; if (data_length > 1 && addr_array[0] % 2 != 0) {
0000260A  202E 000C 4108          move.l    12(A6),D0
0000260E  0C80 0000 4109          cmp.l     #1,D0
00002612  0001      
00002614  6F24      4110          ble.s     ask_addr_range_sram_8
00002616  2042      4111          move.l    D2,A0
00002618  2F10      4112          move.l    (A0),-(A7)
0000261A  4878 0002 4113          pea       2
0000261E  4EB9 0000 4114          jsr       ULDIV
00002622  2F06      
00002624  202F 0004 4115          move.l    4(A7),D0
00002628  504F      4116          addq.w    #8,A7
0000262A  4A80      4117          tst.l     D0
0000262C  670C      4118          beq.s     ask_addr_range_sram_8
                    4119   ; printf("The start address provided is odd, need an even one!\n");
0000262E  4879 0000 4120          pea       @m68kde~1_138.L
00002632  4A72      
00002634  4E92      4121          jsr       (A2)
00002636  584F      4122          addq.w    #4,A7
00002638  600C      4123          bra.s     ask_addr_range_sram_9
                    4124   ask_addr_range_sram_8:
                    4125   ; } else {
                    4126   ; printf ("Start address valid.\n");
0000263A  4879 0000 4127          pea       @m68kde~1_139.L
0000263E  4AA8      
00002640  4E92      4128          jsr       (A2)
00002642  584F      4129          addq.w    #4,A7
                    4130   ; start_addr_valid = 1;
00002644  7801      4131          moveq     #1,D4
                    4132   ask_addr_range_sram_9:
00002646  6000 FF72 4133          bra       ask_addr_range_sram_1
                    4134   ask_addr_range_sram_3:
                    4135   ; } 
                    4136   ; }
                    4137   ; }
                    4138   ; while (!end_addr_valid) {
                    4139   ask_addr_range_sram_10:
0000264A  4A83      4140          tst.l     D3
0000264C  6600 0094 4141          bne       ask_addr_range_sram_12
                    4142   ; printf("\r\nProvide the end address of the test.\n");
00002650  4879 0000 4143          pea       @m68kde~1_140.L
00002654  4ABE      
00002656  4E92      4144          jsr       (A2)
00002658  584F      4145          addq.w    #4,A7
                    4146   ; //scanf("%x", addr_array+1);
                    4147   ; addr_array[1] = Get8HexDigits(0);
0000265A  42A7      4148          clr.l     -(A7)
0000265C  4EB8 0CD8 4149          jsr       _Get8HexDigits
00002660  584F      4150          addq.w    #4,A7
00002662  2042      4151          move.l    D2,A0
00002664  2140 0004 4152          move.l    D0,4(A0)
                    4153   ; if (addr_array[1] < 4026531840) {
00002668  2042      4154          move.l    D2,A0
0000266A  2028 0004 4155          move.l    4(A0),D0
0000266E  0C80 F000 4156          cmp.l     #-268435456,D0
00002672  0000      
00002674  640E      4157          bhs.s     ask_addr_range_sram_13
                    4158   ; printf ("The end address is smaller than 0xf0000000, invalid!\n");
00002676  4879 0000 4159          pea       @m68kde~1_141.L
0000267A  4AE6      
0000267C  4E92      4160          jsr       (A2)
0000267E  584F      4161          addq.w    #4,A7
00002680  6000 005C 4162          bra       ask_addr_range_sram_18
                    4163   ask_addr_range_sram_13:
                    4164   ; } else if (addr_array[1] > 4026793983)
00002684  2042      4165          move.l    D2,A0
00002686  2028 0004 4166          move.l    4(A0),D0
0000268A  0C80 F003 4167          cmp.l     #-268173313,D0
0000268E  FFFF      
00002690  630E      4168          bls.s     ask_addr_range_sram_15
                    4169   ; {
                    4170   ; printf ("The end address is bigger than 0xf003ffff, invalid!\n");
00002692  4879 0000 4171          pea       @m68kde~1_142.L
00002696  4B1C      
00002698  4E92      4172          jsr       (A2)
0000269A  584F      4173          addq.w    #4,A7
0000269C  6000 0040 4174          bra       ask_addr_range_sram_18
                    4175   ask_addr_range_sram_15:
                    4176   ; } else { 
                    4177   ; if (data_length > 1 && addr_array[1] % 2 != 0) {
000026A0  202E 000C 4178          move.l    12(A6),D0
000026A4  0C80 0000 4179          cmp.l     #1,D0
000026A8  0001      
000026AA  6F26      4180          ble.s     ask_addr_range_sram_17
000026AC  2042      4181          move.l    D2,A0
000026AE  2F28 0004 4182          move.l    4(A0),-(A7)
000026B2  4878 0002 4183          pea       2
000026B6  4EB9 0000 4184          jsr       ULDIV
000026BA  2F06      
000026BC  202F 0004 4185          move.l    4(A7),D0
000026C0  504F      4186          addq.w    #8,A7
000026C2  4A80      4187          tst.l     D0
000026C4  670C      4188          beq.s     ask_addr_range_sram_17
                    4189   ; printf("The end address provided is odd, need an even one!\n");
000026C6  4879 0000 4190          pea       @m68kde~1_143.L
000026CA  4B52      
000026CC  4E92      4191          jsr       (A2)
000026CE  584F      4192          addq.w    #4,A7
000026D0  600C      4193          bra.s     ask_addr_range_sram_18
                    4194   ask_addr_range_sram_17:
                    4195   ; } else {
                    4196   ; printf ("End address valid.\n");
000026D2  4879 0000 4197          pea       @m68kde~1_144.L
000026D6  4B86      
000026D8  4E92      4198          jsr       (A2)
000026DA  584F      4199          addq.w    #4,A7
                    4200   ; end_addr_valid = 1;
000026DC  7601      4201          moveq     #1,D3
                    4202   ask_addr_range_sram_18:
000026DE  6000 FF6A 4203          bra       ask_addr_range_sram_10
                    4204   ask_addr_range_sram_12:
000026E2  4CDF 041C 4205          movem.l   (A7)+,D2/D3/D4/A2
000026E6  4E5E      4206          unlk      A6
000026E8  4E75      4207          rts
                    4208   ; } 
                    4209   ; }
                    4210   ; }
                    4211   ; }
                    4212   ; void ask_addr_range_sdram(unsigned int* addr_array, int data_length) {
                    4213   _ask_addr_range_sdram:
000026EA  4E56 0000 4214          link      A6,#0
000026EE  48E7 3820 4215          movem.l   D2/D3/D4/A2,-(A7)
000026F2  45F9 0000 4216          lea       _printf.L,A2
000026F6  30F2      
000026F8  242E 0008 4217          move.l    8(A6),D2
                    4218   ; int start_addr_valid = 0;
000026FC  4284      4219          clr.l     D4
                    4220   ; int end_addr_valid = 0;
000026FE  4283      4221          clr.l     D3
                    4222   ; while (!start_addr_valid) {
                    4223   ask_addr_range_sdram_1:
00002700  4A84      4224          tst.l     D4
00002702  6600 008C 4225          bne       ask_addr_range_sdram_3
                    4226   ; printf("\r\nProvide the start address of the test.\n");
00002706  4879 0000 4227          pea       @m68kde~1_135.L
0000270A  49D8      
0000270C  4E92      4228          jsr       (A2)
0000270E  584F      4229          addq.w    #4,A7
                    4230   ; //scanf("%x", addr_array);
                    4231   ; addr_array[0] = Get8HexDigits(0);
00002710  42A7      4232          clr.l     -(A7)
00002712  4EB8 0CD8 4233          jsr       _Get8HexDigits
00002716  584F      4234          addq.w    #4,A7
00002718  2042      4235          move.l    D2,A0
0000271A  2080      4236          move.l    D0,(A0)
                    4237   ; if (addr_array[0] < 134217728) {
0000271C  2042      4238          move.l    D2,A0
0000271E  2010      4239          move.l    (A0),D0
00002720  0C80 0800 4240          cmp.l     #134217728,D0
00002724  0000      
00002726  640E      4241          bhs.s     ask_addr_range_sdram_4
                    4242   ; printf ("The start address is smaller than 0x08000000, invalid!\n");
00002728  4879 0000 4243          pea       @m68kde~1_145.L
0000272C  4B9A      
0000272E  4E92      4244          jsr       (A2)
00002730  584F      4245          addq.w    #4,A7
00002732  6000 0058 4246          bra       ask_addr_range_sdram_9
                    4247   ask_addr_range_sdram_4:
                    4248   ; } else if (addr_array[0] > 201326591) {
00002736  2042      4249          move.l    D2,A0
00002738  2010      4250          move.l    (A0),D0
0000273A  0C80 0BFF 4251          cmp.l     #201326591,D0
0000273E  FFFF      
00002740  630E      4252          bls.s     ask_addr_range_sdram_6
                    4253   ; printf ("The start address is bigger than 0x0bffffff, invalid!\n");
00002742  4879 0000 4254          pea       @m68kde~1_146.L
00002746  4BD2      
00002748  4E92      4255          jsr       (A2)
0000274A  584F      4256          addq.w    #4,A7
0000274C  6000 003E 4257          bra       ask_addr_range_sdram_9
                    4258   ask_addr_range_sdram_6:
                    4259   ; } else { // If the data length is words or long words, check whether the start address is odd 
                    4260   ; if (data_length > 1 && addr_array[0] % 2 != 0) {
00002750  202E 000C 4261          move.l    12(A6),D0
00002754  0C80 0000 4262          cmp.l     #1,D0
00002758  0001      
0000275A  6F24      4263          ble.s     ask_addr_range_sdram_8
0000275C  2042      4264          move.l    D2,A0
0000275E  2F10      4265          move.l    (A0),-(A7)
00002760  4878 0002 4266          pea       2
00002764  4EB9 0000 4267          jsr       ULDIV
00002768  2F06      
0000276A  202F 0004 4268          move.l    4(A7),D0
0000276E  504F      4269          addq.w    #8,A7
00002770  4A80      4270          tst.l     D0
00002772  670C      4271          beq.s     ask_addr_range_sdram_8
                    4272   ; printf("The start address provided is odd, need an even one!\n");
00002774  4879 0000 4273          pea       @m68kde~1_138.L
00002778  4A72      
0000277A  4E92      4274          jsr       (A2)
0000277C  584F      4275          addq.w    #4,A7
0000277E  600C      4276          bra.s     ask_addr_range_sdram_9
                    4277   ask_addr_range_sdram_8:
                    4278   ; } else {
                    4279   ; printf ("Start address valid.\n");
00002780  4879 0000 4280          pea       @m68kde~1_139.L
00002784  4AA8      
00002786  4E92      4281          jsr       (A2)
00002788  584F      4282          addq.w    #4,A7
                    4283   ; start_addr_valid = 1;
0000278A  7801      4284          moveq     #1,D4
                    4285   ask_addr_range_sdram_9:
0000278C  6000 FF72 4286          bra       ask_addr_range_sdram_1
                    4287   ask_addr_range_sdram_3:
                    4288   ; } 
                    4289   ; }
                    4290   ; }
                    4291   ; while (!end_addr_valid) {
                    4292   ask_addr_range_sdram_10:
00002790  4A83      4293          tst.l     D3
00002792  6600 0094 4294          bne       ask_addr_range_sdram_12
                    4295   ; printf("\r\nProvide the end address of the test.\n");
00002796  4879 0000 4296          pea       @m68kde~1_140.L
0000279A  4ABE      
0000279C  4E92      4297          jsr       (A2)
0000279E  584F      4298          addq.w    #4,A7
                    4299   ; //scanf("%x", addr_array+1);
                    4300   ; addr_array[1] = Get8HexDigits(0);
000027A0  42A7      4301          clr.l     -(A7)
000027A2  4EB8 0CD8 4302          jsr       _Get8HexDigits
000027A6  584F      4303          addq.w    #4,A7
000027A8  2042      4304          move.l    D2,A0
000027AA  2140 0004 4305          move.l    D0,4(A0)
                    4306   ; if (addr_array[1] < 134217728) {
000027AE  2042      4307          move.l    D2,A0
000027B0  2028 0004 4308          move.l    4(A0),D0
000027B4  0C80 0800 4309          cmp.l     #134217728,D0
000027B8  0000      
000027BA  640E      4310          bhs.s     ask_addr_range_sdram_13
                    4311   ; printf ("The end address is smaller than 0x08000000, invalid!\n");
000027BC  4879 0000 4312          pea       @m68kde~1_147.L
000027C0  4C0A      
000027C2  4E92      4313          jsr       (A2)
000027C4  584F      4314          addq.w    #4,A7
000027C6  6000 005C 4315          bra       ask_addr_range_sdram_18
                    4316   ask_addr_range_sdram_13:
                    4317   ; } else if (addr_array[1] > 201326591)
000027CA  2042      4318          move.l    D2,A0
000027CC  2028 0004 4319          move.l    4(A0),D0
000027D0  0C80 0BFF 4320          cmp.l     #201326591,D0
000027D4  FFFF      
000027D6  630E      4321          bls.s     ask_addr_range_sdram_15
                    4322   ; {
                    4323   ; printf ("The end address is bigger than 0x0bffffff, invalid!\n");
000027D8  4879 0000 4324          pea       @m68kde~1_148.L
000027DC  4C40      
000027DE  4E92      4325          jsr       (A2)
000027E0  584F      4326          addq.w    #4,A7
000027E2  6000 0040 4327          bra       ask_addr_range_sdram_18
                    4328   ask_addr_range_sdram_15:
                    4329   ; } else { 
                    4330   ; if (data_length > 1 && addr_array[1] % 2 != 0) {
000027E6  202E 000C 4331          move.l    12(A6),D0
000027EA  0C80 0000 4332          cmp.l     #1,D0
000027EE  0001      
000027F0  6F26      4333          ble.s     ask_addr_range_sdram_17
000027F2  2042      4334          move.l    D2,A0
000027F4  2F28 0004 4335          move.l    4(A0),-(A7)
000027F8  4878 0002 4336          pea       2
000027FC  4EB9 0000 4337          jsr       ULDIV
00002800  2F06      
00002802  202F 0004 4338          move.l    4(A7),D0
00002806  504F      4339          addq.w    #8,A7
00002808  4A80      4340          tst.l     D0
0000280A  670C      4341          beq.s     ask_addr_range_sdram_17
                    4342   ; printf("The end address provided is odd, need an even one!\n");
0000280C  4879 0000 4343          pea       @m68kde~1_143.L
00002810  4B52      
00002812  4E92      4344          jsr       (A2)
00002814  584F      4345          addq.w    #4,A7
00002816  600C      4346          bra.s     ask_addr_range_sdram_18
                    4347   ask_addr_range_sdram_17:
                    4348   ; } else {
                    4349   ; printf ("End address valid.\n");
00002818  4879 0000 4350          pea       @m68kde~1_144.L
0000281C  4B86      
0000281E  4E92      4351          jsr       (A2)
00002820  584F      4352          addq.w    #4,A7
                    4353   ; end_addr_valid = 1;
00002822  7601      4354          moveq     #1,D3
                    4355   ask_addr_range_sdram_18:
00002824  6000 FF6A 4356          bra       ask_addr_range_sdram_10
                    4357   ask_addr_range_sdram_12:
00002828  4CDF 041C 4358          movem.l   (A7)+,D2/D3/D4/A2
0000282C  4E5E      4359          unlk      A6
0000282E  4E75      4360          rts
                    4361   ; } 
                    4362   ; }
                    4363   ; }
                    4364   ; }
                    4365   ; // Return the byte data with the correct pattern
                    4366   ; unsigned char byte_data (int data_pattern){
                    4367   _byte_data:
00002830  4E56 0000 4368          link      A6,#0
00002834  2F02      4369          move.l    D2,-(A7)
00002836  242E 0008 4370          move.l    8(A6),D2
                    4371   ; if (data_pattern == 1) {
0000283A  0C82 0000 4372          cmp.l     #1,D2
0000283E  0001      
00002840  6604      4373          bne.s     byte_data_1
                    4374   ; return 0;
00002842  4200      4375          clr.b     D0
00002844  602A      4376          bra.s     byte_data_8
                    4377   byte_data_1:
                    4378   ; } else if (data_pattern == 2) {
00002846  0C82 0000 4379          cmp.l     #2,D2
0000284A  0002      
0000284C  6604      4380          bne.s     byte_data_4
                    4381   ; return 0x55;
0000284E  7055      4382          moveq     #85,D0
00002850  601E      4383          bra.s     byte_data_8
                    4384   byte_data_4:
                    4385   ; } else if (data_pattern == 3) {
00002852  0C82 0000 4386          cmp.l     #3,D2
00002856  0003      
00002858  6606      4387          bne.s     byte_data_6
                    4388   ; return 0xaa;
0000285A  103C 00AA 4389          move.b    #170,D0
0000285E  6010      4390          bra.s     byte_data_8
                    4391   byte_data_6:
                    4392   ; } else if (data_pattern == 4) {
00002860  0C82 0000 4393          cmp.l     #4,D2
00002864  0004      
00002866  6608      4394          bne.s     byte_data_8
                    4395   ; return 0xff;
00002868  103C 00FF 4396          move.b    #255,D0
0000286C  6000 0002 4397          bra       byte_data_8
                    4398   byte_data_8:
00002870  241F      4399          move.l    (A7)+,D2
00002872  4E5E      4400          unlk      A6
00002874  4E75      4401          rts
                    4402   ; } 
                    4403   ; }
                    4404   ; // Return the word data (16 bits) with the correct pattern
                    4405   ; unsigned short word_data (int data_pattern){
                    4406   _word_data:
00002876  4E56 0000 4407          link      A6,#0
0000287A  2F02      4408          move.l    D2,-(A7)
0000287C  242E 0008 4409          move.l    8(A6),D2
                    4410   ; if (data_pattern == 1) {
00002880  0C82 0000 4411          cmp.l     #1,D2
00002884  0001      
00002886  6604      4412          bne.s     word_data_1
                    4413   ; return 0;
00002888  4240      4414          clr.w     D0
0000288A  602C      4415          bra.s     word_data_8
                    4416   word_data_1:
                    4417   ; } else if (data_pattern == 2) {
0000288C  0C82 0000 4418          cmp.l     #2,D2
00002890  0002      
00002892  6606      4419          bne.s     word_data_4
                    4420   ; return 0x5555;
00002894  303C 5555 4421          move.w    #21845,D0
00002898  601E      4422          bra.s     word_data_8
                    4423   word_data_4:
                    4424   ; } else if (data_pattern == 3) {
0000289A  0C82 0000 4425          cmp.l     #3,D2
0000289E  0003      
000028A0  6606      4426          bne.s     word_data_6
                    4427   ; return 0xaaaa;
000028A2  303C AAAA 4428          move.w    #43690,D0
000028A6  6010      4429          bra.s     word_data_8
                    4430   word_data_6:
                    4431   ; } else if (data_pattern == 4) {
000028A8  0C82 0000 4432          cmp.l     #4,D2
000028AC  0004      
000028AE  6608      4433          bne.s     word_data_8
                    4434   ; return 0xffff;
000028B0  303C FFFF 4435          move.w    #65535,D0
000028B4  6000 0002 4436          bra       word_data_8
                    4437   word_data_8:
000028B8  241F      4438          move.l    (A7)+,D2
000028BA  4E5E      4439          unlk      A6
000028BC  4E75      4440          rts
                    4441   ; } 
                    4442   ; }
                    4443   ; // Return the long word data (32 bits) with the correct pattern
                    4444   ; unsigned int long_word_data (int data_pattern){
                    4445   _long_word_data:
000028BE  4E56 0000 4446          link      A6,#0
000028C2  2F02      4447          move.l    D2,-(A7)
000028C4  242E 0008 4448          move.l    8(A6),D2
                    4449   ; if (data_pattern == 1) {
000028C8  0C82 0000 4450          cmp.l     #1,D2
000028CC  0001      
000028CE  6604      4451          bne.s     long_word_data_1
                    4452   ; return 0;
000028D0  4280      4453          clr.l     D0
000028D2  602E      4454          bra.s     long_word_data_8
                    4455   long_word_data_1:
                    4456   ; } else if (data_pattern == 2) {
000028D4  0C82 0000 4457          cmp.l     #2,D2
000028D8  0002      
000028DA  6608      4458          bne.s     long_word_data_4
                    4459   ; return 0x55555555;
000028DC  203C 5555 4460          move.l    #1431655765,D0
000028E0  5555      
000028E2  601E      4461          bra.s     long_word_data_8
                    4462   long_word_data_4:
                    4463   ; } else if (data_pattern == 3) {
000028E4  0C82 0000 4464          cmp.l     #3,D2
000028E8  0003      
000028EA  6608      4465          bne.s     long_word_data_6
                    4466   ; return 0xaaaaaaaa;
000028EC  203C AAAA 4467          move.l    #-1431655766,D0
000028F0  AAAA      
000028F2  600E      4468          bra.s     long_word_data_8
                    4469   long_word_data_6:
                    4470   ; } else if (data_pattern == 4) {
000028F4  0C82 0000 4471          cmp.l     #4,D2
000028F8  0004      
000028FA  6606      4472          bne.s     long_word_data_8
                    4473   ; return 0xffffffff;
000028FC  70FF      4474          moveq     #-1,D0
000028FE  6000 0002 4475          bra       long_word_data_8
                    4476   long_word_data_8:
00002902  241F      4477          move.l    (A7)+,D2
00002904  4E5E      4478          unlk      A6
00002906  4E75      4479          rts
                    4480   ; } 
                    4481   ; }
                    4482   ; int byte_test (unsigned char byte, unsigned int* addr_array) {
                    4483   _byte_test:
00002908  4E56 FFFC 4484          link      A6,#-4
0000290C  48E7 3C00 4485          movem.l   D2/D3/D4/D5,-(A7)
00002910  1A2E 000B 4486          move.b    11(A6),D5
00002914  CABC 0000 4487          and.l     #255,D5
00002918  00FF      
                    4488   ; unsigned int start_addr = addr_array[0];
0000291A  206E 000C 4489          move.l    12(A6),A0
0000291E  2810      4490          move.l    (A0),D4
                    4491   ; unsigned int end_addr = addr_array[1];
00002920  206E 000C 4492          move.l    12(A6),A0
00002924  2D68 0004 4493          move.l    4(A0),-4(A6)
00002928  FFFC      
                    4494   ; volatile unsigned char *test_addr = (unsigned char *) start_addr;
0000292A  2404      4495          move.l    D4,D2
                    4496   ; int i;
                    4497   ; for (i = 0; i < (end_addr - start_addr); i ++) {
0000292C  4283      4498          clr.l     D3
                    4499   byte_test_1:
0000292E  202E FFFC 4500          move.l    -4(A6),D0
00002932  9084      4501          sub.l     D4,D0
00002934  B680      4502          cmp.l     D0,D3
00002936  6400 0066 4503          bhs       byte_test_3
                    4504   ; test_addr = (unsigned char *) start_addr + i; 
0000293A  2004      4505          move.l    D4,D0
0000293C  D083      4506          add.l     D3,D0
0000293E  2400      4507          move.l    D0,D2
                    4508   ; *test_addr = byte;
00002940  2042      4509          move.l    D2,A0
00002942  1085      4510          move.b    D5,(A0)
                    4511   ; if (i % 10000 == 0){
00002944  2F03      4512          move.l    D3,-(A7)
00002946  4878 2710 4513          pea       10000
0000294A  4EB9 0000 4514          jsr       LDIV
0000294E  2F18      
00002950  202F 0004 4515          move.l    4(A7),D0
00002954  504F      4516          addq.w    #8,A7
00002956  4A80      4517          tst.l     D0
00002958  6626      4518          bne.s     byte_test_4
                    4519   ; printf("Location %x, write data: %x, read data: %x\n", test_addr, byte, *test_addr);
0000295A  2042      4520          move.l    D2,A0
0000295C  1210      4521          move.b    (A0),D1
0000295E  C2BC 0000 4522          and.l     #255,D1
00002962  00FF      
00002964  2F01      4523          move.l    D1,-(A7)
00002966  CABC 0000 4524          and.l     #255,D5
0000296A  00FF      
0000296C  2F05      4525          move.l    D5,-(A7)
0000296E  2F02      4526          move.l    D2,-(A7)
00002970  4879 0000 4527          pea       @m68kde~1_149.L
00002974  4C76      
00002976  4EB9 0000 4528          jsr       _printf
0000297A  30F2      
0000297C  DEFC 0010 4529          add.w     #16,A7
                    4530   byte_test_4:
                    4531   ; }
                    4532   ; if (*test_addr != byte) {
00002980  2042      4533          move.l    D2,A0
00002982  BA10      4534          cmp.b     (A0),D5
00002984  6714      4535          beq.s     byte_test_6
                    4536   ; printf("Test failed at location %x!\n", test_addr);
00002986  2F02      4537          move.l    D2,-(A7)
00002988  4879 0000 4538          pea       @m68kde~1_150.L
0000298C  4CA2      
0000298E  4EB9 0000 4539          jsr       _printf
00002992  30F2      
00002994  504F      4540          addq.w    #8,A7
                    4541   ; return 0;
00002996  4280      4542          clr.l     D0
00002998  6006      4543          bra.s     byte_test_8
                    4544   byte_test_6:
0000299A  5283      4545          addq.l    #1,D3
0000299C  6090      4546          bra       byte_test_1
                    4547   byte_test_3:
                    4548   ; }
                    4549   ; }
                    4550   ; return 1;
0000299E  7001      4551          moveq     #1,D0
                    4552   byte_test_8:
000029A0  4CDF 003C 4553          movem.l   (A7)+,D2/D3/D4/D5
000029A4  4E5E      4554          unlk      A6
000029A6  4E75      4555          rts
                    4556   ; }
                    4557   ; int word_test (unsigned short word, unsigned int* addr_array) {
                    4558   _word_test:
000029A8  4E56 FFFC 4559          link      A6,#-4
000029AC  48E7 3C00 4560          movem.l   D2/D3/D4/D5,-(A7)
000029B0  3A2E 000A 4561          move.w    10(A6),D5
000029B4  CABC 0000 4562          and.l     #65535,D5
000029B8  FFFF      
                    4563   ; unsigned int start_addr = addr_array[0];
000029BA  206E 000C 4564          move.l    12(A6),A0
000029BE  2810      4565          move.l    (A0),D4
                    4566   ; unsigned int end_addr = addr_array[1];
000029C0  206E 000C 4567          move.l    12(A6),A0
000029C4  2D68 0004 4568          move.l    4(A0),-4(A6)
000029C8  FFFC      
                    4569   ; volatile unsigned short *test_addr = (volatile unsigned short *) start_addr;
000029CA  2404      4570          move.l    D4,D2
                    4571   ; int i;
                    4572   ; for (i = 0; i < (end_addr - start_addr); i=i+2) {
000029CC  4283      4573          clr.l     D3
                    4574   word_test_1:
000029CE  202E FFFC 4575          move.l    -4(A6),D0
000029D2  9084      4576          sub.l     D4,D0
000029D4  B680      4577          cmp.l     D0,D3
000029D6  6400 0066 4578          bhs       word_test_3
                    4579   ; test_addr = start_addr + i;
000029DA  2004      4580          move.l    D4,D0
000029DC  D083      4581          add.l     D3,D0
000029DE  2400      4582          move.l    D0,D2
                    4583   ; *test_addr = word;
000029E0  2042      4584          move.l    D2,A0
000029E2  3085      4585          move.w    D5,(A0)
                    4586   ; if (i % 10000 == 0){
000029E4  2F03      4587          move.l    D3,-(A7)
000029E6  4878 2710 4588          pea       10000
000029EA  4EB9 0000 4589          jsr       LDIV
000029EE  2F18      
000029F0  202F 0004 4590          move.l    4(A7),D0
000029F4  504F      4591          addq.w    #8,A7
000029F6  4A80      4592          tst.l     D0
000029F8  6626      4593          bne.s     word_test_4
                    4594   ; printf("Location %x, write data: %x, read data: %x\n", test_addr, word, *test_addr);
000029FA  2042      4595          move.l    D2,A0
000029FC  3210      4596          move.w    (A0),D1
000029FE  C2BC 0000 4597          and.l     #65535,D1
00002A02  FFFF      
00002A04  2F01      4598          move.l    D1,-(A7)
00002A06  CABC 0000 4599          and.l     #65535,D5
00002A0A  FFFF      
00002A0C  2F05      4600          move.l    D5,-(A7)
00002A0E  2F02      4601          move.l    D2,-(A7)
00002A10  4879 0000 4602          pea       @m68kde~1_149.L
00002A14  4C76      
00002A16  4EB9 0000 4603          jsr       _printf
00002A1A  30F2      
00002A1C  DEFC 0010 4604          add.w     #16,A7
                    4605   word_test_4:
                    4606   ; }
                    4607   ; if (*test_addr != word) {
00002A20  2042      4608          move.l    D2,A0
00002A22  BA50      4609          cmp.w     (A0),D5
00002A24  6714      4610          beq.s     word_test_6
                    4611   ; printf("Test failed at location %x!\n", test_addr);
00002A26  2F02      4612          move.l    D2,-(A7)
00002A28  4879 0000 4613          pea       @m68kde~1_150.L
00002A2C  4CA2      
00002A2E  4EB9 0000 4614          jsr       _printf
00002A32  30F2      
00002A34  504F      4615          addq.w    #8,A7
                    4616   ; return 0;
00002A36  4280      4617          clr.l     D0
00002A38  6006      4618          bra.s     word_test_8
                    4619   word_test_6:
00002A3A  5483      4620          addq.l    #2,D3
00002A3C  6090      4621          bra       word_test_1
                    4622   word_test_3:
                    4623   ; }
                    4624   ; }
                    4625   ; return 1;
00002A3E  7001      4626          moveq     #1,D0
                    4627   word_test_8:
00002A40  4CDF 003C 4628          movem.l   (A7)+,D2/D3/D4/D5
00002A44  4E5E      4629          unlk      A6
00002A46  4E75      4630          rts
                    4631   ; }
                    4632   ; int long_word_test (unsigned int long_word, unsigned int* addr_array) {
                    4633   _long_word_test:
00002A48  4E56 FFFC 4634          link      A6,#-4
00002A4C  48E7 3C00 4635          movem.l   D2/D3/D4/D5,-(A7)
00002A50  2A2E 0008 4636          move.l    8(A6),D5
                    4637   ; unsigned int start_addr = addr_array[0];
00002A54  206E 000C 4638          move.l    12(A6),A0
00002A58  2810      4639          move.l    (A0),D4
                    4640   ; unsigned int end_addr = addr_array[1];
00002A5A  206E 000C 4641          move.l    12(A6),A0
00002A5E  2D68 0004 4642          move.l    4(A0),-4(A6)
00002A62  FFFC      
                    4643   ; volatile unsigned int *test_addr = (volatile unsigned int *) start_addr;
00002A64  2404      4644          move.l    D4,D2
                    4645   ; int i;
                    4646   ; for (i = 0; i < (end_addr - start_addr); i=i+4) {
00002A66  4283      4647          clr.l     D3
                    4648   long_word_test_1:
00002A68  202E FFFC 4649          move.l    -4(A6),D0
00002A6C  9084      4650          sub.l     D4,D0
00002A6E  B680      4651          cmp.l     D0,D3
00002A70  6400 0058 4652          bhs       long_word_test_3
                    4653   ; test_addr = start_addr + i; 
00002A74  2004      4654          move.l    D4,D0
00002A76  D083      4655          add.l     D3,D0
00002A78  2400      4656          move.l    D0,D2
                    4657   ; *test_addr = long_word;
00002A7A  2042      4658          move.l    D2,A0
00002A7C  2085      4659          move.l    D5,(A0)
                    4660   ; if (i % 10000 == 0){
00002A7E  2F03      4661          move.l    D3,-(A7)
00002A80  4878 2710 4662          pea       10000
00002A84  4EB9 0000 4663          jsr       LDIV
00002A88  2F18      
00002A8A  202F 0004 4664          move.l    4(A7),D0
00002A8E  504F      4665          addq.w    #8,A7
00002A90  4A80      4666          tst.l     D0
00002A92  6618      4667          bne.s     long_word_test_4
                    4668   ; printf("Location %x, write data: %x, read data: %x\n", test_addr, long_word, *test_addr);
00002A94  2042      4669          move.l    D2,A0
00002A96  2F10      4670          move.l    (A0),-(A7)
00002A98  2F05      4671          move.l    D5,-(A7)
00002A9A  2F02      4672          move.l    D2,-(A7)
00002A9C  4879 0000 4673          pea       @m68kde~1_149.L
00002AA0  4C76      
00002AA2  4EB9 0000 4674          jsr       _printf
00002AA6  30F2      
00002AA8  DEFC 0010 4675          add.w     #16,A7
                    4676   long_word_test_4:
                    4677   ; }
                    4678   ; if (*test_addr != long_word) {
00002AAC  2042      4679          move.l    D2,A0
00002AAE  BA90      4680          cmp.l     (A0),D5
00002AB0  6714      4681          beq.s     long_word_test_6
                    4682   ; printf("Test failed at location %x!\n", test_addr);
00002AB2  2F02      4683          move.l    D2,-(A7)
00002AB4  4879 0000 4684          pea       @m68kde~1_150.L
00002AB8  4CA2      
00002ABA  4EB9 0000 4685          jsr       _printf
00002ABE  30F2      
00002AC0  504F      4686          addq.w    #8,A7
                    4687   ; return 0;
00002AC2  4280      4688          clr.l     D0
00002AC4  6006      4689          bra.s     long_word_test_8
                    4690   long_word_test_6:
00002AC6  5883      4691          addq.l    #4,D3
00002AC8  609E      4692          bra       long_word_test_1
                    4693   long_word_test_3:
                    4694   ; }
                    4695   ; }
                    4696   ; return 1;
00002ACA  7001      4697          moveq     #1,D0
                    4698   long_word_test_8:
00002ACC  4CDF 003C 4699          movem.l   (A7)+,D2/D3/D4/D5
00002AD0  4E5E      4700          unlk      A6
00002AD2  4E75      4701          rts
                    4702   ; }
                    4703   ; void MemoryTest(void)
                    4704   ; {
                    4705   _MemoryTest:
00002AD4  4E56 FFD8 4706          link      A6,#-40
00002AD8  48E7 3F3C 4707          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002ADC  45F9 0000 4708          lea       _printf.L,A2
00002AE0  30F2      
00002AE2  47EE FFF0 4709          lea       -16(A6),A3
00002AE6  4BF8 0C04 4710          lea       _Get1HexDigits.L,A5
                    4711   ; unsigned int *RamPtr, counter1=1 ;
00002AEA  2D7C 0000 4712          move.l    #1,-34(A6)
00002AEE  0001 FFDE 
                    4713   ; register unsigned int i ;
                    4714   ; unsigned int Start, End ;
                    4715   ; char c ;
                    4716   ; int data_length;
                    4717   ; int data_pattern;
                    4718   ; int test_type;
                    4719   ; unsigned int addr_array[2];
                    4720   ; unsigned int start_addr, end_addr;
                    4721   ; unsigned char byte;
                    4722   ; unsigned short word;
                    4723   ; unsigned int long_word;
                    4724   ; int result;
                    4725   ; /*printf("\r\nStart Address: ") ;
                    4726   ; Start = Get8HexDigits(0) ;
                    4727   ; printf("\r\nEnd Address: ") ;
                    4728   ; End = Get8HexDigits(0) ;*/
                    4729   ; printf("\r\nDo you want the data to be 1. bytes, 2. words, or 3. long words? Provide the integer below.\n");
00002AF2  4879 0000 4730          pea       @m68kde~1_151.L
00002AF6  4CC0      
00002AF8  4E92      4731          jsr       (A2)
00002AFA  584F      4732          addq.w    #4,A7
                    4733   ; //scanf("%x", &data_length);
                    4734   ; data_length = Get1HexDigits(0);
00002AFC  42A7      4735          clr.l     -(A7)
00002AFE  4E95      4736          jsr       (A5)
00002B00  584F      4737          addq.w    #4,A7
00002B02  2400      4738          move.l    D0,D2
                    4739   ; //printf("data_length: %d", data_length);
                    4740   ; printf("\r\nDo you want the data to be composed of (hex) 1. 0, 2. 5, 3. A, or 4. F? Provide the integer below.\n");
00002B04  4879 0000 4741          pea       @m68kde~1_152.L
00002B08  4D20      
00002B0A  4E92      4742          jsr       (A2)
00002B0C  584F      4743          addq.w    #4,A7
                    4744   ; //scanf("%x", &data_pattern);
                    4745   ; data_pattern = Get1HexDigits(0);
00002B0E  42A7      4746          clr.l     -(A7)
00002B10  4E95      4747          jsr       (A5)
00002B12  584F      4748          addq.w    #4,A7
00002B14  2800      4749          move.l    D0,D4
                    4750   ; //printf("data_pattern: %d", data_pattern);
                    4751   ; printf("\r\nDo you want to test 1. SRAM or 2. SDRAM? Provide the integer below.\n");
00002B16  4879 0000 4752          pea       @m68kde~1_153.L
00002B1A  4D86      
00002B1C  4E92      4753          jsr       (A2)
00002B1E  584F      4754          addq.w    #4,A7
                    4755   ; test_type = Get1HexDigits(0);
00002B20  42A7      4756          clr.l     -(A7)
00002B22  4E95      4757          jsr       (A5)
00002B24  584F      4758          addq.w    #4,A7
00002B26  2840      4759          move.l    D0,A4
                    4760   ; if (test_type == 1){
00002B28  200C      4761          move.l    A4,D0
00002B2A  0C80 0000 4762          cmp.l     #1,D0
00002B2E  0001      
00002B30  660C      4763          bne.s     MemoryTest_1
                    4764   ; ask_addr_range_sram(addr_array, data_length);
00002B32  2F02      4765          move.l    D2,-(A7)
00002B34  2F0B      4766          move.l    A3,-(A7)
00002B36  4EB8 25A4 4767          jsr       _ask_addr_range_sram
00002B3A  504F      4768          addq.w    #8,A7
00002B3C  6014      4769          bra.s     MemoryTest_3
                    4770   MemoryTest_1:
                    4771   ; } else if (test_type == 2) {
00002B3E  200C      4772          move.l    A4,D0
00002B40  0C80 0000 4773          cmp.l     #2,D0
00002B44  0002      
00002B46  660A      4774          bne.s     MemoryTest_3
                    4775   ; ask_addr_range_sdram(addr_array, data_length);
00002B48  2F02      4776          move.l    D2,-(A7)
00002B4A  2F0B      4777          move.l    A3,-(A7)
00002B4C  4EB8 26EA 4778          jsr       _ask_addr_range_sdram
00002B50  504F      4779          addq.w    #8,A7
                    4780   MemoryTest_3:
                    4781   ; }
                    4782   ; start_addr = addr_array[0];
00002B52  2D53 FFF8 4783          move.l    (A3),-8(A6)
                    4784   ; end_addr = addr_array[1];
00002B56  2D6B 0004 4785          move.l    4(A3),-4(A6)
00002B5A  FFFC      
                    4786   ; printf("Start address: %x\n", start_addr);
00002B5C  2F2E FFF8 4787          move.l    -8(A6),-(A7)
00002B60  4879 0000 4788          pea       @m68kde~1_154.L
00002B64  4DCE      
00002B66  4E92      4789          jsr       (A2)
00002B68  504F      4790          addq.w    #8,A7
                    4791   ; printf("End address: %x\n", end_addr);
00002B6A  2F2E FFFC 4792          move.l    -4(A6),-(A7)
00002B6E  4879 0000 4793          pea       @m68kde~1_155.L
00002B72  4DE2      
00002B74  4E92      4794          jsr       (A2)
00002B76  504F      4795          addq.w    #8,A7
                    4796   ; if (data_length == 1) {
00002B78  0C82 0000 4797          cmp.l     #1,D2
00002B7C  0001      
00002B7E  6600 0034 4798          bne       MemoryTest_5
                    4799   ; byte = byte_data (data_pattern);
00002B82  2F04      4800          move.l    D4,-(A7)
00002B84  4EB8 2830 4801          jsr       _byte_data
00002B88  584F      4802          addq.w    #4,A7
00002B8A  1E00      4803          move.b    D0,D7
                    4804   ; printf ("Test data: %x\n",byte);
00002B8C  CEBC 0000 4805          and.l     #255,D7
00002B90  00FF      
00002B92  2F07      4806          move.l    D7,-(A7)
00002B94  4879 0000 4807          pea       @m68kde~1_156.L
00002B98  4DF4      
00002B9A  4E92      4808          jsr       (A2)
00002B9C  504F      4809          addq.w    #8,A7
                    4810   ; result = byte_test(byte, addr_array);
00002B9E  2F0B      4811          move.l    A3,-(A7)
00002BA0  CEBC 0000 4812          and.l     #255,D7
00002BA4  00FF      
00002BA6  2F07      4813          move.l    D7,-(A7)
00002BA8  4EB8 2908 4814          jsr       _byte_test
00002BAC  504F      4815          addq.w    #8,A7
00002BAE  2600      4816          move.l    D0,D3
00002BB0  6000 0066 4817          bra       MemoryTest_9
                    4818   MemoryTest_5:
                    4819   ; } else if (data_length == 2) {
00002BB4  0C82 0000 4820          cmp.l     #2,D2
00002BB8  0002      
00002BBA  6600 0032 4821          bne       MemoryTest_7
                    4822   ; word = word_data (data_pattern);
00002BBE  2F04      4823          move.l    D4,-(A7)
00002BC0  4EB8 2876 4824          jsr       _word_data
00002BC4  584F      4825          addq.w    #4,A7
00002BC6  3C00      4826          move.w    D0,D6
                    4827   ; printf ("Test data: %x\n", word);
00002BC8  CCBC 0000 4828          and.l     #65535,D6
00002BCC  FFFF      
00002BCE  2F06      4829          move.l    D6,-(A7)
00002BD0  4879 0000 4830          pea       @m68kde~1_156.L
00002BD4  4DF4      
00002BD6  4E92      4831          jsr       (A2)
00002BD8  504F      4832          addq.w    #8,A7
                    4833   ; result = word_test (word, addr_array);
00002BDA  2F0B      4834          move.l    A3,-(A7)
00002BDC  CCBC 0000 4835          and.l     #65535,D6
00002BE0  FFFF      
00002BE2  2F06      4836          move.l    D6,-(A7)
00002BE4  4EB8 29A8 4837          jsr       _word_test
00002BE8  504F      4838          addq.w    #8,A7
00002BEA  2600      4839          move.l    D0,D3
00002BEC  602A      4840          bra.s     MemoryTest_9
                    4841   MemoryTest_7:
                    4842   ; } else if (data_length == 3) {
00002BEE  0C82 0000 4843          cmp.l     #3,D2
00002BF2  0003      
00002BF4  6622      4844          bne.s     MemoryTest_9
                    4845   ; long_word = long_word_data (data_pattern);
00002BF6  2F04      4846          move.l    D4,-(A7)
00002BF8  4EB8 28BE 4847          jsr       _long_word_data
00002BFC  584F      4848          addq.w    #4,A7
00002BFE  2A00      4849          move.l    D0,D5
                    4850   ; printf ("Test data: %x\n", long_word);
00002C00  2F05      4851          move.l    D5,-(A7)
00002C02  4879 0000 4852          pea       @m68kde~1_156.L
00002C06  4DF4      
00002C08  4E92      4853          jsr       (A2)
00002C0A  504F      4854          addq.w    #8,A7
                    4855   ; result = long_word_test (long_word, addr_array);
00002C0C  2F0B      4856          move.l    A3,-(A7)
00002C0E  2F05      4857          move.l    D5,-(A7)
00002C10  4EB8 2A48 4858          jsr       _long_word_test
00002C14  504F      4859          addq.w    #8,A7
00002C16  2600      4860          move.l    D0,D3
                    4861   MemoryTest_9:
                    4862   ; }
                    4863   ; if (result == 1) {
00002C18  0C83 0000 4864          cmp.l     #1,D3
00002C1C  0001      
00002C1E  660A      4865          bne.s     MemoryTest_11
                    4866   ; printf("Test passed!\n");
00002C20  4879 0000 4867          pea       @m68kde~1_157.L
00002C24  4E04      
00002C26  4E92      4868          jsr       (A2)
00002C28  584F      4869          addq.w    #4,A7
                    4870   MemoryTest_11:
00002C2A  4CDF 3CFC 4871          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002C2E  4E5E      4872          unlk      A6
00002C30  4E75      4873          rts
                    4874   ; }
                    4875   ; }
                    4876   ; void main(void)
                    4877   ; {
                    4878   _main:
00002C32  4E56 FFF4 4879          link      A6,#-12
00002C36  48E7 3030 4880          movem.l   D2/D3/A2/A3,-(A7)
00002C3A  45F8 0A30 4881          lea       _InstallExceptionHandler.L,A2
00002C3E  47F9 0000 4882          lea       _printf.L,A3
00002C42  30F2      
                    4883   ; char c ;
                    4884   ; int i, j ;
                    4885   ; char *BugMessage = "DE1-68k Bug V1.77";
00002C44  41F9 0000 4886          lea       @m68kde~1_158.L,A0
00002C48  4E12      
00002C4A  2608      4887          move.l    A0,D3
                    4888   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002C4C  41F9 0000 4889          lea       @m68kde~1_159.L,A0
00002C50  4E24      
00002C52  2D48 FFFC 4890          move.l    A0,-4(A6)
                    4891   ; KillAllBreakPoints() ;
00002C56  4EB8 1C50 4892          jsr       _KillAllBreakPoints
                    4893   ; i = x = y = z = PortA_Count = 0;
00002C5A  42B9 0B00 4894          clr.l     _PortA_Count.L
00002C5E  00D4      
00002C60  42B9 0B00 4895          clr.l     _z.L
00002C64  00D0      
00002C66  42B9 0B00 4896          clr.l     _y.L
00002C6A  00CC      
00002C6C  42B9 0B00 4897          clr.l     _x.L
00002C70  00C8      
00002C72  4282      4898          clr.l     D2
                    4899   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002C74  42B9 0B00 4900          clr.l     _GoFlag.L
00002C78  00DC      
00002C7A  42B9 0B00 4901          clr.l     _Trace.L
00002C7E  00D8      
                    4902   ; Echo = 1 ;
00002C80  23FC 0000 4903          move.l    #1,_Echo.L
00002C84  0001 0B00 
00002C88  00E0      
                    4904   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002C8A  42B9 0B00 4905          clr.l     _d7.L
00002C8E  0100      
00002C90  42B9 0B00 4906          clr.l     _d6.L
00002C94  00FC      
00002C96  42B9 0B00 4907          clr.l     _d5.L
00002C9A  00F8      
00002C9C  42B9 0B00 4908          clr.l     _d4.L
00002CA0  00F4      
00002CA2  42B9 0B00 4909          clr.l     _d3.L
00002CA6  00F0      
00002CA8  42B9 0B00 4910          clr.l     _d2.L
00002CAC  00EC      
00002CAE  42B9 0B00 4911          clr.l     _d1.L
00002CB2  00E8      
00002CB4  42B9 0B00 4912          clr.l     _d0.L
00002CB8  00E4      
                    4913   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002CBA  42B9 0B00 4914          clr.l     _a6.L
00002CBE  011C      
00002CC0  42B9 0B00 4915          clr.l     _a5.L
00002CC4  0118      
00002CC6  42B9 0B00 4916          clr.l     _a4.L
00002CCA  0114      
00002CCC  42B9 0B00 4917          clr.l     _a3.L
00002CD0  0110      
00002CD2  42B9 0B00 4918          clr.l     _a2.L
00002CD6  010C      
00002CD8  42B9 0B00 4919          clr.l     _a1.L
00002CDC  0108      
00002CDE  42B9 0B00 4920          clr.l     _a0.L
00002CE2  0104      
                    4921   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002CE4  23FC 0800 4922          move.l    #134217728,_PC.L
00002CE8  0000 0B00 
00002CEC  0120      
00002CEE  23FC 0C00 4923          move.l    #201326592,_SSP.L
00002CF2  0000 0B00 
00002CF6  0124      
00002CF8  23FC 0C00 4924          move.l    #201326592,_USP.L
00002CFC  0000 0B00 
00002D00  0128      
                    4925   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002D02  33FC 2000 4926          move.w    #8192,_SR.L
00002D06  0B00 012C 
                    4927   ; // Initialise Breakpoint variables
                    4928   ; for(i = 0; i < 8; i++)  {
00002D0A  4282      4929          clr.l     D2
                    4930   main_1:
00002D0C  0C82 0000 4931          cmp.l     #8,D2
00002D10  0008      
00002D12  6C00 004C 4932          bge       main_3
                    4933   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002D16  2002      4934          move.l    D2,D0
00002D18  E588      4935          lsl.l     #2,D0
00002D1A  41F9 0B00 4936          lea       _BreakPointAddress.L,A0
00002D1E  012E      
00002D20  42B0 0800 4937          clr.l     0(A0,D0.L)
                    4938   ; WatchPointAddress[i] = 0 ;
00002D24  2002      4939          move.l    D2,D0
00002D26  E588      4940          lsl.l     #2,D0
00002D28  41F9 0B00 4941          lea       _WatchPointAddress.L,A0
00002D2C  0182      
00002D2E  42B0 0800 4942          clr.l     0(A0,D0.L)
                    4943   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002D32  2002      4944          move.l    D2,D0
00002D34  E388      4945          lsl.l     #1,D0
00002D36  41F9 0B00 4946          lea       _BreakPointInstruction.L,A0
00002D3A  014E      
00002D3C  4270 0800 4947          clr.w     0(A0,D0.L)
                    4948   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002D40  2002      4949          move.l    D2,D0
00002D42  E588      4950          lsl.l     #2,D0
00002D44  41F9 0B00 4951          lea       _BreakPointSetOrCleared.L,A0
00002D48  015E      
00002D4A  42B0 0800 4952          clr.l     0(A0,D0.L)
                    4953   ; WatchPointSetOrCleared[i] = 0;
00002D4E  2002      4954          move.l    D2,D0
00002D50  E588      4955          lsl.l     #2,D0
00002D52  41F9 0B00 4956          lea       _WatchPointSetOrCleared.L,A0
00002D56  01A2      
00002D58  42B0 0800 4957          clr.l     0(A0,D0.L)
00002D5C  5282      4958          addq.l    #1,D2
00002D5E  60AC      4959          bra       main_1
                    4960   main_3:
                    4961   ; }
                    4962   ; Init_RS232() ;     // initialise the RS232 port
00002D60  4EB8 0B12 4963          jsr       _Init_RS232
                    4964   ; Init_LCD() ;
00002D64  4EB8 095E 4965          jsr       _Init_LCD
                    4966   ; for( i = 32; i < 48; i++)
00002D68  7420      4967          moveq     #32,D2
                    4968   main_4:
00002D6A  0C82 0000 4969          cmp.l     #48,D2
00002D6E  0030      
00002D70  6C0E      4970          bge.s     main_6
                    4971   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002D72  2F02      4972          move.l    D2,-(A7)
00002D74  4878 24C8 4973          pea       _UnhandledTrap.L
00002D78  4E92      4974          jsr       (A2)
00002D7A  504F      4975          addq.w    #8,A7
00002D7C  5282      4976          addq.l    #1,D2
00002D7E  60EA      4977          bra       main_4
                    4978   main_6:
                    4979   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002D80  4878 002F 4980          pea       47
00002D84  4878 21A2 4981          pea       _menu.L
00002D88  4E92      4982          jsr       (A2)
00002D8A  504F      4983          addq.w    #8,A7
                    4984   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002D8C  4878 0019 4985          pea       25
00002D90  4878 246E 4986          pea       _UnhandledIRQ1.L
00002D94  4E92      4987          jsr       (A2)
00002D96  504F      4988          addq.w    #8,A7
                    4989   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002D98  4878 001A 4990          pea       26
00002D9C  4878 247A 4991          pea       _UnhandledIRQ2.L
00002DA0  4E92      4992          jsr       (A2)
00002DA2  504F      4993          addq.w    #8,A7
                    4994   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002DA4  4878 001B 4995          pea       27
00002DA8  4878 2486 4996          pea       _UnhandledIRQ3.L
00002DAC  4E92      4997          jsr       (A2)
00002DAE  504F      4998          addq.w    #8,A7
                    4999   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002DB0  4878 001C 5000          pea       28
00002DB4  4878 2492 5001          pea       _UnhandledIRQ4.L
00002DB8  4E92      5002          jsr       (A2)
00002DBA  504F      5003          addq.w    #8,A7
                    5004   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002DBC  4878 001D 5005          pea       29
00002DC0  4878 249E 5006          pea       _UnhandledIRQ5.L
00002DC4  4E92      5007          jsr       (A2)
00002DC6  504F      5008          addq.w    #8,A7
                    5009   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002DC8  4878 001E 5010          pea       30
00002DCC  4878 24AA 5011          pea       _UnhandledIRQ6.L
00002DD0  4E92      5012          jsr       (A2)
00002DD2  504F      5013          addq.w    #8,A7
                    5014   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002DD4  4878 001F 5015          pea       31
00002DD8  4878 24BC 5016          pea       _UnhandledIRQ7.L
00002DDC  4E92      5017          jsr       (A2)
00002DDE  504F      5018          addq.w    #8,A7
                    5019   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002DE0  4878 002E 5020          pea       46
00002DE4  4878 1EDE 5021          pea       _HandleBreakPoint.L
00002DE8  4E92      5022          jsr       (A2)
00002DEA  504F      5023          addq.w    #8,A7
                    5024   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002DEC  4878 001D 5025          pea       29
00002DF0  4878 15BE 5026          pea       _DumpRegistersandPause.L
00002DF4  4E92      5027          jsr       (A2)
00002DF6  504F      5028          addq.w    #8,A7
                    5029   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002DF8  4878 0002 5030          pea       2
00002DFC  4878 24D6 5031          pea       _BusError.L
00002E00  4E92      5032          jsr       (A2)
00002E02  504F      5033          addq.w    #8,A7
                    5034   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002E04  4878 0003 5035          pea       3
00002E08  4878 24E4 5036          pea       _AddressError.L
00002E0C  4E92      5037          jsr       (A2)
00002E0E  504F      5038          addq.w    #8,A7
                    5039   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002E10  4878 0004 5040          pea       4
00002E14  4878 24F2 5041          pea       _IllegalInstruction.L
00002E18  4E92      5042          jsr       (A2)
00002E1A  504F      5043          addq.w    #8,A7
                    5044   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002E1C  4878 0005 5045          pea       5
00002E20  4878 2500 5046          pea       _Dividebyzero.L
00002E24  4E92      5047          jsr       (A2)
00002E26  504F      5048          addq.w    #8,A7
                    5049   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002E28  4878 0006 5050          pea       6
00002E2C  4878 250E 5051          pea       _Check.L
00002E30  4E92      5052          jsr       (A2)
00002E32  504F      5053          addq.w    #8,A7
                    5054   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002E34  4878 0007 5055          pea       7
00002E38  4878 251C 5056          pea       _Trapv.L
00002E3C  4E92      5057          jsr       (A2)
00002E3E  504F      5058          addq.w    #8,A7
                    5059   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002E40  4878 0008 5060          pea       8
00002E44  4878 252A 5061          pea       _PrivError.L
00002E48  4E92      5062          jsr       (A2)
00002E4A  504F      5063          addq.w    #8,A7
                    5064   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002E4C  4878 000F 5065          pea       15
00002E50  4878 2538 5066          pea       _UnitIRQ.L
00002E54  4E92      5067          jsr       (A2)
00002E56  504F      5068          addq.w    #8,A7
                    5069   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002E58  4878 0018 5070          pea       24
00002E5C  4878 250E 5071          pea       _Check.L
00002E60  4E92      5072          jsr       (A2)
00002E62  504F      5073          addq.w    #8,A7
                    5074   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002E64  4EB8 0BA6 5075          jsr       _FlushKeyboard
                    5076   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002E68  4239 0040 5077          clr.b     4194314
00002E6C  000A      
                    5078   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5079   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5080   main_7:
00002E6E  1039 0040 5081          move.b    4194306,D0
00002E72  0002      
00002E74  C03C 0002 5082          and.b     #2,D0
00002E78  0C00 0002 5083          cmp.b     #2,D0
00002E7C  662A      5084          bne.s     main_9
                    5085   ; LoadFromFlashChip();
00002E7E  4EB8 10FA 5086          jsr       _LoadFromFlashChip
                    5087   ; printf("\r\nRunning.....") ;
00002E82  4879 0000 5088          pea       @m68kde~1_160.L
00002E86  4E42      
00002E88  4E93      5089          jsr       (A3)
00002E8A  584F      5090          addq.w    #4,A7
                    5091   ; Oline1("Running.....") ;
00002E8C  4879 0000 5092          pea       @m68kde~1_161.L
00002E90  4E52      
00002E92  4EB8 0A02 5093          jsr       _Oline1
00002E96  584F      5094          addq.w    #4,A7
                    5095   ; GoFlag = 1;
00002E98  23FC 0000 5096          move.l    #1,_GoFlag.L
00002E9C  0001 0B00 
00002EA0  00DC      
                    5097   ; go() ;
00002EA2  4EB8 08B8 5098          jsr       _go
00002EA6  60C6      5099          bra       main_7
                    5100   main_9:
                    5101   ; }
                    5102   ; // otherwise start the debug monitor
                    5103   ; Oline0(BugMessage) ;
00002EA8  2F03      5104          move.l    D3,-(A7)
00002EAA  4EB8 09D4 5105          jsr       _Oline0
00002EAE  584F      5106          addq.w    #4,A7
                    5107   ; Oline1("By: PJ Davies") ;
00002EB0  4879 0000 5108          pea       @m68kde~1_162.L
00002EB4  4E60      
00002EB6  4EB8 0A02 5109          jsr       _Oline1
00002EBA  584F      5110          addq.w    #4,A7
                    5111   ; printf("\r\n%s", BugMessage) ;
00002EBC  2F03      5112          move.l    D3,-(A7)
00002EBE  4879 0000 5113          pea       @m68kde~1_163.L
00002EC2  4E6E      
00002EC4  4E93      5114          jsr       (A3)
00002EC6  504F      5115          addq.w    #8,A7
                    5116   ; printf("\r\n%s", CopyrightMessage) ;
00002EC8  2F2E FFFC 5117          move.l    -4(A6),-(A7)
00002ECC  4879 0000 5118          pea       @m68kde~1_163.L
00002ED0  4E6E      
00002ED2  4E93      5119          jsr       (A3)
00002ED4  504F      5120          addq.w    #8,A7
                    5121   ; printf("\r\nStudent Name: Shidi Xi") ;
00002ED6  4879 0000 5122          pea       @m68kde~1_164.L
00002EDA  4E74      
00002EDC  4E93      5123          jsr       (A3)
00002EDE  584F      5124          addq.w    #4,A7
                    5125   ; printf("\r\nStudent Number: 90506643");
00002EE0  4879 0000 5126          pea       @m68kde~1_165.L
00002EE4  4E8E      
00002EE6  4E93      5127          jsr       (A3)
00002EE8  584F      5128          addq.w    #4,A7
                    5129   ; menu();
00002EEA  4EB8 21A2 5130          jsr       _menu
00002EEE  4CDF 0C0C 5131          movem.l   (A7)+,D2/D3/A2/A3
00002EF2  4E5E      5132          unlk      A6
00002EF4  4E75      5133          rts
                    5134   ; }
                    5135   _strcpy:
00002EF6  206F 0004 5136          move.l    (4,A7),A0
00002EFA  226F 0008 5137          move.l    (8,A7),A1
00002EFE  2008      5138          move.l    A0,D0
                    5139   strcpy_1:
00002F00  10D9      5140          move.b    (A1)+,(A0)+
00002F02  66FC      5141          bne       strcpy_1
00002F04  4E75      5142          rts
                    5143   ULDIV:
00002F06  4E56 0000 5144          link    A6,#0
00002F0A  48E7 C000 5145          movem.l D0/D1,-(A7)
00002F0E  222E 0008 5146          move.l  8(A6),D1
00002F12  202E 000C 5147          move.l  12(A6),D0
00002F16  6036      5148          bra.s   ldiv_3
                    5149   LDIV:
00002F18  4E56 0000 5150          link    A6,#0
00002F1C  48E7 C000 5151          movem.l D0/D1,-(A7)
00002F20  222E 0008 5152          move.l  8(A6),D1
00002F24  202E 000C 5153          move.l  12(A6),D0
00002F28  4A80      5154          tst.l   D0
00002F2A  6A0E      5155          bpl.s   ldiv_1
00002F2C  4480      5156          neg.l   D0
00002F2E  4A81      5157          tst.l   D1
00002F30  6A14      5158          bpl.s   ldiv_2
00002F32  4481      5159          neg.l   D1
00002F34  612A      5160          bsr.s   dodiv
00002F36  4481      5161          neg.l   D1
00002F38  6016      5162          bra.s   ldiv_4
                    5163   ldiv_1:
00002F3A  4A81      5164          tst.l   D1
00002F3C  6A10      5165          bpl.s   ldiv_3
00002F3E  4481      5166          neg.l   D1
00002F40  611E      5167          bsr.s   dodiv
00002F42  4480      5168          neg.l   D0
00002F44  600A      5169          bra.s   ldiv_4
                    5170   ldiv_2:
00002F46  6118      5171          bsr.s   dodiv
00002F48  4480      5172          neg.l   D0
00002F4A  4481      5173          neg.l   D1
00002F4C  6002      5174          bra.s   ldiv_4
                    5175   ldiv_3:
00002F4E  6110      5176          bsr.s   dodiv
                    5177   ldiv_4:
00002F50  2D40 0008 5178          move.l  D0,8(A6)
00002F54  2D41 000C 5179          move.l  D1,12(A6)
00002F58  4CDF 0003 5180          movem.l (A7)+,D0/D1
00002F5C  4E5E      5181          unlk    A6
00002F5E  4E75      5182          rts
                    5183   dodiv:
00002F60  0C81 0000 5184          cmpi.l  #$FFFF,D1
00002F64  FFFF      
00002F66  6236      5185          bhi.s   dodiv_2
00002F68  0C80 0000 5186          cmpi.l  #$FFFF,D0
00002F6C  FFFF      
00002F6E  6210      5187          bhi.s   dodiv_1
00002F70  80C1      5188          divu    D1,D0
00002F72  2200      5189          move.l  D0,D1
00002F74  4241      5190          clr.w   D1
00002F76  4841      5191          swap    D1
00002F78  0280 0000 5192          andi.l  #$FFFF,D0
00002F7C  FFFF      
00002F7E  4E75      5193          rts
                    5194   dodiv_1:
00002F80  48A7 A000 5195          movem.w D0/D2,-(A7)
00002F84  4240      5196          clr.w   D0
00002F86  4840      5197          swap    D0
00002F88  80C1      5198          divu    D1,D0
00002F8A  3400      5199          move.w  D0,D2
00002F8C  301F      5200          move.w  (A7)+,D0
00002F8E  80C1      5201          divu    D1,D0
00002F90  4840      5202          swap    D0
00002F92  4281      5203          clr.l   D1
00002F94  3200      5204          move.w  D0,D1
00002F96  3002      5205          move.w  D2,D0
00002F98  4840      5206          swap    D0
00002F9A  341F      5207          move.w  (A7)+,D2
00002F9C  4E75      5208          rts
                    5209   dodiv_2:
00002F9E  48E7 3800 5210          movem.l D2/D3/D4,-(A7)
00002FA2  2401      5211          move.l  D1,D2
00002FA4  4242      5212          clr.w   D2
00002FA6  4842      5213          swap    D2
00002FA8  5282      5214          addq.l  #1,D2
00002FAA  2600      5215          move.l  D0,D3
00002FAC  2801      5216          move.l  D1,D4
00002FAE  2202      5217          move.l  D2,D1
00002FB0  61CE      5218          bsr.s   dodiv_1
00002FB2  2204      5219          move.l  D4,D1
00002FB4  82C2      5220          divu    D2,D1
00002FB6  80C1      5221          divu    D1,D0
00002FB8  0280 0000 5222          andi.l  #$FFFF,D0
00002FBC  FFFF      
                    5223   dodiv_3:
00002FBE  2204      5224          move.l  D4,D1
00002FC0  2404      5225          move.l  D4,D2
00002FC2  4842      5226          swap    D2
00002FC4  C2C0      5227          mulu    D0,D1
00002FC6  C4C0      5228          mulu    D0,D2
00002FC8  4842      5229          swap    D2
00002FCA  D282      5230          add.l   D2,D1
00002FCC  9283      5231          sub.l   D3,D1
00002FCE  620A      5232          bhi.s   dodiv_4
00002FD0  4481      5233          neg.l   D1
00002FD2  B881      5234          cmp.l   D1,D4
00002FD4  6208      5235          bhi.s   dodiv_5
00002FD6  5280      5236          addq.l  #1,D0
00002FD8  60E4      5237          bra.s   dodiv_3
                    5238   dodiv_4:
00002FDA  5380      5239          subq.l  #1,D0
00002FDC  60E0      5240          bra.s   dodiv_3
                    5241   dodiv_5:
00002FDE  4CDF 001C 5242          movem.l (A7)+,D2/D3/D4
00002FE2  4E75      5243          rts
                    5244   _putch:
00002FE4  4E56 0000 5245          link      A6,#0
00002FE8  48E7 2000 5246          movem.l   D2,-(A7)
00002FEC  242E 0008 5247          move.l    8(A6),D2
00002FF0  0C82 0000 5248          cmp.l     #10,D2
00002FF4  000A      
00002FF6  660A      5249          bne.s     putch_1
00002FF8  4878 000D 5250          pea       13
00002FFC  6100 DB3E 5251          bsr       __putch
00003000  584F      5252          addq.w    #4,A7
                    5253   putch_1:
00003002  2F02      5254          move.l    D2,-(A7)
00003004  6100 DB36 5255          bsr       __putch
00003008  584F      5256          addq.w    #4,A7
0000300A  2002      5257          move.l    D2,D0
0000300C  4CDF 0004 5258          movem.l   (A7)+,D2
00003010  4E5E      5259          unlk      A6
00003012  4E75      5260          rts
                    5261   _getch:
00003014  48E7 2000 5262          movem.l   D2,-(A7)
00003018  2439 0B00 5263          move.l    __ungetbuf,D2
0000301C  00C0      
0000301E  2039 0B00 5264          move.l    __ungetbuf,D0
00003022  00C0      
00003024  0C80 FFFF 5265          cmp.l     #-1,D0
00003028  FFFF      
0000302A  670C      5266          beq.s     getch_1
0000302C  23FC FFFF 5267          move.l    #-1,__ungetbuf
00003030  FFFF 0B00 
00003034  00C0      
00003036  6010      5268          bra.s     getch_3
                    5269   getch_1:
00003038  6100 DB2E 5270          bsr       __getch
0000303C  2400      5271          move.l    D0,D2
0000303E  0C80 0000 5272          cmp.l     #13,D0
00003042  000D      
00003044  6602      5273          bne.s     getch_3
00003046  740A      5274          moveq     #10,D2
                    5275   getch_3:
00003048  2002      5276          move.l    D2,D0
0000304A  4CDF 0004 5277          movem.l   (A7)+,D2
0000304E  4E75      5278          rts
                    5279   _tolower:
00003050  4E56 0000 5280          link      A6,#0
00003054  48E7 2000 5281          movem.l   D2,-(A7)
00003058  242E 0008 5282          move.l    8(A6),D2
0000305C  0C82 0000 5283          cmp.l     #65,D2
00003060  0041      
00003062  6D0E      5284          blt.s     tolower_1
00003064  0C82 0000 5285          cmp.l     #90,D2
00003068  005A      
0000306A  6E06      5286          bgt.s     tolower_1
0000306C  84BC 0000 5287          or.l      #32,D2
00003070  0020      
                    5288   tolower_1:
00003072  2002      5289          move.l    D2,D0
00003074  4CDF 0004 5290          movem.l   (A7)+,D2
00003078  4E5E      5291          unlk      A6
0000307A  4E75      5292          rts
                    5293   _sprintf:
0000307C  4E56 FFFC 5294          link      A6,#-4
00003080  48E7 2000 5295          movem.l   D2,-(A7)
00003084  41EE 000C 5296          lea       12(A6),A0
00003088  5848      5297          addq.w    #4,A0
0000308A  2408      5298          move.l    A0,D2
0000308C  2F02      5299          move.l    D2,-(A7)
0000308E  2F2E 000C 5300          move.l    12(A6),-(A7)
00003092  2F2E 0008 5301          move.l    8(A6),-(A7)
00003096  6100 013E 5302          bsr       _vsprintf
0000309A  DEFC 000C 5303          add.w     #12,A7
0000309E  2D40 FFFC 5304          move.l    D0,-4(A6)
000030A2  4282      5305          clr.l     D2
000030A4  202E FFFC 5306          move.l    -4(A6),D0
000030A8  4CDF 0004 5307          movem.l   (A7)+,D2
000030AC  4E5E      5308          unlk      A6
000030AE  4E75      5309          rts
                    5310   _strcat:
000030B0  206F 0004 5311          move.l    (4,A7),A0	
000030B4  226F 0008 5312          move.l    (8,A7),A1	
000030B8  2008      5313          move.l    A0,D0		
                    5314   strcat_0:
000030BA  4A18      5315          tst.b     (A0)+
000030BC  66FC      5316          bne       strcat_0
000030BE  5348      5317          subq      #1,A0
                    5318   strcat_1:
000030C0  10D9      5319          move.b    (A1)+,(A0)+
000030C2  66FC      5320          bne       strcat_1
000030C4  4E75      5321          rts
                    5322   _toupper:
000030C6  4E56 0000 5323          link      A6,#0
000030CA  48E7 2000 5324          movem.l   D2,-(A7)
000030CE  242E 0008 5325          move.l    8(A6),D2
000030D2  0C82 0000 5326          cmp.l     #97,D2
000030D6  0061      
000030D8  6D0E      5327          blt.s     toupper_1
000030DA  0C82 0000 5328          cmp.l     #122,D2
000030DE  007A      
000030E0  6E06      5329          bgt.s     toupper_1
000030E2  C4BC 0000 5330          and.l     #95,D2
000030E6  005F      
                    5331   toupper_1:
000030E8  2002      5332          move.l    D2,D0
000030EA  4CDF 0004 5333          movem.l   (A7)+,D2
000030EE  4E5E      5334          unlk      A6
000030F0  4E75      5335          rts
                    5336   _printf:
000030F2  4E56 FFFC 5337          link      A6,#-4
000030F6  48E7 2000 5338          movem.l   D2,-(A7)
000030FA  41EE 0008 5339          lea       8(A6),A0
000030FE  5848      5340          addq.w    #4,A0
00003100  2408      5341          move.l    A0,D2
00003102  2F02      5342          move.l    D2,-(A7)
00003104  2F2E 0008 5343          move.l    8(A6),-(A7)
00003108  42A7      5344          clr.l     -(A7)
0000310A  6100 00CA 5345          bsr       _vsprintf
0000310E  DEFC 000C 5346          add.w     #12,A7
00003112  2D40 FFFC 5347          move.l    D0,-4(A6)
00003116  4282      5348          clr.l     D2
00003118  202E FFFC 5349          move.l    -4(A6),D0
0000311C  4CDF 0004 5350          movem.l   (A7)+,D2
00003120  4E5E      5351          unlk      A6
00003122  4E75      5352          rts
                    5353   @vsprintf_copy:
00003124  4E56 0000 5354          link      A6,#0
00003128  206E 0008 5355          move.l    8(A6),A0
0000312C  4A90      5356          tst.l     (A0)
0000312E  6710      5357          beq.s     @vsprintf_copy_1
00003130  202E 000C 5358          move.l    12(A6),D0
00003134  206E 0008 5359          move.l    8(A6),A0
00003138  2250      5360          move.l    (A0),A1
0000313A  5290      5361          addq.l    #1,(A0)
0000313C  1280      5362          move.b    D0,(A1)
0000313E  600A      5363          bra.s     @vsprintf_copy_2
                    5364   @vsprintf_copy_1:
00003140  2F2E 000C 5365          move.l    12(A6),-(A7)
00003144  6100 FE9E 5366          bsr       _putch
00003148  584F      5367          addq.w    #4,A7
                    5368   @vsprintf_copy_2:
0000314A  4E5E      5369          unlk      A6
0000314C  4E75      5370          rts
                    5371   @vsprintf_getval:
0000314E  4E56 0000 5372          link      A6,#0
00003152  48E7 3000 5373          movem.l   D2/D3,-(A7)
00003156  242E 0008 5374          move.l    8(A6),D2
0000315A  4283      5375          clr.l     D3
0000315C  2042      5376          move.l    D2,A0
0000315E  2050      5377          move.l    (A0),A0
00003160  1010      5378          move.b    (A0),D0
00003162  4880      5379          ext.w     D0
00003164  48C0      5380          ext.l     D0
00003166  0C80 0000 5381          cmp.l     #42,D0
0000316A  002A      
0000316C  6612      5382          bne.s     @vsprintf_getval_1
0000316E  206E 000C 5383          move.l    12(A6),A0
00003172  2250      5384          move.l    (A0),A1
00003174  5890      5385          addq.l    #4,(A0)
00003176  2611      5386          move.l    (A1),D3
00003178  2042      5387          move.l    D2,A0
0000317A  5290      5388          addq.l    #1,(A0)
0000317C  6000 004E 5389          bra       @vsprintf_getval_5
                    5390   @vsprintf_getval_1:
00003180  2042      5391          move.l    D2,A0
00003182  2050      5392          move.l    (A0),A0
00003184  1010      5393          move.b    (A0),D0
00003186  4880      5394          ext.w     D0
00003188  48C0      5395          ext.l     D0
0000318A  0C80 0000 5396          cmp.l     #48,D0
0000318E  0030      
00003190  6D00 003A 5397          blt       @vsprintf_getval_5
00003194  2042      5398          move.l    D2,A0
00003196  2050      5399          move.l    (A0),A0
00003198  1010      5400          move.b    (A0),D0
0000319A  4880      5401          ext.w     D0
0000319C  48C0      5402          ext.l     D0
0000319E  0C80 0000 5403          cmp.l     #57,D0
000031A2  0039      
000031A4  6E26      5404          bgt.s     @vsprintf_getval_5
000031A6  2F03      5405          move.l    D3,-(A7)
000031A8  4878 000A 5406          pea       10
000031AC  6100 07F4 5407          bsr       LMUL
000031B0  2017      5408          move.l    (A7),D0
000031B2  504F      5409          addq.w    #8,A7
000031B4  2042      5410          move.l    D2,A0
000031B6  2250      5411          move.l    (A0),A1
000031B8  5290      5412          addq.l    #1,(A0)
000031BA  1211      5413          move.b    (A1),D1
000031BC  4881      5414          ext.w     D1
000031BE  48C1      5415          ext.l     D1
000031C0  D081      5416          add.l     D1,D0
000031C2  0480 0000 5417          sub.l     #48,D0
000031C6  0030      
000031C8  2600      5418          move.l    D0,D3
000031CA  60B4      5419          bra       @vsprintf_getval_1
                    5420   @vsprintf_getval_5:
000031CC  2003      5421          move.l    D3,D0
000031CE  4CDF 000C 5422          movem.l   (A7)+,D2/D3
000031D2  4E5E      5423          unlk      A6
000031D4  4E75      5424          rts
                    5425   _vsprintf:
000031D6  4E56 FFCC 5426          link      A6,#-52
000031DA  48E7 3F3C 5427          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000031DE  45EE 0008 5428          lea       8(A6),A2
000031E2  47F8 3124 5429          lea       @vsprintf_copy,A3
000031E6  49F9 0000 5430          lea       _ultoa,A4
000031EA  392E      
000031EC  4286      5431          clr.l     D6
                    5432   vsprintf_1:
000031EE  206E 000C 5433          move.l    12(A6),A0
000031F2  4A10      5434          tst.b     (A0)
000031F4  6700 0624 5435          beq       vsprintf_3
000031F8  206E 000C 5436          move.l    12(A6),A0
000031FC  1010      5437          move.b    (A0),D0
000031FE  4880      5438          ext.w     D0
00003200  48C0      5439          ext.l     D0
00003202  0C80 0000 5440          cmp.l     #37,D0
00003206  0025      
00003208  671C      5441          beq.s     vsprintf_4
0000320A  206E 000C 5442          move.l    12(A6),A0
0000320E  52AE 000C 5443          addq.l    #1,12(A6)
00003212  1210      5444          move.b    (A0),D1
00003214  4881      5445          ext.w     D1
00003216  48C1      5446          ext.l     D1
00003218  2F01      5447          move.l    D1,-(A7)
0000321A  2F0A      5448          move.l    A2,-(A7)
0000321C  4E93      5449          jsr       (A3)
0000321E  504F      5450          addq.w    #8,A7
00003220  5286      5451          addq.l    #1,D6
00003222  6000 05F2 5452          bra       vsprintf_2
                    5453   vsprintf_4:
00003226  52AE 000C 5454          addq.l    #1,12(A6)
0000322A  422E FFD3 5455          clr.b     -45(A6)
0000322E  422E FFD2 5456          clr.b     -46(A6)
00003232  422E FFD0 5457          clr.b     -48(A6)
00003236  422E FFCF 5458          clr.b     -49(A6)
0000323A  422E FFCE 5459          clr.b     -50(A6)
0000323E  422E FFCD 5460          clr.b     -51(A6)
00003242  42AE FFFC 5461          clr.l     -4(A6)
00003246  7AFF      5462          moveq     #-1,D5
00003248  41EE FFDC 5463          lea       -36(A6),A0
0000324C  2608      5464          move.l    A0,D3
0000324E  2408      5465          move.l    A0,D2
                    5466   vsprintf_6:
00003250  206E 000C 5467          move.l    12(A6),A0
00003254  1010      5468          move.b    (A0),D0
00003256  4880      5469          ext.w     D0
00003258  48C0      5470          ext.l     D0
0000325A  0C80 0000 5471          cmp.l     #43,D0
0000325E  002B      
00003260  6730      5472          beq.s     vsprintf_12
00003262  6E18      5473          bgt.s     vsprintf_15
00003264  0C80 0000 5474          cmp.l     #35,D0
00003268  0023      
0000326A  6700 003E 5475          beq       vsprintf_14
0000326E  6E00 0046 5476          bgt       vsprintf_9
00003272  0C80 0000 5477          cmp.l     #32,D0
00003276  0020      
00003278  6724      5478          beq.s     vsprintf_13
0000327A  603A      5479          bra.s     vsprintf_9
                    5480   vsprintf_15:
0000327C  0C80 0000 5481          cmp.l     #45,D0
00003280  002D      
00003282  6702      5482          beq.s     vsprintf_11
00003284  6030      5483          bra.s     vsprintf_9
                    5484   vsprintf_11:
00003286  1D7C 0001 5485          move.b    #1,-51(A6)
0000328A  FFCD      
0000328C  52AE 000C 5486          addq.l    #1,12(A6)
00003290  6026      5487          bra.s     vsprintf_7
                    5488   vsprintf_12:
00003292  1D7C 0001 5489          move.b    #1,-50(A6)
00003296  FFCE      
00003298  52AE 000C 5490          addq.l    #1,12(A6)
0000329C  601A      5491          bra.s     vsprintf_7
                    5492   vsprintf_13:
0000329E  1D7C 0001 5493          move.b    #1,-49(A6)
000032A2  FFCF      
000032A4  52AE 000C 5494          addq.l    #1,12(A6)
000032A8  600E      5495          bra.s     vsprintf_7
                    5496   vsprintf_14:
000032AA  1D7C 0001 5497          move.b    #1,-48(A6)
000032AE  FFD0      
000032B0  52AE 000C 5498          addq.l    #1,12(A6)
000032B4  6002      5499          bra.s     vsprintf_7
                    5500   vsprintf_9:
000032B6  6002      5501          bra.s     vsprintf_8
                    5502   vsprintf_7:
000032B8  6096      5503          bra       vsprintf_6
                    5504   vsprintf_8:
000032BA  206E 000C 5505          move.l    12(A6),A0
000032BE  1010      5506          move.b    (A0),D0
000032C0  4880      5507          ext.w     D0
000032C2  48C0      5508          ext.l     D0
000032C4  0C80 0000 5509          cmp.l     #48,D0
000032C8  0030      
000032CA  660A      5510          bne.s     vsprintf_16
000032CC  52AE 000C 5511          addq.l    #1,12(A6)
000032D0  1D7C 0001 5512          move.b    #1,-46(A6)
000032D4  FFD2      
                    5513   vsprintf_16:
000032D6  486E 0010 5514          pea       16(A6)
000032DA  486E 000C 5515          pea       12(A6)
000032DE  6100 FE6E 5516          bsr       @vsprintf_getval
000032E2  504F      5517          addq.w    #8,A7
000032E4  2A40      5518          move.l    D0,A5
000032E6  206E 000C 5519          move.l    12(A6),A0
000032EA  1010      5520          move.b    (A0),D0
000032EC  4880      5521          ext.w     D0
000032EE  48C0      5522          ext.l     D0
000032F0  0C80 0000 5523          cmp.l     #46,D0
000032F4  002E      
000032F6  6614      5524          bne.s     vsprintf_18
000032F8  52AE 000C 5525          addq.l    #1,12(A6)
000032FC  486E 0010 5526          pea       16(A6)
00003300  486E 000C 5527          pea       12(A6)
00003304  6100 FE48 5528          bsr       @vsprintf_getval
00003308  504F      5529          addq.w    #8,A7
0000330A  2A00      5530          move.l    D0,D5
                    5531   vsprintf_18:
0000330C  206E 000C 5532          move.l    12(A6),A0
00003310  1010      5533          move.b    (A0),D0
00003312  4880      5534          ext.w     D0
00003314  48C0      5535          ext.l     D0
00003316  0C80 0000 5536          cmp.l     #108,D0
0000331A  006C      
0000331C  660A      5537          bne.s     vsprintf_20
0000331E  52AE 000C 5538          addq.l    #1,12(A6)
00003322  1D7C 0001 5539          move.b    #1,-45(A6)
00003326  FFD3      
                    5540   vsprintf_20:
00003328  206E 000C 5541          move.l    12(A6),A0
0000332C  1010      5542          move.b    (A0),D0
0000332E  4880      5543          ext.w     D0
00003330  48C0      5544          ext.l     D0
00003332  0C80 0000 5545          cmp.l     #111,D0
00003336  006F      
00003338  6700 00D4 5546          beq       vsprintf_27
0000333C  6E34      5547          bgt.s     vsprintf_33
0000333E  0C80 0000 5548          cmp.l     #100,D0
00003342  0064      
00003344  6700 0054 5549          beq       vsprintf_24
00003348  6E1C      5550          bgt.s     vsprintf_34
0000334A  0C80 0000 5551          cmp.l     #99,D0
0000334E  0063      
00003350  6700 012C 5552          beq       vsprintf_30
00003354  6E00 016A 5553          bgt       vsprintf_22
00003358  0C80 0000 5554          cmp.l     #88,D0
0000335C  0058      
0000335E  6700 00E6 5555          beq       vsprintf_28
00003362  6000 015C 5556          bra       vsprintf_22
                    5557   vsprintf_34:
00003366  0C80 0000 5558          cmp.l     #105,D0
0000336A  0069      
0000336C  672C      5559          beq.s     vsprintf_24
0000336E  6000 0150 5560          bra       vsprintf_22
                    5561   vsprintf_33:
00003372  0C80 0000 5562          cmp.l     #117,D0
00003376  0075      
00003378  6700 005C 5563          beq       vsprintf_26
0000337C  6E0E      5564          bgt.s     vsprintf_35
0000337E  0C80 0000 5565          cmp.l     #115,D0
00003382  0073      
00003384  6700 011C 5566          beq       vsprintf_31
00003388  6000 0136 5567          bra       vsprintf_22
                    5568   vsprintf_35:
0000338C  0C80 0000 5569          cmp.l     #120,D0
00003390  0078      
00003392  6700 00B2 5570          beq       vsprintf_28
00003396  6000 0128 5571          bra       vsprintf_22
                    5572   vsprintf_24:
0000339A  4A2E FFD3 5573          tst.b     -45(A6)
0000339E  671A      5574          beq.s     vsprintf_36
000033A0  4878 000A 5575          pea       10
000033A4  2F03      5576          move.l    D3,-(A7)
000033A6  206E 0010 5577          move.l    16(A6),A0
000033AA  58AE 0010 5578          addq.l    #4,16(A6)
000033AE  2F10      5579          move.l    (A0),-(A7)
000033B0  6100 04F8 5580          bsr       _ltoa
000033B4  DEFC 000C 5581          add.w     #12,A7
000033B8  6018      5582          bra.s     vsprintf_37
                    5583   vsprintf_36:
000033BA  4878 000A 5584          pea       10
000033BE  2F03      5585          move.l    D3,-(A7)
000033C0  206E 0010 5586          move.l    16(A6),A0
000033C4  58AE 0010 5587          addq.l    #4,16(A6)
000033C8  2F10      5588          move.l    (A0),-(A7)
000033CA  6100 04DE 5589          bsr       _ltoa
000033CE  DEFC 000C 5590          add.w     #12,A7
                    5591   vsprintf_37:
000033D2  6000 00FA 5592          bra       vsprintf_23
                    5593   vsprintf_26:
000033D6  4A2E FFD3 5594          tst.b     -45(A6)
000033DA  6718      5595          beq.s     vsprintf_38
000033DC  4878 000A 5596          pea       10
000033E0  2F03      5597          move.l    D3,-(A7)
000033E2  206E 0010 5598          move.l    16(A6),A0
000033E6  58AE 0010 5599          addq.l    #4,16(A6)
000033EA  2F10      5600          move.l    (A0),-(A7)
000033EC  4E94      5601          jsr       (A4)
000033EE  DEFC 000C 5602          add.w     #12,A7
000033F2  6016      5603          bra.s     vsprintf_39
                    5604   vsprintf_38:
000033F4  4878 000A 5605          pea       10
000033F8  2F03      5606          move.l    D3,-(A7)
000033FA  206E 0010 5607          move.l    16(A6),A0
000033FE  58AE 0010 5608          addq.l    #4,16(A6)
00003402  2F10      5609          move.l    (A0),-(A7)
00003404  4E94      5610          jsr       (A4)
00003406  DEFC 000C 5611          add.w     #12,A7
                    5612   vsprintf_39:
0000340A  6000 00C2 5613          bra       vsprintf_23
                    5614   vsprintf_27:
0000340E  4A2E FFD3 5615          tst.b     -45(A6)
00003412  6718      5616          beq.s     vsprintf_40
00003414  4878 0008 5617          pea       8
00003418  2F03      5618          move.l    D3,-(A7)
0000341A  206E 0010 5619          move.l    16(A6),A0
0000341E  58AE 0010 5620          addq.l    #4,16(A6)
00003422  2F10      5621          move.l    (A0),-(A7)
00003424  4E94      5622          jsr       (A4)
00003426  DEFC 000C 5623          add.w     #12,A7
0000342A  6016      5624          bra.s     vsprintf_41
                    5625   vsprintf_40:
0000342C  4878 0008 5626          pea       8
00003430  2F03      5627          move.l    D3,-(A7)
00003432  206E 0010 5628          move.l    16(A6),A0
00003436  58AE 0010 5629          addq.l    #4,16(A6)
0000343A  2F10      5630          move.l    (A0),-(A7)
0000343C  4E94      5631          jsr       (A4)
0000343E  DEFC 000C 5632          add.w     #12,A7
                    5633   vsprintf_41:
00003442  6000 008A 5634          bra       vsprintf_23
                    5635   vsprintf_28:
00003446  4A2E FFD3 5636          tst.b     -45(A6)
0000344A  6718      5637          beq.s     vsprintf_42
0000344C  4878 0010 5638          pea       16
00003450  2F03      5639          move.l    D3,-(A7)
00003452  206E 0010 5640          move.l    16(A6),A0
00003456  58AE 0010 5641          addq.l    #4,16(A6)
0000345A  2F10      5642          move.l    (A0),-(A7)
0000345C  4E94      5643          jsr       (A4)
0000345E  DEFC 000C 5644          add.w     #12,A7
00003462  6016      5645          bra.s     vsprintf_43
                    5646   vsprintf_42:
00003464  4878 0010 5647          pea       16
00003468  2F03      5648          move.l    D3,-(A7)
0000346A  206E 0010 5649          move.l    16(A6),A0
0000346E  58AE 0010 5650          addq.l    #4,16(A6)
00003472  2F10      5651          move.l    (A0),-(A7)
00003474  4E94      5652          jsr       (A4)
00003476  DEFC 000C 5653          add.w     #12,A7
                    5654   vsprintf_43:
0000347A  6000 0052 5655          bra       vsprintf_23
                    5656   vsprintf_30:
0000347E  206E 0010 5657          move.l    16(A6),A0
00003482  58AE 0010 5658          addq.l    #4,16(A6)
00003486  2010      5659          move.l    (A0),D0
00003488  2042      5660          move.l    D2,A0
0000348A  5282      5661          addq.l    #1,D2
0000348C  1080      5662          move.b    D0,(A0)
0000348E  2042      5663          move.l    D2,A0
00003490  4210      5664          clr.b     (A0)
00003492  200D      5665          move.l    A5,D0
00003494  6704      5666          beq.s     vsprintf_44
00003496  200D      5667          move.l    A5,D0
00003498  6002      5668          bra.s     vsprintf_45
                    5669   vsprintf_44:
0000349A  7001      5670          moveq     #1,D0
                    5671   vsprintf_45:
0000349C  2A00      5672          move.l    D0,D5
0000349E  6000 002E 5673          bra       vsprintf_23
                    5674   vsprintf_31:
000034A2  206E 0010 5675          move.l    16(A6),A0
000034A6  58AE 0010 5676          addq.l    #4,16(A6)
000034AA  2610      5677          move.l    (A0),D3
000034AC  0C85 FFFF 5678          cmp.l     #-1,D5
000034B0  FFFF      
000034B2  660A      5679          bne.s     vsprintf_46
000034B4  2F03      5680          move.l    D3,-(A7)
000034B6  6100 0578 5681          bsr       _strlen
000034BA  584F      5682          addq.w    #4,A7
000034BC  2A00      5683          move.l    D0,D5
                    5684   vsprintf_46:
000034BE  600E      5685          bra.s     vsprintf_23
                    5686   vsprintf_22:
000034C0  206E 000C 5687          move.l    12(A6),A0
000034C4  2242      5688          move.l    D2,A1
000034C6  5282      5689          addq.l    #1,D2
000034C8  1290      5690          move.b    (A0),(A1)
000034CA  2042      5691          move.l    D2,A0
000034CC  4210      5692          clr.b     (A0)
                    5693   vsprintf_23:
000034CE  2F03      5694          move.l    D3,-(A7)
000034D0  6100 055E 5695          bsr       _strlen
000034D4  584F      5696          addq.w    #4,A7
000034D6  1800      5697          move.b    D0,D4
000034D8  206E 000C 5698          move.l    12(A6),A0
000034DC  1010      5699          move.b    (A0),D0
000034DE  4880      5700          ext.w     D0
000034E0  48C0      5701          ext.l     D0
000034E2  0C80 0000 5702          cmp.l     #115,D0
000034E6  0073      
000034E8  6618      5703          bne.s     vsprintf_48
000034EA  0C85 0000 5704          cmp.l     #0,D5
000034EE  0000      
000034F0  6D10      5705          blt.s     vsprintf_48
000034F2  4884      5706          ext.w     D4
000034F4  48C4      5707          ext.l     D4
000034F6  B885      5708          cmp.l     D5,D4
000034F8  6F04      5709          ble.s     vsprintf_50
000034FA  1005      5710          move.b    D5,D0
000034FC  6002      5711          bra.s     vsprintf_51
                    5712   vsprintf_50:
000034FE  1004      5713          move.b    D4,D0
                    5714   vsprintf_51:
00003500  1800      5715          move.b    D0,D4
                    5716   vsprintf_48:
00003502  206E 000C 5717          move.l    12(A6),A0
00003506  1010      5718          move.b    (A0),D0
00003508  4880      5719          ext.w     D0
0000350A  48C0      5720          ext.l     D0
0000350C  0C80 0000 5721          cmp.l     #88,D0
00003510  0058      
00003512  6600 0026 5722          bne       vsprintf_56
00003516  41EE FFDC 5723          lea       -36(A6),A0
0000351A  2408      5724          move.l    A0,D2
                    5725   vsprintf_54:
0000351C  2042      5726          move.l    D2,A0
0000351E  4A10      5727          tst.b     (A0)
00003520  6718      5728          beq.s     vsprintf_56
00003522  2042      5729          move.l    D2,A0
00003524  1210      5730          move.b    (A0),D1
00003526  4881      5731          ext.w     D1
00003528  48C1      5732          ext.l     D1
0000352A  2F01      5733          move.l    D1,-(A7)
0000352C  6100 FB98 5734          bsr       _toupper
00003530  584F      5735          addq.w    #4,A7
00003532  2042      5736          move.l    D2,A0
00003534  1080      5737          move.b    D0,(A0)
00003536  5282      5738          addq.l    #1,D2
00003538  60E2      5739          bra       vsprintf_54
                    5740   vsprintf_56:
0000353A  7E00      5741          moveq     #0,D7
0000353C  41EE FFD4 5742          lea       -44(A6),A0
00003540  2408      5743          move.l    A0,D2
00003542  206E 000C 5744          move.l    12(A6),A0
00003546  1010      5745          move.b    (A0),D0
00003548  4880      5746          ext.w     D0
0000354A  48C0      5747          ext.l     D0
0000354C  0C80 0000 5748          cmp.l     #100,D0
00003550  0064      
00003552  6714      5749          beq.s     vsprintf_59
00003554  206E 000C 5750          move.l    12(A6),A0
00003558  1010      5751          move.b    (A0),D0
0000355A  4880      5752          ext.w     D0
0000355C  48C0      5753          ext.l     D0
0000355E  0C80 0000 5754          cmp.l     #105,D0
00003562  0069      
00003564  6600 0076 5755          bne       vsprintf_65
                    5756   vsprintf_59:
00003568  4A2E FFCE 5757          tst.b     -50(A6)
0000356C  6612      5758          bne.s     vsprintf_62
0000356E  2043      5759          move.l    D3,A0
00003570  1010      5760          move.b    (A0),D0
00003572  4880      5761          ext.w     D0
00003574  48C0      5762          ext.l     D0
00003576  0C80 0000 5763          cmp.l     #45,D0
0000357A  002D      
0000357C  6600 002E 5764          bne       vsprintf_60
                    5765   vsprintf_62:
00003580  2043      5766          move.l    D3,A0
00003582  1010      5767          move.b    (A0),D0
00003584  4880      5768          ext.w     D0
00003586  48C0      5769          ext.l     D0
00003588  0C80 0000 5770          cmp.l     #45,D0
0000358C  002D      
0000358E  660E      5771          bne.s     vsprintf_63
00003590  2043      5772          move.l    D3,A0
00003592  5283      5773          addq.l    #1,D3
00003594  2242      5774          move.l    D2,A1
00003596  5282      5775          addq.l    #1,D2
00003598  1290      5776          move.b    (A0),(A1)
0000359A  5304      5777          subq.b    #1,D4
0000359C  6008      5778          bra.s     vsprintf_64
                    5779   vsprintf_63:
0000359E  2042      5780          move.l    D2,A0
000035A0  5282      5781          addq.l    #1,D2
000035A2  10BC 002B 5782          move.b    #43,(A0)
                    5783   vsprintf_64:
000035A6  5287      5784          addq.l    #1,D7
000035A8  6000 0032 5785          bra       vsprintf_65
                    5786   vsprintf_60:
000035AC  4A2E FFCF 5787          tst.b     -49(A6)
000035B0  6700 002A 5788          beq       vsprintf_65
000035B4  2043      5789          move.l    D3,A0
000035B6  1010      5790          move.b    (A0),D0
000035B8  4880      5791          ext.w     D0
000035BA  48C0      5792          ext.l     D0
000035BC  0C80 0000 5793          cmp.l     #45,D0
000035C0  002D      
000035C2  660E      5794          bne.s     vsprintf_67
000035C4  2043      5795          move.l    D3,A0
000035C6  5283      5796          addq.l    #1,D3
000035C8  2242      5797          move.l    D2,A1
000035CA  5282      5798          addq.l    #1,D2
000035CC  1290      5799          move.b    (A0),(A1)
000035CE  5304      5800          subq.b    #1,D4
000035D0  6008      5801          bra.s     vsprintf_68
                    5802   vsprintf_67:
000035D2  2042      5803          move.l    D2,A0
000035D4  5282      5804          addq.l    #1,D2
000035D6  10BC 0020 5805          move.b    #32,(A0)
                    5806   vsprintf_68:
000035DA  5287      5807          addq.l    #1,D7
                    5808   vsprintf_65:
000035DC  4A2E FFD0 5809          tst.b     -48(A6)
000035E0  6700 0066 5810          beq       vsprintf_77
000035E4  206E 000C 5811          move.l    12(A6),A0
000035E8  1010      5812          move.b    (A0),D0
000035EA  4880      5813          ext.w     D0
000035EC  48C0      5814          ext.l     D0
000035EE  0C80 0000 5815          cmp.l     #111,D0
000035F2  006F      
000035F4  671A      5816          beq.s     vsprintf_73
000035F6  6E0C      5817          bgt.s     vsprintf_76
000035F8  0C80 0000 5818          cmp.l     #88,D0
000035FC  0058      
000035FE  6710      5819          beq.s     vsprintf_73
00003600  6000 0046 5820          bra       vsprintf_77
                    5821   vsprintf_76:
00003604  0C80 0000 5822          cmp.l     #120,D0
00003608  0078      
0000360A  6704      5823          beq.s     vsprintf_73
0000360C  6000 003A 5824          bra       vsprintf_77
                    5825   vsprintf_73:
00003610  2042      5826          move.l    D2,A0
00003612  5282      5827          addq.l    #1,D2
00003614  10BC 0030 5828          move.b    #48,(A0)
00003618  5287      5829          addq.l    #1,D7
0000361A  206E 000C 5830          move.l    12(A6),A0
0000361E  1010      5831          move.b    (A0),D0
00003620  4880      5832          ext.w     D0
00003622  48C0      5833          ext.l     D0
00003624  0C80 0000 5834          cmp.l     #120,D0
00003628  0078      
0000362A  6712      5835          beq.s     vsprintf_79
0000362C  206E 000C 5836          move.l    12(A6),A0
00003630  1010      5837          move.b    (A0),D0
00003632  4880      5838          ext.w     D0
00003634  48C0      5839          ext.l     D0
00003636  0C80 0000 5840          cmp.l     #88,D0
0000363A  0058      
0000363C  660A      5841          bne.s     vsprintf_77
                    5842   vsprintf_79:
0000363E  2042      5843          move.l    D2,A0
00003640  5282      5844          addq.l    #1,D2
00003642  10BC 0078 5845          move.b    #120,(A0)
00003646  5287      5846          addq.l    #1,D7
                    5847   vsprintf_77:
00003648  2042      5848          move.l    D2,A0
0000364A  4210      5849          clr.b     (A0)
0000364C  206E 000C 5850          move.l    12(A6),A0
00003650  1010      5851          move.b    (A0),D0
00003652  4880      5852          ext.w     D0
00003654  48C0      5853          ext.l     D0
00003656  0C80 0000 5854          cmp.l     #105,D0
0000365A  0069      
0000365C  6700 0076 5855          beq       vsprintf_82
00003660  6E42      5856          bgt.s     vsprintf_93
00003662  0C80 0000 5857          cmp.l     #99,D0
00003666  0063      
00003668  6700 0084 5858          beq       vsprintf_96
0000366C  6E1C      5859          bgt.s     vsprintf_94
0000366E  0C80 0000 5860          cmp.l     #88,D0
00003672  0058      
00003674  6700 005E 5861          beq       vsprintf_82
00003678  6E00 0184 5862          bgt       vsprintf_80
0000367C  0C80 0000 5863          cmp.l     #69,D0
00003680  0045      
00003682  6700 0050 5864          beq       vsprintf_82
00003686  6000 0176 5865          bra       vsprintf_80
                    5866   vsprintf_94:
0000368A  0C80 0000 5867          cmp.l     #101,D0
0000368E  0065      
00003690  6700 0042 5868          beq       vsprintf_82
00003694  6E00 0168 5869          bgt       vsprintf_80
00003698  0C80 0000 5870          cmp.l     #100,D0
0000369C  0064      
0000369E  6734      5871          beq.s     vsprintf_82
000036A0  6000 015C 5872          bra       vsprintf_80
                    5873   vsprintf_93:
000036A4  0C80 0000 5874          cmp.l     #117,D0
000036A8  0075      
000036AA  6728      5875          beq.s     vsprintf_82
000036AC  6E1A      5876          bgt.s     vsprintf_95
000036AE  0C80 0000 5877          cmp.l     #115,D0
000036B2  0073      
000036B4  6700 0038 5878          beq       vsprintf_96
000036B8  6E00 0144 5879          bgt       vsprintf_80
000036BC  0C80 0000 5880          cmp.l     #111,D0
000036C0  006F      
000036C2  6710      5881          beq.s     vsprintf_82
000036C4  6000 0138 5882          bra       vsprintf_80
                    5883   vsprintf_95:
000036C8  0C80 0000 5884          cmp.l     #120,D0
000036CC  0078      
000036CE  6704      5885          beq.s     vsprintf_82
000036D0  6000 012C 5886          bra       vsprintf_80
                    5887   vsprintf_82:
000036D4  4A2E FFD2 5888          tst.b     -46(A6)
000036D8  6714      5889          beq.s     vsprintf_96
000036DA  4A2E FFCD 5890          tst.b     -51(A6)
000036DE  660E      5891          bne.s     vsprintf_96
000036E0  200D      5892          move.l    A5,D0
000036E2  9087      5893          sub.l     D7,D0
000036E4  4884      5894          ext.w     D4
000036E6  48C4      5895          ext.l     D4
000036E8  9084      5896          sub.l     D4,D0
000036EA  2D40 FFFC 5897          move.l    D0,-4(A6)
                    5898   vsprintf_96:
000036EE  202E FFFC 5899          move.l    -4(A6),D0
000036F2  0C80 0000 5900          cmp.l     #0,D0
000036F6  0000      
000036F8  6C04      5901          bge.s     vsprintf_98
000036FA  42AE FFFC 5902          clr.l     -4(A6)
                    5903   vsprintf_98:
000036FE  4A2E FFCD 5904          tst.b     -51(A6)
00003702  6600 0030 5905          bne       vsprintf_104
00003706  4884      5906          ext.w     D4
00003708  48C4      5907          ext.l     D4
0000370A  2004      5908          move.l    D4,D0
0000370C  D0AE FFFC 5909          add.l     -4(A6),D0
00003710  D087      5910          add.l     D7,D0
00003712  1D40 FFD1 5911          move.b    D0,-47(A6)
                    5912   vsprintf_102:
00003716  102E FFD1 5913          move.b    -47(A6),D0
0000371A  4880      5914          ext.w     D0
0000371C  48C0      5915          ext.l     D0
0000371E  220D      5916          move.l    A5,D1
00003720  534D      5917          subq.w    #1,A5
00003722  B081      5918          cmp.l     D1,D0
00003724  6C0E      5919          bge.s     vsprintf_104
00003726  4878 0020 5920          pea       32
0000372A  2F0A      5921          move.l    A2,-(A7)
0000372C  4E93      5922          jsr       (A3)
0000372E  504F      5923          addq.w    #8,A7
00003730  5286      5924          addq.l    #1,D6
00003732  60E2      5925          bra       vsprintf_102
                    5926   vsprintf_104:
00003734  41EE FFD4 5927          lea       -44(A6),A0
00003738  2408      5928          move.l    A0,D2
                    5929   vsprintf_105:
0000373A  2042      5930          move.l    D2,A0
0000373C  4A10      5931          tst.b     (A0)
0000373E  6716      5932          beq.s     vsprintf_107
00003740  2042      5933          move.l    D2,A0
00003742  5282      5934          addq.l    #1,D2
00003744  1210      5935          move.b    (A0),D1
00003746  4881      5936          ext.w     D1
00003748  48C1      5937          ext.l     D1
0000374A  2F01      5938          move.l    D1,-(A7)
0000374C  2F0A      5939          move.l    A2,-(A7)
0000374E  4E93      5940          jsr       (A3)
00003750  504F      5941          addq.w    #8,A7
00003752  5286      5942          addq.l    #1,D6
00003754  60E4      5943          bra       vsprintf_105
                    5944   vsprintf_107:
00003756  202E FFFC 5945          move.l    -4(A6),D0
0000375A  1D40 FFD1 5946          move.b    D0,-47(A6)
                    5947   vsprintf_108:
0000375E  102E FFD1 5948          move.b    -47(A6),D0
00003762  532E FFD1 5949          subq.b    #1,-47(A6)
00003766  4A00      5950          tst.b     D0
00003768  670E      5951          beq.s     vsprintf_110
0000376A  4878 0030 5952          pea       48
0000376E  2F0A      5953          move.l    A2,-(A7)
00003770  4E93      5954          jsr       (A3)
00003772  504F      5955          addq.w    #8,A7
00003774  5286      5956          addq.l    #1,D6
00003776  60E6      5957          bra       vsprintf_108
                    5958   vsprintf_110:
00003778  2043      5959          move.l    D3,A0
0000377A  4A10      5960          tst.b     (A0)
0000377C  6700 0048 5961          beq       vsprintf_113
00003780  206E 000C 5962          move.l    12(A6),A0
00003784  1010      5963          move.b    (A0),D0
00003786  4880      5964          ext.w     D0
00003788  48C0      5965          ext.l     D0
0000378A  0C80 0000 5966          cmp.l     #115,D0
0000378E  0073      
00003790  670C      5967          beq.s     vsprintf_116
00003792  6E18      5968          bgt.s     vsprintf_119
00003794  0C80 0000 5969          cmp.l     #99,D0
00003798  0063      
0000379A  6702      5970          beq.s     vsprintf_116
0000379C  600E      5971          bra.s     vsprintf_119
                    5972   vsprintf_116:
0000379E  2005      5973          move.l    D5,D0
000037A0  5385      5974          subq.l    #1,D5
000037A2  0C80 0000 5975          cmp.l     #0,D0
000037A6  0000      
000037A8  6E02      5976          bgt.s     vsprintf_119
000037AA  6016      5977          bra.s     vsprintf_115
                    5978   vsprintf_119:
000037AC  2043      5979          move.l    D3,A0
000037AE  5283      5980          addq.l    #1,D3
000037B0  1210      5981          move.b    (A0),D1
000037B2  4881      5982          ext.w     D1
000037B4  48C1      5983          ext.l     D1
000037B6  2F01      5984          move.l    D1,-(A7)
000037B8  2F0A      5985          move.l    A2,-(A7)
000037BA  4E93      5986          jsr       (A3)
000037BC  504F      5987          addq.w    #8,A7
000037BE  5286      5988          addq.l    #1,D6
000037C0  6002      5989          bra.s     vsprintf_112
                    5990   vsprintf_115:
000037C2  6002      5991          bra.s     vsprintf_113
                    5992   vsprintf_112:
000037C4  60B2      5993          bra       vsprintf_110
                    5994   vsprintf_113:
000037C6  4A2E FFCD 5995          tst.b     -51(A6)
000037CA  6700 0030 5996          beq       vsprintf_125
000037CE  4884      5997          ext.w     D4
000037D0  48C4      5998          ext.l     D4
000037D2  2004      5999          move.l    D4,D0
000037D4  D0AE FFFC 6000          add.l     -4(A6),D0
000037D8  D087      6001          add.l     D7,D0
000037DA  1D40 FFD1 6002          move.b    D0,-47(A6)
                    6003   vsprintf_123:
000037DE  102E FFD1 6004          move.b    -47(A6),D0
000037E2  4880      6005          ext.w     D0
000037E4  48C0      6006          ext.l     D0
000037E6  220D      6007          move.l    A5,D1
000037E8  534D      6008          subq.w    #1,A5
000037EA  B081      6009          cmp.l     D1,D0
000037EC  6C0E      6010          bge.s     vsprintf_125
000037EE  4878 0020 6011          pea       32
000037F2  2F0A      6012          move.l    A2,-(A7)
000037F4  4E93      6013          jsr       (A3)
000037F6  504F      6014          addq.w    #8,A7
000037F8  5386      6015          subq.l    #1,D6
000037FA  60E2      6016          bra       vsprintf_123
                    6017   vsprintf_125:
000037FC  6014      6018          bra.s     vsprintf_81
                    6019   vsprintf_80:
000037FE  206E 000C 6020          move.l    12(A6),A0
00003802  1210      6021          move.b    (A0),D1
00003804  4881      6022          ext.w     D1
00003806  48C1      6023          ext.l     D1
00003808  2F01      6024          move.l    D1,-(A7)
0000380A  2F0A      6025          move.l    A2,-(A7)
0000380C  4E93      6026          jsr       (A3)
0000380E  504F      6027          addq.w    #8,A7
00003810  5286      6028          addq.l    #1,D6
                    6029   vsprintf_81:
00003812  52AE 000C 6030          addq.l    #1,12(A6)
                    6031   vsprintf_2:
00003816  6000 F9D6 6032          bra       vsprintf_1
                    6033   vsprintf_3:
0000381A  4A92      6034          tst.l     (A2)
0000381C  6710      6035          beq.s     vsprintf_126
0000381E  4201      6036          clr.b     D1
00003820  C2BC 0000 6037          and.l     #255,D1
00003824  00FF      
00003826  2F01      6038          move.l    D1,-(A7)
00003828  2F0A      6039          move.l    A2,-(A7)
0000382A  4E93      6040          jsr       (A3)
0000382C  504F      6041          addq.w    #8,A7
                    6042   vsprintf_126:
0000382E  2006      6043          move.l    D6,D0
00003830  4CDF 3CFC 6044          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003834  4E5E      6045          unlk      A6
00003836  4E75      6046          rts
                    6047   @itoa_convert:
00003838  4E56 0000 6048          link      A6,#0
0000383C  48E7 3C00 6049          movem.l   D2/D3/D4/D5,-(A7)
00003840  242E 0008 6050          move.l    8(A6),D2
00003844  262E 0010 6051          move.l    16(A6),D3
00003848  2A2E 000C 6052          move.l    12(A6),D5
0000384C  2F05      6053          move.l    D5,-(A7)
0000384E  2F03      6054          move.l    D3,-(A7)
00003850  6100 F6B4 6055          bsr       ULDIV
00003854  202F 0004 6056          move.l    4(A7),D0
00003858  504F      6057          addq.w    #8,A7
0000385A  2800      6058          move.l    D0,D4
0000385C  BA83      6059          cmp.l     D3,D5
0000385E  651A      6060          blo.s     @itoa_convert_1
00003860  2F03      6061          move.l    D3,-(A7)
00003862  2F05      6062          move.l    D5,-(A7)
00003864  2F03      6063          move.l    D3,-(A7)
00003866  6100 F69E 6064          bsr       ULDIV
0000386A  2217      6065          move.l    (A7),D1
0000386C  504F      6066          addq.w    #8,A7
0000386E  2F01      6067          move.l    D1,-(A7)
00003870  2F02      6068          move.l    D2,-(A7)
00003872  61C4      6069          bsr       @itoa_convert
00003874  DEFC 000C 6070          add.w     #12,A7
00003878  2400      6071          move.l    D0,D2
                    6072   @itoa_convert_1:
0000387A  0C84 0000 6073          cmp.l     #9,D4
0000387E  0009      
00003880  6E0A      6074          bgt.s     @itoa_convert_3
00003882  2004      6075          move.l    D4,D0
00003884  0680 0000 6076          add.l     #48,D0
00003888  0030      
0000388A  600E      6077          bra.s     @itoa_convert_4
                    6078   @itoa_convert_3:
0000388C  2004      6079          move.l    D4,D0
0000388E  0680 0000 6080          add.l     #97,D0
00003892  0061      
00003894  0480 0000 6081          sub.l     #10,D0
00003898  000A      
                    6082   @itoa_convert_4:
0000389A  2042      6083          move.l    D2,A0
0000389C  1080      6084          move.b    D0,(A0)
0000389E  2002      6085          move.l    D2,D0
000038A0  5280      6086          addq.l    #1,D0
000038A2  4CDF 003C 6087          movem.l   (A7)+,D2/D3/D4/D5
000038A6  4E5E      6088          unlk      A6
000038A8  4E75      6089          rts
                    6090   _ltoa:
000038AA  4E56 0000 6091          link      A6,#0
000038AE  48E7 3C00 6092          movem.l   D2/D3/D4/D5,-(A7)
000038B2  242E 0008 6093          move.l    8(A6),D2
000038B6  262E 000C 6094          move.l    12(A6),D3
000038BA  2A2E 0010 6095          move.l    16(A6),D5
000038BE  2803      6096          move.l    D3,D4
000038C0  0C85 0000 6097          cmp.l     #2,D5
000038C4  0002      
000038C6  6D08      6098          blt.s     ltoa_3
000038C8  0C85 0000 6099          cmp.l     #36,D5
000038CC  0024      
000038CE  6F06      6100          ble.s     ltoa_1
                    6101   ltoa_3:
000038D0  2003      6102          move.l    D3,D0
000038D2  6000 0052 6103          bra       ltoa_4
                    6104   ltoa_1:
000038D6  0C85 0000 6105          cmp.l     #10,D5
000038DA  000A      
000038DC  6600 0032 6106          bne       ltoa_5
000038E0  0C82 0000 6107          cmp.l     #0,D2
000038E4  0000      
000038E6  6C28      6108          bge.s     ltoa_5
000038E8  2002      6109          move.l    D2,D0
000038EA  4480      6110          neg.l     D0
000038EC  2400      6111          move.l    D0,D2
000038EE  0C82 0000 6112          cmp.l     #0,D2
000038F2  0000      
000038F4  6C12      6113          bge.s     ltoa_7
000038F6  4879 0000 6114          pea       @itoa_1
000038FA  4EAA      
000038FC  2F03      6115          move.l    D3,-(A7)
000038FE  6100 F5F6 6116          bsr       _strcpy
00003902  504F      6117          addq.w    #8,A7
00003904  2003      6118          move.l    D3,D0
00003906  601E      6119          bra.s     ltoa_4
                    6120   ltoa_7:
00003908  2044      6121          move.l    D4,A0
0000390A  5284      6122          addq.l    #1,D4
0000390C  10BC 002D 6123          move.b    #45,(A0)
                    6124   ltoa_5:
00003910  2F05      6125          move.l    D5,-(A7)
00003912  2F02      6126          move.l    D2,-(A7)
00003914  2F04      6127          move.l    D4,-(A7)
00003916  6100 FF20 6128          bsr       @itoa_convert
0000391A  DEFC 000C 6129          add.w     #12,A7
0000391E  2800      6130          move.l    D0,D4
00003920  2044      6131          move.l    D4,A0
00003922  4210      6132          clr.b     (A0)
00003924  2003      6133          move.l    D3,D0
                    6134   ltoa_4:
00003926  4CDF 003C 6135          movem.l   (A7)+,D2/D3/D4/D5
0000392A  4E5E      6136          unlk      A6
0000392C  4E75      6137          rts
                    6138   _ultoa:
0000392E  4E56 0000 6139          link      A6,#0
00003932  48E7 3800 6140          movem.l   D2/D3/D4,-(A7)
00003936  262E 0010 6141          move.l    16(A6),D3
0000393A  282E 000C 6142          move.l    12(A6),D4
0000393E  2404      6143          move.l    D4,D2
00003940  0C83 0000 6144          cmp.l     #2,D3
00003944  0002      
00003946  6D08      6145          blt.s     ultoa_3
00003948  0C83 0000 6146          cmp.l     #36,D3
0000394C  0024      
0000394E  6F04      6147          ble.s     ultoa_1
                    6148   ultoa_3:
00003950  2004      6149          move.l    D4,D0
00003952  6018      6150          bra.s     ultoa_4
                    6151   ultoa_1:
00003954  2F03      6152          move.l    D3,-(A7)
00003956  2F2E 0008 6153          move.l    8(A6),-(A7)
0000395A  2F02      6154          move.l    D2,-(A7)
0000395C  6100 FEDA 6155          bsr       @itoa_convert
00003960  DEFC 000C 6156          add.w     #12,A7
00003964  2400      6157          move.l    D0,D2
00003966  2042      6158          move.l    D2,A0
00003968  4210      6159          clr.b     (A0)
0000396A  2004      6160          move.l    D4,D0
                    6161   ultoa_4:
0000396C  4CDF 001C 6162          movem.l   (A7)+,D2/D3/D4
00003970  4E5E      6163          unlk      A6
00003972  4E75      6164          rts
                    6165   _itoa:
00003974  4E56 0000 6166          link      A6,#0
00003978  2F2E 0010 6167          move.l    16(A6),-(A7)
0000397C  2F2E 000C 6168          move.l    12(A6),-(A7)
00003980  2F2E 0008 6169          move.l    8(A6),-(A7)
00003984  6100 FF24 6170          bsr       _ltoa
00003988  DEFC 000C 6171          add.w     #12,A7
0000398C  4E5E      6172          unlk      A6
0000398E  4E75      6173          rts
                    6174   ULMUL:
00003990  4E56 0000 6175          link    A6,#0
00003994  48E7 C000 6176          movem.l D0/D1,-(A7)
00003998  222E 0008 6177          move.l  8(A6),D1
0000399C  202E 000C 6178          move.l  12(A6),D0
000039A0  602C      6179          bra.s   lmul_3
                    6180   LMUL:
000039A2  4E56 0000 6181          link    A6,#0
000039A6  48E7 C000 6182          movem.l D0/D1,-(A7)
000039AA  222E 0008 6183          move.l  8(A6),D1
000039AE  202E 000C 6184          move.l  12(A6),D0
000039B2  4A80      6185          tst.l   D0
000039B4  6A0A      6186          bpl.s   lmul_1
000039B6  4480      6187          neg.l   D0
000039B8  4A81      6188          tst.l   D1
000039BA  6A0A      6189          bpl.s   lmul_2
000039BC  4481      6190          neg.l   D1
000039BE  600E      6191          bra.s   lmul_3
                    6192   lmul_1:
000039C0  4A81      6193          tst.l   D1
000039C2  6A0A      6194          bpl.s   lmul_3
000039C4  4481      6195          neg.l   D1
                    6196   lmul_2:
000039C6  6114      6197          bsr.s   domul
000039C8  4481      6198          neg.l   D1
000039CA  4080      6199          negx.l  D0
000039CC  6002      6200          bra.s   lmul_4
                    6201   lmul_3:
000039CE  610C      6202          bsr.s   domul
                    6203   lmul_4:
000039D0  2D41 0008 6204          move.l  D1,8(A6)
000039D4  4CDF 0003 6205          movem.l (A7)+,D0/D1
000039D8  4E5E      6206          unlk    A6
000039DA  4E75      6207          rts
                    6208   domul:
000039DC  0C81 0000 6209          cmpi.l  #$FFFF,D1
000039E0  FFFF      
000039E2  620C      6210          bhi.s   domul_1
000039E4  0C80 0000 6211          cmpi.l  #$FFFF,D0
000039E8  FFFF      
000039EA  620E      6212          bhi.s   domul_2
000039EC  C2C0      6213          mulu    D0,D1
000039EE  4E75      6214          rts
                    6215   domul_1:
000039F0  0C80 0000 6216          cmpi.l  #$FFFF,D0
000039F4  FFFF      
000039F6  6218      6217          bhi.s   domul_4
000039F8  6002      6218          bra.s   domul_3
                    6219   domul_2
000039FA  C141      6220          exg     D0,D1
                    6221   domul_3:
000039FC  2F02      6222          move.l  D2,-(A7)
000039FE  2401      6223          move.l  D1,D2
00003A00  4842      6224          swap    D2
00003A02  C2C0      6225          mulu    D0,D1
00003A04  C4C0      6226          mulu    D0,D2
00003A06  4842      6227          swap    D2
00003A08  4242      6228          clr.w   D2
00003A0A  D282      6229          add.l   D2,D1
00003A0C  241F      6230          move.l  (A7)+,D2
00003A0E  4E75      6231          rts
                    6232   domul_4:
00003A10  48E7 3000 6233          movem.l D2/D3,-(A7)
00003A14  2401      6234          move.l  D1,D2
00003A16  2601      6235          move.l  D1,D3
00003A18  C2C0      6236          mulu    D0,D1
00003A1A  4842      6237          swap    D2
00003A1C  C4C0      6238          mulu    D0,D2
00003A1E  4840      6239          swap    D0
00003A20  C6C0      6240          mulu    D0,D3
00003A22  D483      6241          add.l   D3,D2
00003A24  4842      6242          swap    D2
00003A26  4242      6243          clr.w   D2
00003A28  D282      6244          add.l   D2,D1
00003A2A  4CDF 000C 6245          movem.l (A7)+,D2/D3
00003A2E  4E75      6246          rts
                    6247   _strlen:
00003A30  206F 0004 6248          move.l    (4,A7),A0
00003A34  2248      6249          move.l    A0,A1
                    6250   strlen_1:
00003A36  4A19      6251          tst.b     (A1)+
00003A38  66FC      6252          bne       strlen_1
00003A3A  2009      6253          move.l    A1,D0
00003A3C  9088      6254          sub.l     A0,D0
00003A3E  5380      6255          subq.l    #1,D0
00003A40  4E75      6256          rts
                    6257          section   const
                    6258   
                    6259   @m68kde~1_1:
00003A42  0D0A 00   6260          dc.b      13,10,0
                    6261   @m68kde~1_2:
00003A46  0D53 7769 6262          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003A4A  7463 6865 
00003A4E  7320 5357 
00003A52  5B        
00003A53  372D 305D 6263          dc.b      55,45,48,93,32,61,32,0
00003A57  203D 2000 
                    6264   @m68kde~1_3:
00003A5C  3000      6265          dc.b      48,0
                    6266   @m68kde~1_4:
00003A5E  3100      6267          dc.b      49,0
                    6268   @m68kde~1_5:
00003A60  0D0A 4475 6269          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003A64  6D70 204D 
00003A68  656D 6F72 
00003A6C  79        
00003A6D  2042 6C6F 6270          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003A71  636B 3A20 
00003A75  3C45 5343 
00003A79  3E20      
00003A7B  746F 2041 6271          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003A7F  626F 7274 
00003A83  2C20 3C53 
00003A87  50        
00003A88  4143 453E 6272          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003A8C  2074 6F20 
00003A90  436F 6E74 
00003A94  69        
00003A95  6E75 6500 6273          dc.b      110,117,101,0
                    6274   @m68kde~1_6:
00003A9A  0D0A 456E 6275          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003A9E  7465 7220 
00003AA2  5374 6172 
00003AA6  74        
00003AA7  2041 6464 6276          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003AAB  7265 7373 
00003AAF  3A20 00   
                    6277   @m68kde~1_7:
00003AB2  0D0A 2530 6278          dc.b      13,10,37,48,56,120,32,0
00003AB6  3878 2000 
                    6279   @m68kde~1_8:
00003ABA  2530 3258 6280          dc.b      37,48,50,88,0
00003ABE  00        
                    6281   @m68kde~1_9:
00003AC0  2020 00   6282          dc.b      32,32,0
                    6283   @m68kde~1_10:
00003AC4  0D0A 4669 6284          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003AC8  6C6C 204D 
00003ACC  656D 6F72 
00003AD0  79        
00003AD1  2042 6C6F 6285          dc.b      32,66,108,111,99,107,0
00003AD5  636B 00   
                    6286   @m68kde~1_11:
00003AD8  0D0A 456E 6287          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003ADC  7465 7220 
00003AE0  456E 6420 
00003AE4  41        
00003AE5  6464 7265 6288          dc.b      100,100,114,101,115,115,58,32,0
00003AE9  7373 3A20 
00003AED  00        
                    6289   @m68kde~1_12:
00003AEE  0D0A 456E 6290          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003AF2  7465 7220 
00003AF6  4669 6C6C 
00003AFA  20        
00003AFB  4461 7461 6291          dc.b      68,97,116,97,58,32,0
00003AFF  3A20 00   
                    6292   @m68kde~1_13:
00003B02  0D0A 4669 6293          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003B06  6C6C 696E 
00003B0A  6720 4164 
00003B0E  64        
00003B0F  7265 7373 6294          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003B13  6573 205B 
00003B17  2425 3038 
00003B1B  58        
00003B1C  202D 2024 6295          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003B20  2530 3858 
00003B24  5D20 7769 
00003B28  7468      
00003B2A  2024 2530 6296          dc.b      32,36,37,48,50,88,0
00003B2E  3258 00   
                    6297   @m68kde~1_14:
00003B32  0D0A 5573 6298          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003B36  6520 4879 
00003B3A  7065 7254 
00003B3E  65        
00003B3F  726D 696E 6299          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003B43  616C 2074 
00003B47  6F20 5365 
00003B4B  6E64 2054 6300          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003B4F  6578 7420 
00003B53  4669 6C65 
00003B57  2028 2E68 6301          dc.b      32,40,46,104,101,120,41,13,10,0
00003B5B  6578 290D 
00003B5F  0A00      
                    6302   @m68kde~1_15:
00003B62  0D0A 4C6F 6303          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003B66  6164 2046 
00003B6A  6169 6C65 
00003B6E  64        
00003B6F  2061 7420 6304          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003B73  4164 6472 
00003B77  6573 7320 
00003B7B  3D        
00003B7C  205B 2425 6305          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003B80  3038 585D 
00003B84  0D0A 00   
                    6306   @m68kde~1_16:
00003B88  0D0A 5375 6307          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003B8C  6363 6573 
00003B90  733A 2044 
00003B94  6F        
00003B95  776E 6C6F 6308          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003B99  6164 6564 
00003B9D  2025 6420 
00003BA1  6279 7465 6309          dc.b      98,121,116,101,115,13,10,0
00003BA5  730D 0A00 
                    6310   @m68kde~1_17:
00003BAA  0D0A 4578 6311          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003BAE  616D 696E 
00003BB2  6520 616E 
00003BB6  64        
00003BB7  2043 6861 6312          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003BBB  6E67 6520 
00003BBF  4D65 6D6F 
00003BC3  72        
00003BC4  7900      6313          dc.b      121,0
                    6314   @m68kde~1_18:
00003BC6  0D0A 3C45 6315          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003BCA  5343 3E20 
00003BCE  746F 2053 
00003BD2  746F      
00003BD4  702C 203C 6316          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003BD8  5350 4143 
00003BDC  453E 2074 
00003BE0  6F20      
00003BE2  4164 7661 6317          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003BE6  6E63 652C 
00003BEA  2027 2D27 
00003BEE  2074      
00003BF0  6F20 476F 6318          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003BF4  2042 6163 
00003BF8  6B2C 203C 
00003BFC  4441      
00003BFE  5441 3E20 6319          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003C02  746F 2063 
00003C06  6861 6E67 
00003C0A  65        
00003C0B  00        6320          dc.b      0
                    6321   @m68kde~1_19:
00003C0C  0D0A 456E 6322          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003C10  7465 7220 
00003C14  4164 6472 
00003C18  65        
00003C19  7373 3A20 6323          dc.b      115,115,58,32,0
00003C1D  00        
                    6324   @m68kde~1_20:
00003C1E  0D0A 5B25 6325          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003C22  3038 785D 
00003C26  203A 2025 
00003C2A  3032 78   
00003C2D  2020 00   6326          dc.b      32,32,0
                    6327   @m68kde~1_21:
00003C30  0D0A 5761 6328          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003C34  726E 696E 
00003C38  6720 4368 
00003C3C  61        
00003C3D  6E67 6520 6329          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003C41  4661 696C 
00003C45  6564 3A20 
00003C49  57        
00003C4A  726F 7465 6330          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003C4E  205B 2530 
00003C52  3278 5D2C 
00003C56  20        
00003C57  5265 6164 6331          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003C5B  205B 2530 
00003C5F  3278 5D00 
                    6332   @m68kde~1_22:
00003C64  0D0A 4C6F 6333          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003C68  6164 696E 
00003C6C  6720 5072 
00003C70  6F        
00003C71  6772 616D 6334          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003C75  2046 726F 
00003C79  6D20 5350 
00003C7D  49        
00003C7E  2046 6C61 6335          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003C82  7368 2E2E 
00003C86  2E2E 00   
                    6336   @m68kde~1_23:
00003C8A  2425 3038 6337          dc.b      36,37,48,56,88,32,32,0
00003C8E  5820 2000 
                    6338   @m68kde~1_24:
00003C92  2000      6339          dc.b      32,0
                    6340   @m68kde~1_25:
00003C94  2E00      6341          dc.b      46,0
                    6342   @m68kde~1_26:
00003C96  2563 00   6343          dc.b      37,99,0
                    6344   @m68kde~1_27:
00003C9A  00        6345          dc.b      0
                    6346   @m68kde~1_28:
00003C9C  0D0A 0D0A 6347          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003CA0  2044 3020 
00003CA4  3D20 2425 
00003CA8  3038 58   
00003CAB  2020 4130 6348          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003CAF  203D 2024 
00003CB3  2530 3858 
00003CB7  00        
                    6349   @m68kde~1_29:
00003CB8  0D0A 2044 6350          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003CBC  3120 3D20 
00003CC0  2425 3038 
00003CC4  5820 20   
00003CC7  4131 203D 6351          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003CCB  2024 2530 
00003CCF  3858 00   
                    6352   @m68kde~1_30:
00003CD2  0D0A 2044 6353          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003CD6  3220 3D20 
00003CDA  2425 3038 
00003CDE  5820 20   
00003CE1  4132 203D 6354          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003CE5  2024 2530 
00003CE9  3858 00   
                    6355   @m68kde~1_31:
00003CEC  0D0A 2044 6356          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003CF0  3320 3D20 
00003CF4  2425 3038 
00003CF8  5820 20   
00003CFB  4133 203D 6357          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003CFF  2024 2530 
00003D03  3858 00   
                    6358   @m68kde~1_32:
00003D06  0D0A 2044 6359          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003D0A  3420 3D20 
00003D0E  2425 3038 
00003D12  5820 20   
00003D15  4134 203D 6360          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003D19  2024 2530 
00003D1D  3858 00   
                    6361   @m68kde~1_33:
00003D20  0D0A 2044 6362          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003D24  3520 3D20 
00003D28  2425 3038 
00003D2C  5820 20   
00003D2F  4135 203D 6363          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003D33  2024 2530 
00003D37  3858 00   
                    6364   @m68kde~1_34:
00003D3A  0D0A 2044 6365          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003D3E  3620 3D20 
00003D42  2425 3038 
00003D46  5820 20   
00003D49  4136 203D 6366          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003D4D  2024 2530 
00003D51  3858 00   
                    6367   @m68kde~1_35:
00003D54  0D0A 2044 6368          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003D58  3720 3D20 
00003D5C  2425 3038 
00003D60  5820 20   
00003D63  4137 203D 6369          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003D67  2024 2530 
00003D6B  3858 00   
                    6370   @m68kde~1_36:
00003D6E  0D0A 0D0A 6371          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003D72  5553 5020 
00003D76  3D20 2425 
00003D7A  3038 58   
00003D7D  2020 2841 6372          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003D81  3729 2055 
00003D85  7365 7220 
00003D89  5350      
00003D8B  00        6373          dc.b      0
                    6374   @m68kde~1_37:
00003D8C  0D0A 5353 6375          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003D90  5020 3D20 
00003D94  2425 3038 
00003D98  5820 20   
00003D9B  2841 3729 6376          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003D9F  2053 7570 
00003DA3  6572 7669 
00003DA7  73        
00003DA8  6F72 2053 6377          dc.b      111,114,32,83,80,0
00003DAC  5000      
                    6378   @m68kde~1_38:
00003DAE  0D0A 2053 6379          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003DB2  5220 3D20 
00003DB6  2425 3034 
00003DBA  5820 20   
00003DBD  2000      6380          dc.b      32,0
                    6381   @m68kde~1_39:
00003DC0  2020 205B 6382          dc.b      32,32,32,91,0
00003DC4  00        
                    6383   @m68kde~1_40:
00003DC6  0D0A 2050 6384          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003DCA  4320 3D20 
00003DCE  2425 3038 
00003DD2  5820 20   
00003DD5  00        6385          dc.b      0
                    6386   @m68kde~1_41:
00003DD6  5B40 2042 6387          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003DDA  5245 414B 
00003DDE  504F 494E 
00003DE2  545D 00   
                    6388   @m68kde~1_42:
00003DE6  0D0A 5750 6389          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003DEA  2564 203D 
00003DEE  2025 7300 
                    6390   @m68kde~1_43:
00003DF2  0D0A 0D0A 6391          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003DF6  0D0A 0D0A 
00003DFA  0D0A 0D0A 
00003DFE  5369 6E   
00003E01  676C 6520 6392          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003E05  5374 6570 
00003E09  2020 3A5B 
00003E0D  4F        
00003E0E  4E5D 00   6393          dc.b      78,93,0
                    6394   @m68kde~1_44:
00003E12  0D0A 4272 6395          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003E16  6561 6B20 
00003E1A  506F 696E 
00003E1E  74        
00003E1F  7320 3A5B 6396          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003E23  4469 7361 
00003E27  626C 6564 
00003E2B  5D        
00003E2C  00        6397          dc.b      0
                    6398   @m68kde~1_45:
00003E2E  0D0A 5072 6399          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003E32  6573 7320 
00003E36  3C53 5041 
00003E3A  4345      
00003E3C  3E20 746F 6400          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003E40  2045 7865 
00003E44  6375 7465 
00003E48  20        
00003E49  4E65 7874 6401          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003E4D  2049 6E73 
00003E51  7472 7563 
00003E55  7469 6F6E 6402          dc.b      116,105,111,110,0
00003E59  00        
                    6403   @m68kde~1_46:
00003E5A  0D0A 5072 6404          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003E5E  6573 7320 
00003E62  3C45 5343 
00003E66  3E20      
00003E68  746F 2052 6405          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003E6C  6573 756D 
00003E70  6520 5072 
00003E74  6F67 7261 6406          dc.b      111,103,114,97,109,0
00003E78  6D00      
                    6407   @m68kde~1_47:
00003E7A  0D0A 496C 6408          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003E7E  6C65 6761 
00003E82  6C20 4461 
00003E86  74        
00003E87  6120 5265 6409          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003E8B  6769 7374 
00003E8F  6572 203A 
00003E93  20        
00003E94  5573 6520 6410          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003E98  4430 2D44 
00003E9C  372E 2E2E 
00003EA0  2E2E      
00003EA2  0D0A 00   6411          dc.b      13,10,0
                    6412   @m68kde~1_48:
00003EA6  0D0A 4425 6413          dc.b      13,10,68,37,99,32,61,32,0
00003EAA  6320 3D20 
00003EAE  00        
                    6414   @m68kde~1_49:
00003EB0  0D0A 496C 6415          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003EB4  6C65 6761 
00003EB8  6C20 4164 
00003EBC  64        
00003EBD  7265 7373 6416          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003EC1  2052 6567 
00003EC5  6973 7465 
00003EC9  7220 3A20 6417          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003ECD  5573 6520 
00003ED1  4130 2D41 
00003ED5  372E      
00003ED7  2E2E 2E2E 6418          dc.b      46,46,46,46,13,10,0
00003EDB  0D0A 00   
                    6419   @m68kde~1_50:
00003EDE  0D0A 4125 6420          dc.b      13,10,65,37,99,32,61,32,0
00003EE2  6320 3D20 
00003EE6  00        
                    6421   @m68kde~1_51:
00003EE8  0D0A 5573 6422          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003EEC  6572 2053 
00003EF0  5020 3D20 
00003EF4  00        
                    6423   @m68kde~1_52:
00003EF6  0D0A 496C 6424          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003EFA  6C65 6761 
00003EFE  6C20 5265 
00003F02  67        
00003F03  6973 7465 6425          dc.b      105,115,116,101,114,46,46,46,46,0
00003F07  722E 2E2E 
00003F0B  2E00      
                    6426   @m68kde~1_53:
00003F0E  0D0A 5379 6427          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003F12  7374 656D 
00003F16  2053 5020 
00003F1A  3D        
00003F1B  2000      6428          dc.b      32,0
                    6429   @m68kde~1_54:
00003F1E  0D0A 5043 6430          dc.b      13,10,80,67,32,61,32,0
00003F22  203D 2000 
                    6431   @m68kde~1_55:
00003F26  0D0A 5352 6432          dc.b      13,10,83,82,32,61,32,0
00003F2A  203D 2000 
                    6433   @m68kde~1_56:
00003F2E  0D0A 496C 6434          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003F32  6C65 6761 
00003F36  6C20 5265 
00003F3A  67        
00003F3B  6973 7465 6435          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003F3F  723A 2055 
00003F43  7365 2041 
00003F47  30        
00003F48  2D41 372C 6436          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003F4C  2044 302D 
00003F50  4437 2C20 
00003F54  5353 50   
00003F57  2C20 5553 6437          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003F5B  502C 2050 
00003F5F  4320 6F72 
00003F63  2053      
00003F65  520D 0A00 6438          dc.b      82,13,10,0
                    6439   @m68kde~1_57:
00003F6A  0D0A 0D0A 6440          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003F6E  4E75 6D20 
00003F72  2020 2020 
00003F76  4164      
00003F78  6472 6573 6441          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003F7C  7320 2020 
00003F80  2020 2049 
00003F84  6E        
00003F85  7374 7275 6442          dc.b      115,116,114,117,99,116,105,111,110,0
00003F89  6374 696F 
00003F8D  6E00      
                    6443   @m68kde~1_58:
00003F90  0D0A 2D2D 6444          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003F94  2D20 2020 
00003F98  2020 2D2D 
00003F9C  2D2D 2D   
00003F9F  2D2D 2D2D 6445          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00003FA3  2020 2020 
00003FA7  2D2D 2D2D 
00003FAB  2D2D 2D   
00003FAE  2D2D 2D2D 6446          dc.b      45,45,45,45,0
00003FB2  00        
                    6447   @m68kde~1_59:
00003FB4  0D0A 4E6F 6448          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00003FB8  2042 7265 
00003FBC  616B 506F 
00003FC0  69        
00003FC1  6E74 7320 6449          dc.b      110,116,115,32,83,101,116,0
00003FC5  5365 7400 
                    6450   @m68kde~1_60:
00003FCA  0D0A 2533 6451          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00003FCE  6420 2020 
00003FD2  2020 2425 
00003FD6  3038 78   
00003FD9  00        6452          dc.b      0
                    6453   @m68kde~1_61:
00003FDA  0D0A 4E75 6454          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00003FDE  6D20 2020 
00003FE2  2020 4164 
00003FE6  6472      
00003FE8  6573 7300 6455          dc.b      101,115,115,0
                    6456   @m68kde~1_62:
00003FEC  0D0A 2D2D 6457          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003FF0  2D20 2020 
00003FF4  2020 2D2D 
00003FF8  2D2D 2D   
00003FFB  2D2D 2D2D 6458          dc.b      45,45,45,45,0
00003FFF  00        
                    6459   @m68kde~1_63:
00004000  0D0A 4E6F 6460          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004004  2057 6174 
00004008  6368 506F 
0000400C  69        
0000400D  6E74 7320 6461          dc.b      110,116,115,32,83,101,116,0
00004011  5365 7400 
                    6462   @m68kde~1_64:
00004016  0D0A 456E 6463          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000401A  7465 7220 
0000401E  4272 6561 
00004022  6B        
00004023  2050 6F69 6464          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004027  6E74 204E 
0000402B  756D 6265 
0000402F  72        
00004030  3A20 00   6465          dc.b      58,32,0
                    6466   @m68kde~1_65:
00004034  0D0A 496C 6467          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004038  6C65 6761 
0000403C  6C20 5261 
00004040  6E        
00004041  6765 203A 6468          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004045  2055 7365 
00004049  2030 202D 
0000404D  2037      
0000404F  00        6469          dc.b      0
                    6470   @m68kde~1_66:
00004050  0D0A 4272 6471          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004054  6561 6B20 
00004058  506F 696E 
0000405C  74        
0000405D  2043 6C65 6472          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004061  6172 6564 
00004065  2E2E 2E2E 
00004069  2E        
0000406A  0D0A 00   6473          dc.b      13,10,0
                    6474   @m68kde~1_67:
0000406E  0D0A 4272 6475          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004072  6561 6B20 
00004076  506F 696E 
0000407A  74        
0000407B  2077 6173 6476          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000407F  6E27 7420 
00004083  5365 742E 
00004087  2E        
00004088  2E2E 2E00 6477          dc.b      46,46,46,0
                    6478   @m68kde~1_68:
0000408C  0D0A 456E 6479          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004090  7465 7220 
00004094  5761 7463 
00004098  68        
00004099  2050 6F69 6480          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000409D  6E74 204E 
000040A1  756D 6265 
000040A5  72        
000040A6  3A20 00   6481          dc.b      58,32,0
                    6482   @m68kde~1_69:
000040AA  0D0A 5761 6483          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000040AE  7463 6820 
000040B2  506F 696E 
000040B6  74        
000040B7  2043 6C65 6484          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000040BB  6172 6564 
000040BF  2E2E 2E2E 
000040C3  2E        
000040C4  0D0A 00   6485          dc.b      13,10,0
                    6486   @m68kde~1_70:
000040C8  0D0A 5761 6487          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000040CC  7463 6820 
000040D0  506F 696E 
000040D4  74        
000040D5  2057 6173 6488          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000040D9  206E 6F74 
000040DD  2053 6574 
000040E1  2E        
000040E2  2E2E 2E2E 6489          dc.b      46,46,46,46,0
000040E6  00        
                    6490   @m68kde~1_71:
000040E8  0D0A 4E6F 6491          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000040EC  2046 5245 
000040F0  4520 4272 
000040F4  6561      
000040F6  6B20 506F 6492          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000040FA  696E 7473 
000040FE  2E2E 2E2E 
00004102  2E        
00004103  00        6493          dc.b      0
                    6494   @m68kde~1_72:
00004104  0D0A 4272 6495          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004108  6561 6B20 
0000410C  506F 696E 
00004110  74        
00004111  2041 6464 6496          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004115  7265 7373 
00004119  3A20 00   
                    6497   @m68kde~1_73:
0000411C  0D0A 4572 6498          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004120  726F 7220 
00004124  3A20 4272 
00004128  65        
00004129  616B 2050 6499          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000412D  6F69 6E74 
00004131  7320 4341 
00004135  4E        
00004136  4E4F 5420 6500          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000413A  6265 2073 
0000413E  6574 2061 
00004142  74        
00004143  204F 4444 6501          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004147  2061 6464 
0000414B  7265 7373 
0000414F  65        
00004150  7300      6502          dc.b      115,0
                    6503   @m68kde~1_74:
00004152  0D0A 4572 6504          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004156  726F 7220 
0000415A  3A20 4272 
0000415E  65        
0000415F  616B 2050 6505          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004163  6F69 6E74 
00004167  7320 4341 
0000416B  4E        
0000416C  4E4F 5420 6506          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004170  6265 2073 
00004174  6574 2066 
00004178  6F        
00004179  7220 524F 6507          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000417D  4D20 696E 
00004181  2052 616E 
00004185  67        
00004186  6520 3A20 6508          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000418A  5B24 302D 
0000418E  2430 3030 
00004192  3037 46   
00004195  4646 5D00 6509          dc.b      70,70,93,0
                    6510   @m68kde~1_75:
0000419A  0D0A 4572 6511          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000419E  726F 723A 
000041A2  2042 7265 
000041A6  61        
000041A7  6B20 506F 6512          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000041AB  696E 7420 
000041AF  416C 7265 
000041B3  6164 7920 6513          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000041B7  4578 6973 
000041BB  7473 2061 
000041BF  74        
000041C0  2041 6464 6514          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000041C4  7265 7373 
000041C8  203A 2025 
000041CC  30        
000041CD  3878 0D0A 6515          dc.b      56,120,13,10,0
000041D1  00        
                    6516   @m68kde~1_76:
000041D2  0D0A 4272 6517          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000041D6  6561 6B20 
000041DA  506F 696E 
000041DE  74        
000041DF  2053 6574 6518          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000041E3  2061 7420 
000041E7  4164 6472 
000041EB  65        
000041EC  7373 3A20 6519          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000041F0  5B24 2530 
000041F4  3878 5D00 
                    6520   @m68kde~1_77:
000041F8  0D0A 4E6F 6521          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000041FC  2046 5245 
00004200  4520 5761 
00004204  7463      
00004206  6820 506F 6522          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000420A  696E 7473 
0000420E  2E2E 2E2E 
00004212  2E        
00004213  00        6523          dc.b      0
                    6524   @m68kde~1_78:
00004214  0D0A 5761 6525          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004218  7463 6820 
0000421C  506F 696E 
00004220  74        
00004221  2041 6464 6526          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004225  7265 7373 
00004229  3A20 00   
                    6527   @m68kde~1_79:
0000422C  0D0A 4572 6528          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004230  726F 723A 
00004234  2057 6174 
00004238  63        
00004239  6820 506F 6529          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000423D  696E 7420 
00004241  416C 7265 
00004245  6164 7920 6530          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004249  5365 7420 
0000424D  6174 2041 
00004251  64        
00004252  6472 6573 6531          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004256  7320 3A20 
0000425A  2530 3878 
0000425E  0D        
0000425F  0A00      6532          dc.b      10,0
                    6533   @m68kde~1_80:
00004262  0D0A 5761 6534          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004266  7463 6820 
0000426A  506F 696E 
0000426E  74        
0000426F  2053 6574 6535          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004273  2061 7420 
00004277  4164 6472 
0000427B  65        
0000427C  7373 3A20 6536          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004280  5B24 2530 
00004284  3878 5D00 
                    6537   @m68kde~1_81:
00004288  0D0A 0D0A 6538          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000428C  0D0A 0D0A 
00004290  4042 5245 
00004294  414B 50   
00004297  4F49 4E54 6539          dc.b      79,73,78,84,0
0000429B  00        
                    6540   @m68kde~1_82:
0000429C  0D0A 5369 6541          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000042A0  6E67 6C65 
000042A4  2053 7465 
000042A8  70        
000042A9  203A 205B 6542          dc.b      32,58,32,91,79,78,93,0
000042AD  4F4E 5D00 
                    6543   @m68kde~1_83:
000042B2  0D0A 4272 6544          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000042B6  6561 6B50 
000042BA  6F69 6E74 
000042BE  73        
000042BF  203A 205B 6545          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000042C3  456E 6162 
000042C7  6C65 645D 
000042CB  00        
                    6546   @m68kde~1_84:
000042CC  0D0A 5072 6547          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000042D0  6573 7320 
000042D4  3C45 5343 
000042D8  3E20      
000042DA  746F 2052 6548          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000042DE  6573 756D 
000042E2  6520 5573 
000042E6  6572 2050 6549          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000042EA  726F 6772 
000042EE  616D 0D0A 
000042F2  00        
                    6550   @m68kde~1_85:
000042F4  0D0A 556E 6551          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000042F8  6B6E 6F77 
000042FC  6E20 436F 
00004300  6D        
00004301  6D61 6E64 6552          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004305  2E2E 2E2E 
00004309  2E0D 0A00 
                    6553   @m68kde~1_86:
0000430E  0D0A 5072 6554          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004312  6F67 7261 
00004316  6D20 456E 
0000431A  64        
0000431B  6564 2028 6555          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000431F  5452 4150 
00004323  2023 3135 
00004327  292E      
00004329  2E2E 2E00 6556          dc.b      46,46,46,0
                    6557   @m68kde~1_87:
0000432E  0D0A 4B69 6558          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004332  6C6C 2041 
00004336  6C6C 2042 
0000433A  72        
0000433B  6561 6B20 6559          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000433F  506F 696E 
00004343  7473 2E2E 
00004347  2E        
00004348  2879 2F6E 6560          dc.b      40,121,47,110,41,63,0
0000434C  293F 00   
                    6561   @m68kde~1_88:
00004350  0D0A 4B69 6562          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004354  6C6C 2041 
00004358  6C6C 2057 
0000435C  61        
0000435D  7463 6820 6563          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004361  506F 696E 
00004365  7473 2E2E 
00004369  2E        
0000436A  2879 2F6E 6564          dc.b      40,121,47,110,41,63,0
0000436E  293F 00   
                    6565   @m68kde~1_89:
00004372  0D0A 2D2D 6566          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004376  2D2D 2D2D 
0000437A  2D2D 2D2D 
0000437E  2D2D 2D   
00004381  2D2D 2D2D 6567          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004385  2D2D 2D2D 
00004389  2D2D 2D2D 
0000438D  2D2D 2D   
00004390  2D2D 2D2D 6568          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004394  2D2D 2D2D 
00004398  2D2D 2D2D 
0000439C  2D2D 2D   
0000439F  2D2D 2D2D 6569          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000043A3  2D2D 2D2D 
000043A7  2D2D 2D2D 
000043AB  2D2D 2D   
000043AE  2D2D 2D2D 6570          dc.b      45,45,45,45,45,45,0
000043B2  2D2D 00   
                    6571   @m68kde~1_90:
000043B6  0D0A 2020 6572          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000043BA  4465 6275 
000043BE  6767 6572 
000043C2  20        
000043C3  436F 6D6D 6573          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000043C7  616E 6420 
000043CB  5375 6D6D 
000043CF  6172 7900 6574          dc.b      97,114,121,0
                    6575   @m68kde~1_91:
000043D4  0D0A 2020 6576          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000043D8  2E28 7265 
000043DC  6729 2020 
000043E0  2020      
000043E2  2020 202D 6577          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000043E6  2043 6861 
000043EA  6E67 6520 
000043EE  5265      
000043F0  6769 7374 6578          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000043F4  6572 733A 
000043F8  2065 2E67 
000043FC  2041 302D 6579          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004400  4137 2C44 
00004404  302D 4437 
00004408  2C50 43   
0000440B  2C53 5350 6580          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000440F  2C55 5350 
00004413  2C53 5200 
                    6581   @m68kde~1_92:
00004418  0D0A 2020 6582          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000441C  4244 2F42 
00004420  532F 4243 
00004424  2F42 4B   
00004427  2020 2D20 6583          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000442B  4272 6561 
0000442F  6B20 506F 
00004433  69        
00004434  6E74 3A20 6584          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004438  4469 7370 
0000443C  6C61 792F 
00004440  53        
00004441  6574 2F43 6585          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004445  6C65 6172 
00004449  2F4B 696C 
0000444D  6C        
0000444E  00        6586          dc.b      0
                    6587   @m68kde~1_93:
00004450  0D0A 2020 6588          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004454  4320 2020 
00004458  2020 2020 
0000445C  2020 20   
0000445F  2020 2D20 6589          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004463  436F 7079 
00004467  2050 726F 
0000446B  67        
0000446C  7261 6D20 6590          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004470  6672 6F6D 
00004474  2046 6C61 
00004478  73        
00004479  6820 746F 6591          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000447D  204D 6169 
00004481  6E20 4D65 
00004485  6D        
00004486  6F72 7900 6592          dc.b      111,114,121,0
                    6593   @m68kde~1_94:
0000448A  0D0A 2020 6594          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
0000448E  4420 2020 
00004492  2020 2020 
00004496  2020 20   
00004499  2020 2D20 6595          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000449D  4475 6D70 
000044A1  204D 656D 
000044A5  6F        
000044A6  7279 2043 6596          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000044AA  6F6E 7465 
000044AE  6E74 7320 
000044B2  746F 2053 6597          dc.b      116,111,32,83,99,114,101,101,110,0
000044B6  6372 6565 
000044BA  6E00      
                    6598   @m68kde~1_95:
000044BC  0D0A 2020 6599          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000044C0  4520 2020 
000044C4  2020 2020 
000044C8  2020 20   
000044CB  2020 2D20 6600          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000044CF  456E 7465 
000044D3  7220 5374 
000044D7  72        
000044D8  696E 6720 6601          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000044DC  696E 746F 
000044E0  204D 656D 
000044E4  6F72 7900 6602          dc.b      111,114,121,0
                    6603   @m68kde~1_96:
000044E8  0D0A 2020 6604          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000044EC  4620 2020 
000044F0  2020 2020 
000044F4  2020 20   
000044F7  2020 2D20 6605          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000044FB  4669 6C6C 
000044FF  204D 656D 
00004503  6F        
00004504  7279 2077 6606          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004508  6974 6820 
0000450C  4461 7461 
00004510  00        
                    6607   @m68kde~1_97:
00004512  0D0A 2020 6608          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004516  4720 2020 
0000451A  2020 2020 
0000451E  2020 20   
00004521  2020 2D20 6609          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004525  476F 2050 
00004529  726F 6772 
0000452D  61        
0000452E  6D20 5374 6610          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004532  6172 7469 
00004536  6E67 2061 
0000453A  74        
0000453B  2041 6464 6611          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000453F  7265 7373 
00004543  3A20 2425 
00004547  30        
00004548  3858 00   6612          dc.b      56,88,0
                    6613   @m68kde~1_98:
0000454C  0D0A 2020 6614          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004550  4C20 2020 
00004554  2020 2020 
00004558  2020 20   
0000455B  2020 2D20 6615          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0000455F  4C6F 6164 
00004563  2050 726F 
00004567  67        
00004568  7261 6D20 6616          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
0000456C  282E 4845 
00004570  5820 6669 
00004574  6C        
00004575  6529 2066 6617          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004579  726F 6D20 
0000457D  4C61 7074 
00004581  6F        
00004582  7000      6618          dc.b      112,0
                    6619   @m68kde~1_99:
00004584  0D0A 2020 6620          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004588  4D20 2020 
0000458C  2020 2020 
00004590  2020 20   
00004593  2020 2D20 6621          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004597  4D65 6D6F 
0000459B  7279 2045 
0000459F  78        
000045A0  616D 696E 6622          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000045A4  6520 616E 
000045A8  6420 4368 
000045AC  61        
000045AD  6E67 6500 6623          dc.b      110,103,101,0
                    6624   @m68kde~1_100:
000045B2  0D0A 2020 6625          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000045B6  5020 2020 
000045BA  2020 2020 
000045BE  2020 20   
000045C1  2020 2D20 6626          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000045C5  5072 6F67 
000045C9  7261 6D20 
000045CD  46        
000045CE  6C61 7368 6627          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000045D2  204D 656D 
000045D6  6F72 7920 
000045DA  7769 7468 6628          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000045DE  2055 7365 
000045E2  7220 5072 
000045E6  6F67 7261 6629          dc.b      111,103,114,97,109,0
000045EA  6D00      
                    6630   @m68kde~1_101:
000045EC  0D0A 2020 6631          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000045F0  5220 2020 
000045F4  2020 2020 
000045F8  2020 20   
000045FB  2020 2D20 6632          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000045FF  4469 7370 
00004603  6C61 7920 
00004607  36        
00004608  3830 3030 6633          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000460C  2052 6567 
00004610  6973 7465 
00004614  72        
00004615  7300      6634          dc.b      115,0
                    6635   @m68kde~1_102:
00004618  0D0A 2020 6636          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000461C  5320 2020 
00004620  2020 2020 
00004624  2020 20   
00004627  2020 2D20 6637          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000462B  546F 6767 
0000462F  6C65 204F 
00004633  4E        
00004634  2F4F 4646 6638          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004638  2053 696E 
0000463C  676C 6520 
00004640  53        
00004641  7465 7020 6639          dc.b      116,101,112,32,77,111,100,101,0
00004645  4D6F 6465 
00004649  00        
                    6640   @m68kde~1_103:
0000464A  0D0A 2020 6641          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000464E  544D 2020 
00004652  2020 2020 
00004656  2020 20   
00004659  2020 2D20 6642          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000465D  5465 7374 
00004661  204D 656D 
00004665  6F        
00004666  7279 00   6643          dc.b      114,121,0
                    6644   @m68kde~1_104:
0000466A  0D0A 2020 6645          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
0000466E  5453 2020 
00004672  2020 2020 
00004676  2020 20   
00004679  2020 2D20 6646          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000467D  5465 7374 
00004681  2053 7769 
00004685  74        
00004686  6368 6573 6647          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000468A  3A20 5357 
0000468E  372D 3000 
                    6648   @m68kde~1_105:
00004692  0D0A 2020 6649          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004696  5444 2020 
0000469A  2020 2020 
0000469E  2020 20   
000046A1  2020 2D20 6650          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000046A5  5465 7374 
000046A9  2044 6973 
000046AD  70        
000046AE  6C61 7973 6651          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000046B2  3A20 4C45 
000046B6  4473 2061 
000046BA  6E        
000046BB  6420 372D 6652          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000046BF  5365 676D 
000046C3  656E 7400 
                    6653   @m68kde~1_106:
000046C8  0D0A 2020 6654          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000046CC  5744 2F57 
000046D0  532F 5743 
000046D4  2F57 4B   
000046D7  2020 2D20 6655          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000046DB  5761 7463 
000046DF  6820 506F 
000046E3  696E      
000046E5  743A 2044 6656          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000046E9  6973 706C 
000046ED  6179 2F53 
000046F1  65        
000046F2  742F 436C 6657          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000046F6  6561 722F 
000046FA  4B69 6C6C 
000046FE  00        
                    6658   @m68kde~1_107:
00004700  0D0A 2300 6659          dc.b      13,10,35,0
                    6660   @m68kde~1_108:
00004704  0D0A 5072 6661          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004708  6F67 7261 
0000470C  6D20 5275 
00004710  6E        
00004711  6E69 6E67 6662          dc.b      110,105,110,103,46,46,46,46,46,0
00004715  2E2E 2E2E 
00004719  2E00      
                    6663   @m68kde~1_109:
0000471C  0D0A 5072 6664          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004720  6573 7320 
00004724  3C52 4553 
00004728  4554      
0000472A  3E20 6275 6665          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000472E  7474 6F6E 
00004732  203C 4B65 
00004736  79        
00004737  303E 206F 6666          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000473B  6E20 4445 
0000473F  3120 746F 
00004743  2073      
00004745  746F 7000 6667          dc.b      116,111,112,0
                    6668   @m68kde~1_110:
0000474A  0D0A 4572 6669          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000474E  726F 723A 
00004752  2050 7265 
00004756  73        
00004757  7320 2747 6670          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000475B  2720 6669 
0000475F  7273 7420 
00004763  74        
00004764  6F20 7374 6671          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004768  6172 7420 
0000476C  7072 6F67 
00004770  7261 6D00 6672          dc.b      114,97,109,0
                    6673   @m68kde~1_111:
00004774  0D0A 5369 6674          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004778  6E67 6C65 
0000477C  2053 7465 
00004780  70        
00004781  2020 3A5B 6675          dc.b      32,32,58,91,79,78,93,0
00004785  4F4E 5D00 
                    6676   @m68kde~1_112:
0000478A  0D0A 5072 6677          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
0000478E  6573 7320 
00004792  2747 2720 
00004796  74        
00004797  6F20 5472 6678          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000479B  6163 6520 
0000479F  5072 6F67 
000047A3  72        
000047A4  616D 2066 6679          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000047A8  726F 6D20 
000047AC  6164 6472 
000047B0  6573 7320 6680          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000047B4  2425 582E 
000047B8  2E2E 2E2E 
000047BC  00        
                    6681   @m68kde~1_113:
000047BE  0D0A 5075 6682          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000047C2  7368 203C 
000047C6  5245 5345 
000047CA  5420      
000047CC  4275 7474 6683          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000047D0  6F6E 3E20 
000047D4  746F 2053 
000047D8  74        
000047D9  6F70 2E2E 6684          dc.b      111,112,46,46,46,46,46,0
000047DD  2E2E 2E00 
                    6685   @m68kde~1_114:
000047E2  0D0A 5369 6686          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000047E6  6E67 6C65 
000047EA  2053 7465 
000047EE  70        
000047EF  203A 205B 6687          dc.b      32,58,32,91,79,70,70,93,0
000047F3  4F46 465D 
000047F7  00        
                    6688   @m68kde~1_115:
000047F8  0D0A 4272 6689          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047FC  6561 6B20 
00004800  506F 696E 
00004804  74        
00004805  7320 3A5B 6690          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004809  456E 6162 
0000480D  6C65 645D 
00004811  00        
                    6691   @m68kde~1_116:
00004812  0D0A 5072 6692          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004816  6573 7320 
0000481A  3C45 5343 
0000481E  3E20      
00004820  746F 2052 6693          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004824  6573 756D 
00004828  6520 5573 
0000482C  6572 2050 6694          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004830  726F 6772 
00004834  616D 2E2E 
00004838  2E        
00004839  2E2E 00   6695          dc.b      46,46,0
                    6696   @m68kde~1_117:
0000483C  0D0A 5369 6697          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004840  6E67 6C65 
00004844  2053 7465 
00004848  70        
00004849  2020 3A5B 6698          dc.b      32,32,58,91,79,70,70,93,0
0000484D  4F46 465D 
00004851  00        
                    6699   @m68kde~1_118:
00004852  0D0A 0D0A 6700          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004856  5072 6F67 
0000485A  7261 6D20 
0000485E  41        
0000485F  424F 5254 6701          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004863  2021 2121 
00004867  2121 210D 
0000486B  0A00      
                    6702   @m68kde~1_119:
0000486E  2573 0D0A 6703          dc.b      37,115,13,10,0
00004872  00        
                    6704   @m68kde~1_120:
00004874  0D0A 0D0A 6705          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004878  5072 6F67 
0000487C  7261 6D20 
00004880  41        
00004881  424F 5254 6706          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004885  2021 2121 
00004889  2121 00   
                    6707   @m68kde~1_121:
0000488C  0D0A 556E 6708          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004890  6861 6E64 
00004894  6C65 6420 
00004898  49        
00004899  6E74 6572 6709          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000489D  7275 7074 
000048A1  3A20 4952 
000048A5  5125 6420 6710          dc.b      81,37,100,32,33,33,33,33,33,0
000048A9  2121 2121 
000048AD  2100      
                    6711   @m68kde~1_122:
000048B0  4144 4452 6712          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000048B4  4553 5320 
000048B8  4552 524F 
000048BC  523A 20   
000048BF  3136 206F 6713          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000048C3  7220 3332 
000048C7  2042 6974 
000048CB  2054      
000048CD  7261 6E73 6714          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000048D1  6665 7220 
000048D5  746F 2F66 
000048D9  726F 6D20 6715          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000048DD  616E 204F 
000048E1  4444 2041 
000048E5  64        
000048E6  6472 6573 6716          dc.b      100,114,101,115,115,46,46,46,46,0
000048EA  732E 2E2E 
000048EE  2E00      
                    6717   @m68kde~1_123:
000048F0  556E 6861 6718          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000048F4  6E64 6C65 
000048F8  6420 5472 
000048FC  6170 2021 6719          dc.b      97,112,32,33,33,33,33,33,0
00004900  2121 2121 
00004904  00        
                    6720   @m68kde~1_124:
00004906  4255 5320 6721          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000490A  4572 726F 
0000490E  7221 00   
                    6722   @m68kde~1_125:
00004912  4144 4452 6723          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004916  4553 5320 
0000491A  4572 726F 
0000491E  7221      
00004920  00        6724          dc.b      0
                    6725   @m68kde~1_126:
00004922  494C 4C45 6726          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004926  4741 4C20 
0000492A  494E 5354 
0000492E  5255 43   
00004931  5449 4F4E 6727          dc.b      84,73,79,78,0
00004935  00        
                    6728   @m68kde~1_127:
00004936  4449 5649 6729          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000493A  4445 2042 
0000493E  5920 5A45 
00004942  524F 00   
                    6730   @m68kde~1_128:
00004946  2743 484B 6731          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000494A  2720 494E 
0000494E  5354 5255 
00004952  4354 49   
00004955  4F4E 00   6732          dc.b      79,78,0
                    6733   @m68kde~1_129:
00004958  5452 4150 6734          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000495C  5620 494E 
00004960  5354 5255 
00004964  4354 49   
00004967  4F4E 00   6735          dc.b      79,78,0
                    6736   @m68kde~1_130:
0000496A  5052 4956 6737          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000496E  494C 4547 
00004972  4520 5649 
00004976  4F4C 41   
00004979  5449 4F4E 6738          dc.b      84,73,79,78,0
0000497D  00        
                    6739   @m68kde~1_131:
0000497E  554E 494E 6740          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004982  4954 4941 
00004986  4C49 5345 
0000498A  4420 49   
0000498D  5251 00   6741          dc.b      82,81,0
                    6742   @m68kde~1_132:
00004990  5350 5552 6743          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004994  494F 5553 
00004998  2049 5251 
0000499C  00        
                    6744   @m68kde~1_133:
0000499E  0D0A 5374 6745          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000049A2  6172 7420 
000049A6  4164 6472 
000049AA  65        
000049AB  7373 2069 6746          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000049AF  6E20 4D65 
000049B3  6D6F 7279 
000049B7  3A20 00   6747          dc.b      58,32,0
                    6748   @m68kde~1_134:
000049BA  0D0A 456E 6749          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000049BE  7465 7220 
000049C2  5374 7269 
000049C6  6E        
000049C7  6720 2845 6750          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000049CB  5343 2074 
000049CF  6F20 656E 
000049D3  64        
000049D4  2920 3A00 6751          dc.b      41,32,58,0
                    6752   @m68kde~1_135:
000049D8  0D0A 5072 6753          dc.b      13,10,80,114,111,118,105,100,101,32,116,104
000049DC  6F76 6964 
000049E0  6520 7468 
000049E4  6520 7374 6754          dc.b      101,32,115,116,97,114,116,32,97,100,100,114
000049E8  6172 7420 
000049EC  6164 6472 
000049F0  6573 7320 6755          dc.b      101,115,115,32,111,102,32,116,104,101,32,116
000049F4  6F66 2074 
000049F8  6865 2074 
000049FC  6573 742E 6756          dc.b      101,115,116,46,10,0
00004A00  0A00      
                    6757   @m68kde~1_136:
00004A02  5468 6520 6758          dc.b      84,104,101,32,115,116,97,114,116,32,97,100,100
00004A06  7374 6172 
00004A0A  7420 6164 
00004A0E  64        
00004A0F  7265 7373 6759          dc.b      114,101,115,115,32,105,115,32,115,109,97,108
00004A13  2069 7320 
00004A17  736D 616C 
00004A1B  6C65 7220 6760          dc.b      108,101,114,32,116,104,97,110,32,48,120,102
00004A1F  7468 616E 
00004A23  2030 7866 
00004A27  3030 3030 6761          dc.b      48,48,48,48,48,48,48,44,32,105,110,118,97,108
00004A2B  3030 302C 
00004A2F  2069 6E76 
00004A33  616C      
00004A35  6964 210A 6762          dc.b      105,100,33,10,0
00004A39  00        
                    6763   @m68kde~1_137:
00004A3A  5468 6520 6764          dc.b      84,104,101,32,115,116,97,114,116,32,97,100,100
00004A3E  7374 6172 
00004A42  7420 6164 
00004A46  64        
00004A47  7265 7373 6765          dc.b      114,101,115,115,32,105,115,32,98,105,103,103
00004A4B  2069 7320 
00004A4F  6269 6767 
00004A53  6572 2074 6766          dc.b      101,114,32,116,104,97,110,32,48,120,102,48,48
00004A57  6861 6E20 
00004A5B  3078 6630 
00004A5F  30        
00004A60  3366 6666 6767          dc.b      51,102,102,102,102,44,32,105,110,118,97,108
00004A64  662C 2069 
00004A68  6E76 616C 
00004A6C  6964 210A 6768          dc.b      105,100,33,10,0
00004A70  00        
                    6769   @m68kde~1_138:
00004A72  5468 6520 6770          dc.b      84,104,101,32,115,116,97,114,116,32,97,100,100
00004A76  7374 6172 
00004A7A  7420 6164 
00004A7E  64        
00004A7F  7265 7373 6771          dc.b      114,101,115,115,32,112,114,111,118,105,100,101
00004A83  2070 726F 
00004A87  7669 6465 
00004A8B  6420 6973 6772          dc.b      100,32,105,115,32,111,100,100,44,32,110,101
00004A8F  206F 6464 
00004A93  2C20 6E65 
00004A97  6564 2061 6773          dc.b      101,100,32,97,110,32,101,118,101,110,32,111
00004A9B  6E20 6576 
00004A9F  656E 206F 
00004AA3  6E65 210A 6774          dc.b      110,101,33,10,0
00004AA7  00        
                    6775   @m68kde~1_139:
00004AA8  5374 6172 6776          dc.b      83,116,97,114,116,32,97,100,100,114,101,115
00004AAC  7420 6164 
00004AB0  6472 6573 
00004AB4  7320 7661 6777          dc.b      115,32,118,97,108,105,100,46,10,0
00004AB8  6C69 642E 
00004ABC  0A00      
                    6778   @m68kde~1_140:
00004ABE  0D0A 5072 6779          dc.b      13,10,80,114,111,118,105,100,101,32,116,104
00004AC2  6F76 6964 
00004AC6  6520 7468 
00004ACA  6520 656E 6780          dc.b      101,32,101,110,100,32,97,100,100,114,101,115
00004ACE  6420 6164 
00004AD2  6472 6573 
00004AD6  7320 6F66 6781          dc.b      115,32,111,102,32,116,104,101,32,116,101,115
00004ADA  2074 6865 
00004ADE  2074 6573 
00004AE2  742E 0A00 6782          dc.b      116,46,10,0
                    6783   @m68kde~1_141:
00004AE6  5468 6520 6784          dc.b      84,104,101,32,101,110,100,32,97,100,100,114
00004AEA  656E 6420 
00004AEE  6164 6472 
00004AF2  6573 7320 6785          dc.b      101,115,115,32,105,115,32,115,109,97,108,108
00004AF6  6973 2073 
00004AFA  6D61 6C6C 
00004AFE  6572 2074 6786          dc.b      101,114,32,116,104,97,110,32,48,120,102,48,48
00004B02  6861 6E20 
00004B06  3078 6630 
00004B0A  30        
00004B0B  3030 3030 6787          dc.b      48,48,48,48,48,44,32,105,110,118,97,108,105
00004B0F  302C 2069 
00004B13  6E76 616C 
00004B17  69        
00004B18  6421 0A00 6788          dc.b      100,33,10,0
                    6789   @m68kde~1_142:
00004B1C  5468 6520 6790          dc.b      84,104,101,32,101,110,100,32,97,100,100,114
00004B20  656E 6420 
00004B24  6164 6472 
00004B28  6573 7320 6791          dc.b      101,115,115,32,105,115,32,98,105,103,103,101
00004B2C  6973 2062 
00004B30  6967 6765 
00004B34  7220 7468 6792          dc.b      114,32,116,104,97,110,32,48,120,102,48,48,51
00004B38  616E 2030 
00004B3C  7866 3030 
00004B40  33        
00004B41  6666 6666 6793          dc.b      102,102,102,102,44,32,105,110,118,97,108,105
00004B45  2C20 696E 
00004B49  7661 6C69 
00004B4D  6421 0A00 6794          dc.b      100,33,10,0
                    6795   @m68kde~1_143:
00004B52  5468 6520 6796          dc.b      84,104,101,32,101,110,100,32,97,100,100,114
00004B56  656E 6420 
00004B5A  6164 6472 
00004B5E  6573 7320 6797          dc.b      101,115,115,32,112,114,111,118,105,100,101,100
00004B62  7072 6F76 
00004B66  6964 6564 
00004B6A  2069 7320 6798          dc.b      32,105,115,32,111,100,100,44,32,110,101,101
00004B6E  6F64 642C 
00004B72  206E 6565 
00004B76  6420 616E 6799          dc.b      100,32,97,110,32,101,118,101,110,32,111,110
00004B7A  2065 7665 
00004B7E  6E20 6F6E 
00004B82  6521 0A00 6800          dc.b      101,33,10,0
                    6801   @m68kde~1_144:
00004B86  456E 6420 6802          dc.b      69,110,100,32,97,100,100,114,101,115,115,32
00004B8A  6164 6472 
00004B8E  6573 7320 
00004B92  7661 6C69 6803          dc.b      118,97,108,105,100,46,10,0
00004B96  642E 0A00 
                    6804   @m68kde~1_145:
00004B9A  5468 6520 6805          dc.b      84,104,101,32,115,116,97,114,116,32,97,100,100
00004B9E  7374 6172 
00004BA2  7420 6164 
00004BA6  64        
00004BA7  7265 7373 6806          dc.b      114,101,115,115,32,105,115,32,115,109,97,108
00004BAB  2069 7320 
00004BAF  736D 616C 
00004BB3  6C65 7220 6807          dc.b      108,101,114,32,116,104,97,110,32,48,120,48,56
00004BB7  7468 616E 
00004BBB  2030 7830 
00004BBF  38        
00004BC0  3030 3030 6808          dc.b      48,48,48,48,48,48,44,32,105,110,118,97,108,105
00004BC4  3030 2C20 
00004BC8  696E 7661 
00004BCC  6C69      
00004BCE  6421 0A00 6809          dc.b      100,33,10,0
                    6810   @m68kde~1_146:
00004BD2  5468 6520 6811          dc.b      84,104,101,32,115,116,97,114,116,32,97,100,100
00004BD6  7374 6172 
00004BDA  7420 6164 
00004BDE  64        
00004BDF  7265 7373 6812          dc.b      114,101,115,115,32,105,115,32,98,105,103,103
00004BE3  2069 7320 
00004BE7  6269 6767 
00004BEB  6572 2074 6813          dc.b      101,114,32,116,104,97,110,32,48,120,48,98,102
00004BEF  6861 6E20 
00004BF3  3078 3062 
00004BF7  66        
00004BF8  6666 6666 6814          dc.b      102,102,102,102,102,44,32,105,110,118,97,108
00004BFC  662C 2069 
00004C00  6E76 616C 
00004C04  6964 210A 6815          dc.b      105,100,33,10,0
00004C08  00        
                    6816   @m68kde~1_147:
00004C0A  5468 6520 6817          dc.b      84,104,101,32,101,110,100,32,97,100,100,114
00004C0E  656E 6420 
00004C12  6164 6472 
00004C16  6573 7320 6818          dc.b      101,115,115,32,105,115,32,115,109,97,108,108
00004C1A  6973 2073 
00004C1E  6D61 6C6C 
00004C22  6572 2074 6819          dc.b      101,114,32,116,104,97,110,32,48,120,48,56,48
00004C26  6861 6E20 
00004C2A  3078 3038 
00004C2E  30        
00004C2F  3030 3030 6820          dc.b      48,48,48,48,48,44,32,105,110,118,97,108,105
00004C33  302C 2069 
00004C37  6E76 616C 
00004C3B  69        
00004C3C  6421 0A00 6821          dc.b      100,33,10,0
                    6822   @m68kde~1_148:
00004C40  5468 6520 6823          dc.b      84,104,101,32,101,110,100,32,97,100,100,114
00004C44  656E 6420 
00004C48  6164 6472 
00004C4C  6573 7320 6824          dc.b      101,115,115,32,105,115,32,98,105,103,103,101
00004C50  6973 2062 
00004C54  6967 6765 
00004C58  7220 7468 6825          dc.b      114,32,116,104,97,110,32,48,120,48,98,102,102
00004C5C  616E 2030 
00004C60  7830 6266 
00004C64  66        
00004C65  6666 6666 6826          dc.b      102,102,102,102,44,32,105,110,118,97,108,105
00004C69  2C20 696E 
00004C6D  7661 6C69 
00004C71  6421 0A00 6827          dc.b      100,33,10,0
                    6828   @m68kde~1_149:
00004C76  4C6F 6361 6829          dc.b      76,111,99,97,116,105,111,110,32,37,120,44,32
00004C7A  7469 6F6E 
00004C7E  2025 782C 
00004C82  20        
00004C83  7772 6974 6830          dc.b      119,114,105,116,101,32,100,97,116,97,58,32,37
00004C87  6520 6461 
00004C8B  7461 3A20 
00004C8F  25        
00004C90  782C 2072 6831          dc.b      120,44,32,114,101,97,100,32,100,97,116,97,58
00004C94  6561 6420 
00004C98  6461 7461 
00004C9C  3A        
00004C9D  2025 780A 6832          dc.b      32,37,120,10,0
00004CA1  00        
                    6833   @m68kde~1_150:
00004CA2  5465 7374 6834          dc.b      84,101,115,116,32,102,97,105,108,101,100,32
00004CA6  2066 6169 
00004CAA  6C65 6420 
00004CAE  6174 206C 6835          dc.b      97,116,32,108,111,99,97,116,105,111,110,32,37
00004CB2  6F63 6174 
00004CB6  696F 6E20 
00004CBA  25        
00004CBB  7821 0A00 6836          dc.b      120,33,10,0
                    6837   @m68kde~1_151:
00004CC0  0D0A 446F 6838          dc.b      13,10,68,111,32,121,111,117,32,119,97,110,116
00004CC4  2079 6F75 
00004CC8  2077 616E 
00004CCC  74        
00004CCD  2074 6865 6839          dc.b      32,116,104,101,32,100,97,116,97,32,116,111,32
00004CD1  2064 6174 
00004CD5  6120 746F 
00004CD9  20        
00004CDA  6265 2031 6840          dc.b      98,101,32,49,46,32,98,121,116,101,115,44,32
00004CDE  2E20 6279 
00004CE2  7465 732C 
00004CE6  20        
00004CE7  322E 2077 6841          dc.b      50,46,32,119,111,114,100,115,44,32,111,114,32
00004CEB  6F72 6473 
00004CEF  2C20 6F72 
00004CF3  20        
00004CF4  332E 206C 6842          dc.b      51,46,32,108,111,110,103,32,119,111,114,100
00004CF8  6F6E 6720 
00004CFC  776F 7264 
00004D00  733F 2050 6843          dc.b      115,63,32,80,114,111,118,105,100,101,32,116
00004D04  726F 7669 
00004D08  6465 2074 
00004D0C  6865 2069 6844          dc.b      104,101,32,105,110,116,101,103,101,114,32,98
00004D10  6E74 6567 
00004D14  6572 2062 
00004D18  656C 6F77 6845          dc.b      101,108,111,119,46,10,0
00004D1C  2E0A 00   
                    6846   @m68kde~1_152:
00004D20  0D0A 446F 6847          dc.b      13,10,68,111,32,121,111,117,32,119,97,110,116
00004D24  2079 6F75 
00004D28  2077 616E 
00004D2C  74        
00004D2D  2074 6865 6848          dc.b      32,116,104,101,32,100,97,116,97,32,116,111,32
00004D31  2064 6174 
00004D35  6120 746F 
00004D39  20        
00004D3A  6265 2063 6849          dc.b      98,101,32,99,111,109,112,111,115,101,100,32
00004D3E  6F6D 706F 
00004D42  7365 6420 
00004D46  6F66 2028 6850          dc.b      111,102,32,40,104,101,120,41,32,49,46,32,48
00004D4A  6865 7829 
00004D4E  2031 2E20 
00004D52  30        
00004D53  2C20 322E 6851          dc.b      44,32,50,46,32,53,44,32,51,46,32,65,44,32,111
00004D57  2035 2C20 
00004D5B  332E 2041 
00004D5F  2C20 6F   
00004D62  7220 342E 6852          dc.b      114,32,52,46,32,70,63,32,80,114,111,118,105
00004D66  2046 3F20 
00004D6A  5072 6F76 
00004D6E  69        
00004D6F  6465 2074 6853          dc.b      100,101,32,116,104,101,32,105,110,116,101,103
00004D73  6865 2069 
00004D77  6E74 6567 
00004D7B  6572 2062 6854          dc.b      101,114,32,98,101,108,111,119,46,10,0
00004D7F  656C 6F77 
00004D83  2E0A 00   
                    6855   @m68kde~1_153:
00004D86  0D0A 446F 6856          dc.b      13,10,68,111,32,121,111,117,32,119,97,110,116
00004D8A  2079 6F75 
00004D8E  2077 616E 
00004D92  74        
00004D93  2074 6F20 6857          dc.b      32,116,111,32,116,101,115,116,32,49,46,32,83
00004D97  7465 7374 
00004D9B  2031 2E20 
00004D9F  53        
00004DA0  5241 4D20 6858          dc.b      82,65,77,32,111,114,32,50,46,32,83,68,82,65
00004DA4  6F72 2032 
00004DA8  2E20 5344 
00004DAC  5241      
00004DAE  4D3F 2050 6859          dc.b      77,63,32,80,114,111,118,105,100,101,32,116,104
00004DB2  726F 7669 
00004DB6  6465 2074 
00004DBA  68        
00004DBB  6520 696E 6860          dc.b      101,32,105,110,116,101,103,101,114,32,98,101
00004DBF  7465 6765 
00004DC3  7220 6265 
00004DC7  6C6F 772E 6861          dc.b      108,111,119,46,10,0
00004DCB  0A00      
                    6862   @m68kde~1_154:
00004DCE  5374 6172 6863          dc.b      83,116,97,114,116,32,97,100,100,114,101,115
00004DD2  7420 6164 
00004DD6  6472 6573 
00004DDA  733A 2025 6864          dc.b      115,58,32,37,120,10,0
00004DDE  780A 00   
                    6865   @m68kde~1_155:
00004DE2  456E 6420 6866          dc.b      69,110,100,32,97,100,100,114,101,115,115,58
00004DE6  6164 6472 
00004DEA  6573 733A 
00004DEE  2025 780A 6867          dc.b      32,37,120,10,0
00004DF2  00        
                    6868   @m68kde~1_156:
00004DF4  5465 7374 6869          dc.b      84,101,115,116,32,100,97,116,97,58,32,37,120
00004DF8  2064 6174 
00004DFC  613A 2025 
00004E00  78        
00004E01  0A00      6870          dc.b      10,0
                    6871   @m68kde~1_157:
00004E04  5465 7374 6872          dc.b      84,101,115,116,32,112,97,115,115,101,100,33
00004E08  2070 6173 
00004E0C  7365 6421 
00004E10  0A00      6873          dc.b      10,0
                    6874   @m68kde~1_158:
00004E12  4445 312D 6875          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00004E16  3638 6B20 
00004E1A  4275 6720 
00004E1E  5631      
00004E20  2E37 3700 6876          dc.b      46,55,55,0
                    6877   @m68kde~1_159:
00004E24  436F 7079 6878          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004E28  7269 6768 
00004E2C  7420 2843 
00004E30  2920 504A 6879          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004E34  2044 6176 
00004E38  6965 7320 
00004E3C  3230      
00004E3E  3136 00   6880          dc.b      49,54,0
                    6881   @m68kde~1_160:
00004E42  0D0A 5275 6882          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00004E46  6E6E 696E 
00004E4A  672E 2E2E 
00004E4E  2E        
00004E4F  2E00      6883          dc.b      46,0
                    6884   @m68kde~1_161:
00004E52  5275 6E6E 6885          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00004E56  696E 672E 
00004E5A  2E2E 2E2E 
00004E5E  00        
                    6886   @m68kde~1_162:
00004E60  4279 3A20 6887          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00004E64  504A 2044 
00004E68  6176 6965 
00004E6C  73        
00004E6D  00        6888          dc.b      0
                    6889   @m68kde~1_163:
00004E6E  0D0A 2573 6890          dc.b      13,10,37,115,0
00004E72  00        
                    6891   @m68kde~1_164:
00004E74  0D0A 5374 6892          dc.b      13,10,83,116,117,100,101,110,116,32,78,97,109
00004E78  7564 656E 
00004E7C  7420 4E61 
00004E80  6D        
00004E81  653A 2053 6893          dc.b      101,58,32,83,104,105,100,105,32,88,105,0
00004E85  6869 6469 
00004E89  2058 6900 
                    6894   @m68kde~1_165:
00004E8E  0D0A 5374 6895          dc.b      13,10,83,116,117,100,101,110,116,32,78,117,109
00004E92  7564 656E 
00004E96  7420 4E75 
00004E9A  6D        
00004E9B  6265 723A 6896          dc.b      98,101,114,58,32,57,48,53,48,54,54,52,51,0
00004E9F  2039 3035 
00004EA3  3036 3634 
00004EA7  3300      
                    6897          section   data
00004EAA            6898                   align
          0000 4EAA 6899   DataStart       equ       *
                    6900   
                    6901   *********************************************************************************************************
                    6902   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6903   * to ram as part of the CStart routine in this file
                    6904   *********************************************************************************************************
                    6905   
                    6906   @itoa_1:
00004EAA  2D32 3134 6907          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004EAE  3734 3833 
00004EB2  3634 3800 
                    6908          section   bss
00004EB6            6909                   align
          0000 4EB6 6910   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6911   
                    6912   *********************************************************************************************************
                    6913   * Section for Uninitialised Data held in ROM as constants
                    6914   *********************************************************************************************************
                    6915   
0B000000            6916                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6917   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6918   
                    6919   
0B000000            6920   bss             org       bss
                    6921   
                    6922   *********************************************************************************************************
                    6923   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6924   * install the exception handler using the C function InstallExceptionHandler()
                    6925   *********************************************************************************************************
                    6926   
                    6927   
                    6928   
0B000000            6929   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            6930   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            6931   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            6932   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            6933   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            6934   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            6935   VCheck           ds.l    1      ditto
0B00001C            6936   VTrapV           ds.l    1      ditto
0B000020            6937   VPrivilege       ds.l    1      ditto
0B000024            6938   VTrace           ds.l    1
0B000028            6939   VLine1010emul    ds.l    1
0B00002C            6940   VLine1111emul    ds.l    1
0B000030            6941   VUnassigned1     ds.l    1
0B000034            6942   VUnassigned2     ds.l    1
0B000038            6943   VUnassigned3     ds.l    1
0B00003C            6944   VUninit_IRQ      ds.l    1
0B000040            6945   VUnassigned4     ds.l    1
0B000044            6946   VUnassigned5     ds.l    1
0B000048            6947   VUnassigned6     ds.l    1
0B00004C            6948   VUnassigned7     ds.l    1
0B000050            6949   VUnassigned8     ds.l    1
0B000054            6950   VUnassigned9     ds.l    1
0B000058            6951   VUnassigned10    ds.l    1
0B00005C            6952   VUnassigned11    ds.l    1
0B000060            6953   VSpuriousIRQ     ds.l    1
                    6954   
                    6955   * Interrupt handlers Vector 25-31
0B000064            6956   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            6957   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            6958   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            6959   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            6960   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            6961   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            6962   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6963   
                    6964   * Trap Handler vectors 32-47
0B000080            6965   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            6966   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            6967   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            6968   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            6969   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            6970   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            6971   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            6972   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            6973   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            6974   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            6975   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            6976   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            6977   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            6978   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            6979   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            6980   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6981   
                    6982   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6983   
                    6984   ***********************************************************************************************************
                    6985   * Other Variables
                    6986   ***********************************************************************************************************
                    6987   *__DebugA5       ds.l    1
                    6988   *__UserA5        ds.l    1
                    6989   
                    6990   ***********************************************************************************************************
0B0000C0            6991   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            6992   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            6993   __heap:         ds.l    0       ; pointers for malloc functions
                    6994   
                    6995   *__himem:       ds.l    himem            ; highest memory location + 1
                    6996   *__stklen:      ds.l    stklen           ; default stack size
                    6997   
                    6998   *********************************************************************************************************
                    6999   * Section for Heap
                    7000   *********************************************************************************************************
                    7001   
                    7002   _i:
0B0000C4            7003          ds.b      4
                    7004   _x:
0B0000C8            7005          ds.b      4
                    7006   _y:
0B0000CC            7007          ds.b      4
                    7008   _z:
0B0000D0            7009          ds.b      4
                    7010   _PortA_Count:
0B0000D4            7011          ds.b      4
                    7012   _Trace:
0B0000D8            7013          ds.b      4
                    7014   _GoFlag:
0B0000DC            7015          ds.b      4
                    7016   _Echo:
0B0000E0            7017          ds.b      4
                    7018   _d0:
0B0000E4            7019          ds.b      4
                    7020   _d1:
0B0000E8            7021          ds.b      4
                    7022   _d2:
0B0000EC            7023          ds.b      4
                    7024   _d3:
0B0000F0            7025          ds.b      4
                    7026   _d4:
0B0000F4            7027          ds.b      4
                    7028   _d5:
0B0000F8            7029          ds.b      4
                    7030   _d6:
0B0000FC            7031          ds.b      4
                    7032   _d7:
0B000100            7033          ds.b      4
                    7034   _a0:
0B000104            7035          ds.b      4
                    7036   _a1:
0B000108            7037          ds.b      4
                    7038   _a2:
0B00010C            7039          ds.b      4
                    7040   _a3:
0B000110            7041          ds.b      4
                    7042   _a4:
0B000114            7043          ds.b      4
                    7044   _a5:
0B000118            7045          ds.b      4
                    7046   _a6:
0B00011C            7047          ds.b      4
                    7048   _PC:
0B000120            7049          ds.b      4
                    7050   _SSP:
0B000124            7051          ds.b      4
                    7052   _USP:
0B000128            7053          ds.b      4
                    7054   _SR:
0B00012C            7055          ds.b      2
                    7056   _BreakPointAddress:
0B00012E            7057          ds.b      32
                    7058   _BreakPointInstruction:
0B00014E            7059          ds.b      16
                    7060   _BreakPointSetOrCleared:
0B00015E            7061          ds.b      32
                    7062   _InstructionSize:
0B00017E            7063          ds.b      4
                    7064   _WatchPointAddress:
0B000182            7065          ds.b      32
                    7066   _WatchPointSetOrCleared:
0B0001A2            7067          ds.b      32
                    7068   _WatchPointString:
0B0001C2            7069          ds.b      800
                    7070   _TempString:
0B0004E2            7071          ds.b      100
                    7072          section   heap
0B000546            7073                   align
          0B00 0546 7074   bssEnd          equ *                   end of storage space for unitialised variables
                    7075   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7076   heap   equ       *
0B000546            7077                    align
          0000 0000

Assembly errors: 0
